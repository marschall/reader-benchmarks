# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:36:00
# Fork: 1 of 1
# Warmup Iteration   1: 3027.839 ops/ms
# Warmup Iteration   2: 3027.955 ops/ms
# Warmup Iteration   3: 3003.420 ops/ms
Iteration   1: 3001.620 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3000.046 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3001.552 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3001.188 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3000.644 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3001.010 ±(99.9%) 2.556 ops/ms [Average]
  (min, avg, max) = (3000.046, 3001.010, 3001.620), stdev = 0.664
  CI (99.9%): [2998.454, 3003.566] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 1.39% complete, ETA 01:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 3083.211 ops/ms
# Warmup Iteration   2: 3091.542 ops/ms
# Warmup Iteration   3: 3114.276 ops/ms
Iteration   1: 3113.567 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3113.566 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3113.362 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3111.890 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3113.403 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3113.157 ±(99.9%) 2.753 ops/ms [Average]
  (min, avg, max) = (3111.890, 3113.157, 3113.567), stdev = 0.715
  CI (99.9%): [3110.405, 3115.910] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 2.78% complete, ETA 01:38:18
# Fork: 1 of 1
# Warmup Iteration   1: 3282.509 ops/ms
# Warmup Iteration   2: 3289.212 ops/ms
# Warmup Iteration   3: 3288.219 ops/ms
Iteration   1: 3288.180 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3288.010 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3288.526 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3289.059 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3288.943 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3288.544 ±(99.9%) 1.767 ops/ms [Average]
  (min, avg, max) = (3288.010, 3288.544, 3289.059), stdev = 0.459
  CI (99.9%): [3286.777, 3290.311] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 4.17% complete, ETA 01:36:54
# Fork: 1 of 1
# Warmup Iteration   1: 377.719 ops/ms
# Warmup Iteration   2: 378.120 ops/ms
# Warmup Iteration   3: 378.333 ops/ms
Iteration   1: 378.259 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 378.317 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 378.362 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 378.067 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 378.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  378.278 ±(99.9%) 0.490 ops/ms [Average]
  (min, avg, max) = (378.067, 378.278, 378.384), stdev = 0.127
  CI (99.9%): [377.788, 378.768] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 5.56% complete, ETA 01:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 411.839 ops/ms
# Warmup Iteration   2: 412.336 ops/ms
# Warmup Iteration   3: 413.032 ops/ms
Iteration   1: 413.051 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 413.183 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 412.868 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 413.224 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 413.114 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  413.088 ±(99.9%) 0.538 ops/ms [Average]
  (min, avg, max) = (412.868, 413.088, 413.224), stdev = 0.140
  CI (99.9%): [412.550, 413.626] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 6.94% complete, ETA 01:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 397.406 ops/ms
# Warmup Iteration   2: 398.234 ops/ms
# Warmup Iteration   3: 397.754 ops/ms
Iteration   1: 398.260 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 398.198 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 397.951 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 397.973 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 397.837 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  398.044 ±(99.9%) 0.686 ops/ms [Average]
  (min, avg, max) = (397.837, 398.044, 398.260), stdev = 0.178
  CI (99.9%): [397.358, 398.730] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 8.33% complete, ETA 01:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 0.367 ops/ms
# Warmup Iteration   2: 0.368 ops/ms
# Warmup Iteration   3: 0.368 ops/ms
Iteration   1: 0.368 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.368 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.368 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.367 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.120 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.368 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.120 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.368 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.367, 0.368, 0.368), stdev = 0.001
  CI (99.9%): [0.367, 0.369] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.114 ±(99.9%) 0.019 B/op [Average]
  (min, avg, max) = (0.111, 0.114, 0.120), stdev = 0.005
  CI (99.9%): [0.096, 0.133] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 9.72% complete, ETA 01:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 0.413 ops/ms
# Warmup Iteration   2: 0.414 ops/ms
# Warmup Iteration   3: 0.414 ops/ms
Iteration   1: 0.413 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.413 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.414 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.414 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.414 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.414 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.413, 0.414, 0.414), stdev = 0.001
  CI (99.9%): [0.413, 0.414] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.106 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.106, 0.106, 0.106), stdev = 0.001
  CI (99.9%): [0.106, 0.107] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 11.11% complete, ETA 01:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 0.357 ops/ms
# Warmup Iteration   2: 0.356 ops/ms
# Warmup Iteration   3: 0.356 ops/ms
Iteration   1: 0.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.123 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.124 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.123 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.123 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.123 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.356 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.356, 0.356, 0.356), stdev = 0.001
  CI (99.9%): [0.356, 0.357] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.123 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.123, 0.123, 0.124), stdev = 0.001
  CI (99.9%): [0.123, 0.124] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 12.50% complete, ETA 01:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 3077.014 ops/ms
# Warmup Iteration   2: 3061.429 ops/ms
# Warmup Iteration   3: 3127.947 ops/ms
Iteration   1: 3132.828 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3134.643 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3129.494 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3130.753 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3131.414 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3131.826 ±(99.9%) 7.629 ops/ms [Average]
  (min, avg, max) = (3129.494, 3131.826, 3134.643), stdev = 1.981
  CI (99.9%): [3124.198, 3139.455] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 13.89% complete, ETA 01:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 3223.274 ops/ms
# Warmup Iteration   2: 3219.554 ops/ms
# Warmup Iteration   3: 3241.895 ops/ms
Iteration   1: 3244.537 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3246.198 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3244.703 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3243.419 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3244.203 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3244.612 ±(99.9%) 3.909 ops/ms [Average]
  (min, avg, max) = (3243.419, 3244.612, 3246.198), stdev = 1.015
  CI (99.9%): [3240.703, 3248.521] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 15.28% complete, ETA 01:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 3142.777 ops/ms
# Warmup Iteration   2: 3154.781 ops/ms
# Warmup Iteration   3: 3151.901 ops/ms
Iteration   1: 3153.640 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3152.658 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3153.584 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3150.262 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3153.270 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3152.683 ±(99.9%) 5.423 ops/ms [Average]
  (min, avg, max) = (3150.262, 3152.683, 3153.640), stdev = 1.408
  CI (99.9%): [3147.260, 3158.105] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 16.67% complete, ETA 01:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 384.118 ops/ms
# Warmup Iteration   2: 385.616 ops/ms
# Warmup Iteration   3: 385.379 ops/ms
Iteration   1: 384.966 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 385.336 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 385.368 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 385.500 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 385.150 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  385.264 ±(99.9%) 0.802 ops/ms [Average]
  (min, avg, max) = (384.966, 385.264, 385.500), stdev = 0.208
  CI (99.9%): [384.462, 386.066] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 18.06% complete, ETA 01:22:51
# Fork: 1 of 1
# Warmup Iteration   1: 437.348 ops/ms
# Warmup Iteration   2: 438.116 ops/ms
# Warmup Iteration   3: 437.955 ops/ms
Iteration   1: 437.946 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 438.347 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 438.327 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 438.220 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 437.498 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  438.067 ±(99.9%) 1.372 ops/ms [Average]
  (min, avg, max) = (437.498, 438.067, 438.347), stdev = 0.356
  CI (99.9%): [436.695, 439.439] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 19.44% complete, ETA 01:21:27
# Fork: 1 of 1
# Warmup Iteration   1: 425.081 ops/ms
# Warmup Iteration   2: 425.710 ops/ms
# Warmup Iteration   3: 426.048 ops/ms
Iteration   1: 425.702 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 425.724 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 425.522 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 425.670 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 425.882 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  425.700 ±(99.9%) 0.497 ops/ms [Average]
  (min, avg, max) = (425.522, 425.700, 425.882), stdev = 0.129
  CI (99.9%): [425.203, 426.196] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 20.83% complete, ETA 01:20:02
# Fork: 1 of 1
# Warmup Iteration   1: 0.376 ops/ms
# Warmup Iteration   2: 0.377 ops/ms
# Warmup Iteration   3: 0.376 ops/ms
Iteration   1: 0.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.377 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.377 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.125 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.377 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.376, 0.377, 0.377), stdev = 0.001
  CI (99.9%): [0.376, 0.377] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.119 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (0.117, 0.119, 0.125), stdev = 0.004
  CI (99.9%): [0.104, 0.133] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 22.22% complete, ETA 01:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 0.426 ops/ms
# Warmup Iteration   2: 0.428 ops/ms
# Warmup Iteration   3: 0.428 ops/ms
Iteration   1: 0.427 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.428 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.428 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.095 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.427 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.110 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.428 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.428 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.427, 0.428, 0.428), stdev = 0.001
  CI (99.9%): [0.427, 0.428] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.103 ±(99.9%) 0.020 B/op [Average]
  (min, avg, max) = (0.095, 0.103, 0.110), stdev = 0.005
  CI (99.9%): [0.082, 0.123] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 23.61% complete, ETA 01:17:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.395 ops/ms
# Warmup Iteration   2: 0.395 ops/ms
# Warmup Iteration   3: 0.395 ops/ms
Iteration   1: 0.395 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.396 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.396 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.395 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.396 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.395 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.395, 0.395, 0.396), stdev = 0.001
  CI (99.9%): [0.395, 0.396] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.108 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (0.103, 0.108, 0.111), stdev = 0.004
  CI (99.9%): [0.091, 0.125] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 25.00% complete, ETA 01:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 3367.086 ops/ms
# Warmup Iteration   2: 3375.125 ops/ms
# Warmup Iteration   3: 3384.297 ops/ms
Iteration   1: 3384.982 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3386.893 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3386.632 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3385.296 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3385.845 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3385.930 ±(99.9%) 3.180 ops/ms [Average]
  (min, avg, max) = (3384.982, 3385.930, 3386.893), stdev = 0.826
  CI (99.9%): [3382.750, 3389.110] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 26.39% complete, ETA 01:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 3364.653 ops/ms
# Warmup Iteration   2: 3304.158 ops/ms
# Warmup Iteration   3: 3387.998 ops/ms
Iteration   1: 3387.881 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3387.641 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3389.185 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3389.052 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3390.442 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3388.840 ±(99.9%) 4.342 ops/ms [Average]
  (min, avg, max) = (3387.641, 3388.840, 3390.442), stdev = 1.128
  CI (99.9%): [3384.498, 3393.183] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 27.78% complete, ETA 01:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 3466.279 ops/ms
# Warmup Iteration   2: 3454.537 ops/ms
# Warmup Iteration   3: 3491.409 ops/ms
Iteration   1: 3495.336 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3493.301 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3493.754 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3493.038 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3492.821 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3493.650 ±(99.9%) 3.868 ops/ms [Average]
  (min, avg, max) = (3492.821, 3493.650, 3495.336), stdev = 1.005
  CI (99.9%): [3489.781, 3497.518] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 29.17% complete, ETA 01:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 419.909 ops/ms
# Warmup Iteration   2: 421.121 ops/ms
# Warmup Iteration   3: 420.059 ops/ms
Iteration   1: 420.152 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 420.067 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 420.026 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 420.113 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 420.026 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  420.077 ±(99.9%) 0.212 ops/ms [Average]
  (min, avg, max) = (420.026, 420.077, 420.152), stdev = 0.055
  CI (99.9%): [419.865, 420.289] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 30.56% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 457.416 ops/ms
# Warmup Iteration   2: 457.831 ops/ms
# Warmup Iteration   3: 458.297 ops/ms
Iteration   1: 457.820 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 457.753 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 457.656 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 457.535 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 457.599 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  457.673 ±(99.9%) 0.442 ops/ms [Average]
  (min, avg, max) = (457.535, 457.673, 457.820), stdev = 0.115
  CI (99.9%): [457.230, 458.115] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 31.94% complete, ETA 01:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 449.874 ops/ms
# Warmup Iteration   2: 449.976 ops/ms
# Warmup Iteration   3: 451.758 ops/ms
Iteration   1: 451.642 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 451.881 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 451.584 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 451.854 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 452.018 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  451.796 ±(99.9%) 0.690 ops/ms [Average]
  (min, avg, max) = (451.584, 451.796, 452.018), stdev = 0.179
  CI (99.9%): [451.105, 452.486] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 33.33% complete, ETA 01:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 0.424 ops/ms
# Warmup Iteration   2: 0.425 ops/ms
# Warmup Iteration   3: 0.425 ops/ms
Iteration   1: 0.425 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.425 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.426 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.426 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.425 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.426 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.425, 0.426, 0.426), stdev = 0.001
  CI (99.9%): [0.424, 0.427] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.099 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.096, 0.099, 0.103), stdev = 0.004
  CI (99.9%): [0.083, 0.115] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 34.72% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 0.451 ops/ms
# Warmup Iteration   2: 0.452 ops/ms
# Warmup Iteration   3: 0.452 ops/ms
Iteration   1: 0.452 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.452 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.090 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.452 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.090 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.452 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.090 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.452 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.452 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.452, 0.452, 0.452), stdev = 0.001
  CI (99.9%): [0.452, 0.452] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.093 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.090, 0.093, 0.097), stdev = 0.004
  CI (99.9%): [0.078, 0.108] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 36.11% complete, ETA 01:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 0.458 ops/ms
# Warmup Iteration   2: 0.460 ops/ms
# Warmup Iteration   3: 0.459 ops/ms
Iteration   1: 0.460 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.460 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.459 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.460 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.089 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.460 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.096 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.460 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.459, 0.460, 0.460), stdev = 0.001
  CI (99.9%): [0.459, 0.460] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.094 ±(99.9%) 0.012 B/op [Average]
  (min, avg, max) = (0.089, 0.094, 0.096), stdev = 0.003
  CI (99.9%): [0.082, 0.106] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 37.50% complete, ETA 01:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 9076.041 ops/ms
# Warmup Iteration   2: 9883.471 ops/ms
# Warmup Iteration   3: 9912.612 ops/ms
Iteration   1: 9907.835 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9914.087 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9912.100 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9915.653 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9915.648 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9913.065 ±(99.9%) 12.582 ops/ms [Average]
  (min, avg, max) = (9907.835, 9913.065, 9915.653), stdev = 3.267
  CI (99.9%): [9900.483, 9925.646] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 38.89% complete, ETA 01:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 12304.789 ops/ms
# Warmup Iteration   2: 11204.032 ops/ms
# Warmup Iteration   3: 11303.678 ops/ms
Iteration   1: 11306.347 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11305.012 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11312.338 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11303.145 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11299.832 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11305.335 ±(99.9%) 17.777 ops/ms [Average]
  (min, avg, max) = (11299.832, 11305.335, 11312.338), stdev = 4.617
  CI (99.9%): [11287.558, 11323.111] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 40.28% complete, ETA 01:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 13178.076 ops/ms
# Warmup Iteration   2: 12193.083 ops/ms
# Warmup Iteration   3: 12431.238 ops/ms
Iteration   1: 12434.238 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12427.018 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12429.729 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12437.527 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12439.866 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12433.676 ±(99.9%) 20.501 ops/ms [Average]
  (min, avg, max) = (12427.018, 12433.676, 12439.866), stdev = 5.324
  CI (99.9%): [12413.175, 12454.176] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 41.67% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 990.952 ops/ms
# Warmup Iteration   2: 993.205 ops/ms
# Warmup Iteration   3: 998.396 ops/ms
Iteration   1: 998.763 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 999.479 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 999.431 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 999.420 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 999.141 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  999.247 ±(99.9%) 1.160 ops/ms [Average]
  (min, avg, max) = (998.763, 999.247, 999.479), stdev = 0.301
  CI (99.9%): [998.087, 1000.407] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 43.06% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 2419.682 ops/ms
# Warmup Iteration   2: 2427.189 ops/ms
# Warmup Iteration   3: 2433.114 ops/ms
Iteration   1: 2430.948 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2430.839 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2434.029 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2432.762 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2435.359 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2432.787 ±(99.9%) 7.540 ops/ms [Average]
  (min, avg, max) = (2430.839, 2432.787, 2435.359), stdev = 1.958
  CI (99.9%): [2425.247, 2440.328] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 44.44% complete, ETA 00:56:09
# Fork: 1 of 1
# Warmup Iteration   1: 2373.191 ops/ms
# Warmup Iteration   2: 2381.238 ops/ms
# Warmup Iteration   3: 2385.729 ops/ms
Iteration   1: 2383.218 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2385.849 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2385.980 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2384.984 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2385.997 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2385.206 ±(99.9%) 4.571 ops/ms [Average]
  (min, avg, max) = (2383.218, 2385.206, 2385.997), stdev = 1.187
  CI (99.9%): [2380.634, 2389.777] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 45.83% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 0.820 ops/ms
# Warmup Iteration   2: 0.822 ops/ms
# Warmup Iteration   3: 0.823 ops/ms
Iteration   1: 0.822 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.054 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.823 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.050 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.823 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.053 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.822 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.054 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.822 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.054 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  0.822 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.822, 0.822, 0.823), stdev = 0.001
  CI (99.9%): [0.821, 0.824] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.053 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (0.050, 0.053, 0.054), stdev = 0.002
  CI (99.9%): [0.046, 0.059] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 47.22% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 1.465 ops/ms
# Warmup Iteration   2: 1.470 ops/ms
# Warmup Iteration   3: 1.470 ops/ms
Iteration   1: 1.469 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.473 ±(99.9%) 0.007 ops/ms [Average]
  (min, avg, max) = (1.469, 1.473, 1.474), stdev = 0.002
  CI (99.9%): [1.466, 1.480] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.028, 0.030, 0.035), stdev = 0.003
  CI (99.9%): [0.019, 0.041] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 48.61% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 1.727 ops/ms
# Warmup Iteration   2: 1.733 ops/ms
# Warmup Iteration   3: 1.731 ops/ms
Iteration   1: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.733 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.733 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.732 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.732, 1.732, 1.733), stdev = 0.001
  CI (99.9%): [1.731, 1.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.025 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.024, 0.025, 0.031), stdev = 0.003
  CI (99.9%): [0.012, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 50.00% complete, ETA 00:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 10923.591 ops/ms
# Warmup Iteration   2: 10832.556 ops/ms
# Warmup Iteration   3: 10910.572 ops/ms
Iteration   1: 10906.408 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10909.602 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10903.331 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10909.603 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10913.175 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10908.424 ±(99.9%) 14.325 ops/ms [Average]
  (min, avg, max) = (10903.331, 10908.424, 10913.175), stdev = 3.720
  CI (99.9%): [10894.099, 10922.749] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 51.39% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 14001.978 ops/ms
# Warmup Iteration   2: 14142.872 ops/ms
# Warmup Iteration   3: 14224.561 ops/ms
Iteration   1: 14217.455 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14229.070 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14227.240 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14231.264 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14228.134 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  14226.633 ±(99.9%) 20.578 ops/ms [Average]
  (min, avg, max) = (14217.455, 14226.633, 14231.264), stdev = 5.344
  CI (99.9%): [14206.055, 14247.210] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 52.78% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 14046.223 ops/ms
# Warmup Iteration   2: 14109.571 ops/ms
# Warmup Iteration   3: 14330.399 ops/ms
Iteration   1: 14334.883 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14342.540 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14340.626 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14331.004 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14337.081 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  14337.227 ±(99.9%) 17.649 ops/ms [Average]
  (min, avg, max) = (14331.004, 14337.227, 14342.540), stdev = 4.583
  CI (99.9%): [14319.578, 14354.875] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 54.17% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1052.444 ops/ms
# Warmup Iteration   2: 1049.333 ops/ms
# Warmup Iteration   3: 1054.837 ops/ms
Iteration   1: 1053.367 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1053.179 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1054.593 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1053.742 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1054.688 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1053.914 ±(99.9%) 2.675 ops/ms [Average]
  (min, avg, max) = (1053.179, 1053.914, 1054.688), stdev = 0.695
  CI (99.9%): [1051.239, 1056.589] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 55.56% complete, ETA 00:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 2672.631 ops/ms
# Warmup Iteration   2: 2688.690 ops/ms
# Warmup Iteration   3: 2688.119 ops/ms
Iteration   1: 2688.179 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2690.054 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2690.538 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2689.621 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2688.547 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2689.388 ±(99.9%) 3.846 ops/ms [Average]
  (min, avg, max) = (2688.179, 2689.388, 2690.538), stdev = 0.999
  CI (99.9%): [2685.542, 2693.234] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 56.94% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 2574.200 ops/ms
# Warmup Iteration   2: 2597.496 ops/ms
# Warmup Iteration   3: 2613.008 ops/ms
Iteration   1: 2611.250 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2611.794 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2611.036 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2611.407 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2611.337 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2611.365 ±(99.9%) 1.069 ops/ms [Average]
  (min, avg, max) = (2611.036, 2611.365, 2611.794), stdev = 0.278
  CI (99.9%): [2610.296, 2612.434] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 58.33% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 1.017 ops/ms
# Warmup Iteration   2: 1.020 ops/ms
# Warmup Iteration   3: 1.020 ops/ms
Iteration   1: 1.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.020 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.021 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.021 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.020 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.043 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.020 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.019, 1.020, 1.021), stdev = 0.001
  CI (99.9%): [1.018, 1.023] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.041 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (0.040, 0.041, 0.043), stdev = 0.002
  CI (99.9%): [0.035, 0.048] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 59.72% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 1.586 ops/ms
# Warmup Iteration   2: 1.595 ops/ms
# Warmup Iteration   3: 1.594 ops/ms
Iteration   1: 1.594 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.596 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.595 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.593 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.596 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.595 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.593, 1.595, 1.596), stdev = 0.001
  CI (99.9%): [1.589, 1.600] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.036), stdev = 0.004
  CI (99.9%): [0.013, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 61.11% complete, ETA 00:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 1.717 ops/ms
# Warmup Iteration   2: 1.732 ops/ms
# Warmup Iteration   3: 1.731 ops/ms
Iteration   1: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.731 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.732 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.732 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.731, 1.732, 1.732), stdev = 0.001
  CI (99.9%): [1.730, 1.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.025 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.024, 0.025, 0.030), stdev = 0.002
  CI (99.9%): [0.016, 0.035] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 62.50% complete, ETA 00:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 9795.019 ops/ms
# Warmup Iteration   2: 9822.937 ops/ms
# Warmup Iteration   3: 9953.908 ops/ms
Iteration   1: 9958.731 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9964.628 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9955.654 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9959.658 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9953.860 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9958.506 ±(99.9%) 15.944 ops/ms [Average]
  (min, avg, max) = (9953.860, 9958.506, 9964.628), stdev = 4.141
  CI (99.9%): [9942.562, 9974.450] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 63.89% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 11812.656 ops/ms
# Warmup Iteration   2: 11831.365 ops/ms
# Warmup Iteration   3: 12065.183 ops/ms
Iteration   1: 12068.660 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12083.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12068.168 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12083.230 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12076.508 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12076.008 ±(99.9%) 28.790 ops/ms [Average]
  (min, avg, max) = (12068.168, 12076.008, 12083.473), stdev = 7.477
  CI (99.9%): [12047.217, 12104.798] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 65.28% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 11075.222 ops/ms
# Warmup Iteration   2: 11040.330 ops/ms
# Warmup Iteration   3: 11155.101 ops/ms
Iteration   1: 11148.976 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11160.735 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11160.023 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11162.839 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11163.008 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11159.116 ±(99.9%) 22.393 ops/ms [Average]
  (min, avg, max) = (11148.976, 11159.116, 11163.008), stdev = 5.815
  CI (99.9%): [11136.723, 11181.509] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 66.67% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 1247.439 ops/ms
# Warmup Iteration   2: 1251.841 ops/ms
# Warmup Iteration   3: 1252.446 ops/ms
Iteration   1: 1252.454 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1252.303 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1251.674 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1251.882 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1251.770 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1252.017 ±(99.9%) 1.319 ops/ms [Average]
  (min, avg, max) = (1251.674, 1252.017, 1252.454), stdev = 0.343
  CI (99.9%): [1250.697, 1253.336] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 68.06% complete, ETA 00:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 2405.711 ops/ms
# Warmup Iteration   2: 2412.249 ops/ms
# Warmup Iteration   3: 2415.253 ops/ms
Iteration   1: 2415.187 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2415.685 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2422.639 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2421.668 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2422.110 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2419.458 ±(99.9%) 14.216 ops/ms [Average]
  (min, avg, max) = (2415.187, 2419.458, 2422.639), stdev = 3.692
  CI (99.9%): [2405.242, 2433.674] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 69.44% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 2194.621 ops/ms
# Warmup Iteration   2: 2201.223 ops/ms
# Warmup Iteration   3: 2210.433 ops/ms
Iteration   1: 2208.272 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2209.955 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2209.826 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2209.797 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2207.486 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2209.067 ±(99.9%) 4.317 ops/ms [Average]
  (min, avg, max) = (2207.486, 2209.067, 2209.955), stdev = 1.121
  CI (99.9%): [2204.751, 2213.384] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 70.83% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 1.198 ops/ms
# Warmup Iteration   2: 1.201 ops/ms
# Warmup Iteration   3: 1.204 ops/ms
Iteration   1: 1.201 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.201 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.203 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.039 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.204 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.204 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.203 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.201, 1.203, 1.204), stdev = 0.002
  CI (99.9%): [1.196, 1.209] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.036 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.034, 0.036, 0.039), stdev = 0.002
  CI (99.9%): [0.028, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 72.22% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 2.327 ops/ms
# Warmup Iteration   2: 2.329 ops/ms
# Warmup Iteration   3: 2.328 ops/ms
Iteration   1: 2.329 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.334 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.347 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.347 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.347 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.341 ±(99.9%) 0.033 ops/ms [Average]
  (min, avg, max) = (2.329, 2.341, 2.347), stdev = 0.009
  CI (99.9%): [2.308, 2.374] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.019 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (0.017, 0.019, 0.022), stdev = 0.002
  CI (99.9%): [0.011, 0.026] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 73.61% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 2.350 ops/ms
# Warmup Iteration   2: 2.358 ops/ms
# Warmup Iteration   3: 2.355 ops/ms
Iteration   1: 2.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.358 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.351 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.359 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.356 ±(99.9%) 0.012 ops/ms [Average]
  (min, avg, max) = (2.351, 2.356, 2.359), stdev = 0.003
  CI (99.9%): [2.344, 2.368] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.020 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (0.019, 0.020, 0.023), stdev = 0.002
  CI (99.9%): [0.012, 0.027] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 75.00% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 24839.642 ops/ms
# Warmup Iteration   2: 25755.004 ops/ms
# Warmup Iteration   3: 26219.834 ops/ms
Iteration   1: 26195.262 ops/ms
                 ·gc.alloc.rate:                   6470.954 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.542 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.687 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         45.000 ms

Iteration   2: 26226.349 ops/ms
                 ·gc.alloc.rate:                   6478.697 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.690 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.369 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         42.000 ms

Iteration   3: 26234.531 ops/ms
                 ·gc.alloc.rate:                   6480.594 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6521.013 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.703 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         44.000 ms

Iteration   4: 26230.686 ops/ms
                 ·gc.alloc.rate:                   6479.720 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.619 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.324 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         46.000 ms

Iteration   5: 26220.811 ops/ms
                 ·gc.alloc.rate:                   6477.209 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6521.070 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.849 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         41.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  26221.528 ±(99.9%) 59.860 ops/ms [Average]
  (min, avg, max) = (26195.262, 26221.528, 26234.531), stdev = 15.545
  CI (99.9%): [26161.668, 26281.387] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6477.435 ±(99.9%) 14.769 MB/sec [Average]
  (min, avg, max) = (6470.954, 6477.435, 6480.594), stdev = 3.835
  CI (99.9%): [6462.666, 6492.204] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.007 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.007, 272.007, 272.007), stdev = 0.001
  CI (99.9%): [272.007, 272.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6472.187 ±(99.9%) 171.731 MB/sec [Average]
  (min, avg, max) = (6439.542, 6472.187, 6521.070), stdev = 44.598
  CI (99.9%): [6300.455, 6643.918] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.786 ±(99.9%) 7.018 B/op [Average]
  (min, avg, max) = (270.324, 271.786, 273.849), stdev = 1.823
  CI (99.9%): [264.768, 278.804] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  397.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (79.000, 79.400, 80.000), stdev = 0.548
  CI (99.9%): [397.000, 397.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  218.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (41.000, 43.600, 46.000), stdev = 2.074
  CI (99.9%): [218.000, 218.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 76.39% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 24888.595 ops/ms
# Warmup Iteration   2: 25669.649 ops/ms
# Warmup Iteration   3: 26254.246 ops/ms
Iteration   1: 26221.984 ops/ms
                 ·gc.alloc.rate:                   6477.618 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.604 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.411 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         44.000 ms

Iteration   2: 26244.941 ops/ms
                 ·gc.alloc.rate:                   6483.267 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6521.172 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.597 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         46.000 ms

Iteration   3: 26258.068 ops/ms
                 ·gc.alloc.rate:                   6486.529 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.656 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.041 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         46.000 ms

Iteration   4: 25530.022 ops/ms
                 ·gc.alloc.rate:                   6306.650 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6358.097 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.226 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         40.000 ms

Iteration   5: 25521.357 ops/ms
                 ·gc.alloc.rate:                   6304.353 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6276.443 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.803 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         39.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  25955.274 ±(99.9%) 1510.916 ops/ms [Average]
  (min, avg, max) = (25521.357, 25955.274, 26258.068), stdev = 392.380
  CI (99.9%): [24444.359, 27466.190] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6411.683 ±(99.9%) 373.459 MB/sec [Average]
  (min, avg, max) = (6304.353, 6411.683, 6486.529), stdev = 96.986
  CI (99.9%): [6038.224, 6785.143] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.007 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.007, 272.007, 272.007), stdev = 0.001
  CI (99.9%): [272.007, 272.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6406.994 ±(99.9%) 358.137 MB/sec [Average]
  (min, avg, max) = (6276.443, 6406.994, 6521.172), stdev = 93.007
  CI (99.9%): [6048.857, 6765.132] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.816 ±(99.9%) 7.490 B/op [Average]
  (min, avg, max) = (270.041, 271.816, 274.226), stdev = 1.945
  CI (99.9%): [264.326, 279.305] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.008 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  393.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (77.000, 78.600, 80.000), stdev = 1.140
  CI (99.9%): [393.000, 393.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  215.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (39.000, 43.000, 46.000), stdev = 3.317
  CI (99.9%): [215.000, 215.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 77.78% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 24845.433 ops/ms
# Warmup Iteration   2: 25795.704 ops/ms
# Warmup Iteration   3: 26210.326 ops/ms
Iteration   1: 26211.366 ops/ms
                 ·gc.alloc.rate:                   6474.997 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.635 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.522 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         44.000 ms

Iteration   2: 26231.205 ops/ms
                 ·gc.alloc.rate:                   6479.914 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6521.239 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.742 B/op
                 ·gc.churn.G1_Survivor_Space:      0.009 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         46.000 ms

Iteration   3: 26182.989 ops/ms
                 ·gc.alloc.rate:                   6467.876 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.520 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.814 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         46.000 ms

Iteration   4: 26215.464 ops/ms
                 ·gc.alloc.rate:                   6475.821 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.463 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.480 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         54.000 ms

Iteration   5: 26241.222 ops/ms
                 ·gc.alloc.rate:                   6482.327 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6521.096 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.634 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         45.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  26216.449 ±(99.9%) 85.623 ops/ms [Average]
  (min, avg, max) = (26182.989, 26216.449, 26241.222), stdev = 22.236
  CI (99.9%): [26130.826, 26302.073] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6476.187 ±(99.9%) 21.285 MB/sec [Average]
  (min, avg, max) = (6467.876, 6476.187, 6482.327), stdev = 5.528
  CI (99.9%): [6454.902, 6497.472] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.007 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.007, 272.007, 272.007), stdev = 0.001
  CI (99.9%): [272.007, 272.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6472.191 ±(99.9%) 172.161 MB/sec [Average]
  (min, avg, max) = (6439.463, 6472.191, 6521.239), stdev = 44.710
  CI (99.9%): [6300.030, 6644.352] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.838 ±(99.9%) 6.522 B/op [Average]
  (min, avg, max) = (270.480, 271.838, 273.742), stdev = 1.694
  CI (99.9%): [265.316, 278.360] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.011 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.009), stdev = 0.003
  CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  397.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (79.000, 79.400, 80.000), stdev = 0.548
  CI (99.9%): [397.000, 397.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  235.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (44.000, 47.000, 54.000), stdev = 4.000
  CI (99.9%): [235.000, 235.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 79.17% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 4015.004 ops/ms
# Warmup Iteration   2: 3996.089 ops/ms
# Warmup Iteration   3: 4333.129 ops/ms
Iteration   1: 4329.677 ops/ms
                 ·gc.alloc.rate:                   8116.059 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          8163.562 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2076.132 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         57.000 ms

Iteration   2: 4372.560 ops/ms
                 ·gc.alloc.rate:                   8196.464 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          8163.678 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2055.793 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         58.000 ms

Iteration   3: 4357.725 ops/ms
                 ·gc.alloc.rate:                   8168.433 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          8163.423 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2062.784 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         62.000 ms

Iteration   4: 4335.835 ops/ms
                 ·gc.alloc.rate:                   8127.522 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          8163.597 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2073.211 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         58.000 ms

Iteration   5: 4338.564 ops/ms
                 ·gc.alloc.rate:                   8132.393 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          8163.266 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2071.886 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         56.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  4346.872 ±(99.9%) 68.454 ops/ms [Average]
  (min, avg, max) = (4329.677, 4346.872, 4372.560), stdev = 17.777
  CI (99.9%): [4278.418, 4415.326] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  8148.174 ±(99.9%) 128.425 MB/sec [Average]
  (min, avg, max) = (8116.059, 8148.174, 8196.464), stdev = 33.352
  CI (99.9%): [8019.749, 8276.599] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.050 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (2064.050, 2064.050, 2064.051), stdev = 0.001
  CI (99.9%): [2064.048, 2064.052] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  8163.505 ±(99.9%) 0.625 MB/sec [Average]
  (min, avg, max) = (8163.266, 8163.505, 8163.678), stdev = 0.162
  CI (99.9%): [8162.880, 8164.130] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2067.961 ±(99.9%) 32.480 B/op [Average]
  (min, avg, max) = (2055.793, 2067.961, 2076.132), stdev = 8.435
  CI (99.9%): [2035.482, 2100.441] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  470.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (94.000, 94.000, 94.000), stdev = 0.001
  CI (99.9%): [470.000, 470.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  291.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (56.000, 58.200, 62.000), stdev = 2.280
  CI (99.9%): [291.000, 291.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 80.56% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 5290.674 ops/ms
# Warmup Iteration   2: 5482.193 ops/ms
# Warmup Iteration   3: 5633.837 ops/ms
Iteration   1: 5633.398 ops/ms
                 ·gc.alloc.rate:                   10559.978 MB/sec
                 ·gc.alloc.rate.norm:              2064.039 B/op
                 ·gc.churn.G1_Eden_Space:          10556.669 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.392 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         63.000 ms

Iteration   2: 5642.480 ops/ms
                 ·gc.alloc.rate:                   10576.719 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10669.869 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2082.217 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         60.000 ms

Iteration   3: 5640.541 ops/ms
                 ·gc.alloc.rate:                   10573.176 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.380 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2060.759 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         58.000 ms

Iteration   4: 5661.117 ops/ms
                 ·gc.alloc.rate:                   10611.676 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.316 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2053.270 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         63.000 ms

Iteration   5: 5632.909 ops/ms
                 ·gc.alloc.rate:                   10558.815 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10669.906 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2085.755 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        94.000 counts
                 ·gc.time:                         62.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  5642.089 ±(99.9%) 44.090 ops/ms [Average]
  (min, avg, max) = (5632.909, 5642.089, 5661.117), stdev = 11.450
  CI (99.9%): [5597.999, 5686.179] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  10576.073 ±(99.9%) 82.435 MB/sec [Average]
  (min, avg, max) = (10558.815, 10576.073, 10611.676), stdev = 21.408
  CI (99.9%): [10493.638, 10658.508] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.038 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.038, 2064.038, 2064.039), stdev = 0.001
  CI (99.9%): [2064.037, 2064.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  10601.828 ±(99.9%) 239.239 MB/sec [Average]
  (min, avg, max) = (10556.316, 10601.828, 10669.906), stdev = 62.130
  CI (99.9%): [10362.589, 10841.067] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2069.078 ±(99.9%) 54.530 B/op [Average]
  (min, avg, max) = (2053.270, 2069.078, 2085.755), stdev = 14.161
  CI (99.9%): [2014.549, 2123.608] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  467.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (93.000, 93.400, 94.000), stdev = 0.548
  CI (99.9%): [467.000, 467.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  306.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (58.000, 61.200, 63.000), stdev = 2.168
  CI (99.9%): [306.000, 306.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 81.94% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 5278.141 ops/ms
# Warmup Iteration   2: 5490.859 ops/ms
# Warmup Iteration   3: 5625.086 ops/ms
Iteration   1: 5640.757 ops/ms
                 ·gc.alloc.rate:                   10573.724 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.543 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2060.685 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         60.000 ms

Iteration   2: 5606.593 ops/ms
                 ·gc.alloc.rate:                   10509.616 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.535 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2073.253 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         59.000 ms

Iteration   3: 5625.321 ops/ms
                 ·gc.alloc.rate:                   10544.655 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.407 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2066.338 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         60.000 ms

Iteration   4: 5616.070 ops/ms
                 ·gc.alloc.rate:                   10527.237 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.322 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2069.741 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         60.000 ms

Iteration   5: 5646.337 ops/ms
                 ·gc.alloc.rate:                   10583.884 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.260 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2058.651 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         61.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  5627.016 ±(99.9%) 63.910 ops/ms [Average]
  (min, avg, max) = (5606.593, 5627.016, 5646.337), stdev = 16.597
  CI (99.9%): [5563.106, 5690.926] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  10547.823 ±(99.9%) 119.694 MB/sec [Average]
  (min, avg, max) = (10509.616, 10547.823, 10583.884), stdev = 31.084
  CI (99.9%): [10428.130, 10667.517] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.038 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.038, 2064.038, 2064.038), stdev = 0.001
  CI (99.9%): [2064.037, 2064.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  10556.413 ±(99.9%) 0.484 MB/sec [Average]
  (min, avg, max) = (10556.260, 10556.413, 10556.543), stdev = 0.126
  CI (99.9%): [10555.929, 10556.898] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2065.734 ±(99.9%) 23.472 B/op [Average]
  (min, avg, max) = (2058.651, 2065.734, 2073.253), stdev = 6.095
  CI (99.9%): [2042.262, 2089.205] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [0.001, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  465.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (93.000, 93.000, 93.000), stdev = 0.001
  CI (99.9%): [465.000, 465.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  300.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (59.000, 60.000, 61.000), stdev = 0.707
  CI (99.9%): [300.000, 300.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 83.33% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 14.858 ops/ms
# Warmup Iteration   2: 13.068 ops/ms
# Warmup Iteration   3: 16.374 ops/ms
Iteration   1: 16.429 ops/ms
                 ·gc.alloc.rate:                   244.699 MB/sec
                 ·gc.alloc.rate.norm:              16400.855 B/op
                 ·gc.churn.G1_Eden_Space:          225.491 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15113.413 B/op
                 ·gc.churn.G1_Survivor_Space:      0.346 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 23.190 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         5.000 ms

Iteration   2: 16.410 ops/ms
                 ·gc.alloc.rate:                   244.416 MB/sec
                 ·gc.alloc.rate.norm:              16400.806 B/op
                 ·gc.churn.G1_Eden_Space:          281.869 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     18913.985 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.421 B/op
                 ·gc.count:                        5.000 counts
                 ·gc.time:                         4.000 ms

Iteration   3: 16.423 ops/ms
                 ·gc.alloc.rate:                   244.604 MB/sec
                 ·gc.alloc.rate.norm:              16400.645 B/op
                 ·gc.churn.G1_Eden_Space:          225.491 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15119.119 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.034 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 16.376 ops/ms
                 ·gc.alloc.rate:                   243.902 MB/sec
                 ·gc.alloc.rate.norm:              16400.648 B/op
                 ·gc.churn.G1_Eden_Space:          225.491 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15162.604 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.063 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 16.396 ops/ms
                 ·gc.alloc.rate:                   244.206 MB/sec
                 ·gc.alloc.rate.norm:              16400.810 B/op
                 ·gc.churn.G1_Eden_Space:          281.869 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     18930.251 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.067 B/op
                 ·gc.count:                        5.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  16.406 ±(99.9%) 0.083 ops/ms [Average]
  (min, avg, max) = (16.376, 16.406, 16.429), stdev = 0.022
  CI (99.9%): [16.324, 16.489] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  244.366 ±(99.9%) 1.235 MB/sec [Average]
  (min, avg, max) = (243.902, 244.366, 244.699), stdev = 0.321
  CI (99.9%): [243.131, 245.600] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.753 ±(99.9%) 0.381 B/op [Average]
  (min, avg, max) = (16400.645, 16400.753, 16400.855), stdev = 0.099
  CI (99.9%): [16400.371, 16401.134] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  248.042 ±(99.9%) 118.906 MB/sec [Average]
  (min, avg, max) = (225.491, 248.042, 281.869), stdev = 30.880
  CI (99.9%): [129.136, 366.948] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16647.874 ±(99.9%) 7994.653 B/op [Average]
  (min, avg, max) = (15113.413, 16647.874, 18930.251), stdev = 2076.186
  CI (99.9%): [8653.221, 24642.527] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.071 ±(99.9%) 0.592 MB/sec [Average]
  (min, avg, max) = (0.001, 0.071, 0.346), stdev = 0.154
  CI (99.9%): [≈ 0, 0.663] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  4.755 ±(99.9%) 39.688 B/op [Average]
  (min, avg, max) = (0.034, 4.755, 23.190), stdev = 10.307
  CI (99.9%): [≈ 0, 44.443] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  22.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  18.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
  CI (99.9%): [18.000, 18.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 84.72% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 41.284 ops/ms
# Warmup Iteration   2: 41.445 ops/ms
# Warmup Iteration   3: 44.596 ops/ms
Iteration   1: 44.622 ops/ms
                 ·gc.alloc.rate:                   664.621 MB/sec
                 ·gc.alloc.rate.norm:              16400.711 B/op
                 ·gc.churn.G1_Eden_Space:          676.472 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16693.149 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         9.000 ms

Iteration   2: 44.621 ops/ms
                 ·gc.alloc.rate:                   664.606 MB/sec
                 ·gc.alloc.rate.norm:              16400.709 B/op
                 ·gc.churn.G1_Eden_Space:          676.487 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16693.897 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.037 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         9.000 ms

Iteration   3: 44.584 ops/ms
                 ·gc.alloc.rate:                   664.051 MB/sec
                 ·gc.alloc.rate.norm:              16400.651 B/op
                 ·gc.churn.G1_Eden_Space:          620.110 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15315.404 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.053 B/op
                 ·gc.count:                        11.000 counts
                 ·gc.time:                         8.000 ms

Iteration   4: 44.599 ops/ms
                 ·gc.alloc.rate:                   664.268 MB/sec
                 ·gc.alloc.rate.norm:              16400.696 B/op
                 ·gc.churn.G1_Eden_Space:          676.470 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16701.944 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.047 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         9.000 ms

Iteration   5: 44.663 ops/ms
                 ·gc.alloc.rate:                   665.234 MB/sec
                 ·gc.alloc.rate.norm:              16400.672 B/op
                 ·gc.churn.G1_Eden_Space:          676.480 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16677.937 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.051 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         13.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  44.618 ±(99.9%) 0.116 ops/ms [Average]
  (min, avg, max) = (44.584, 44.618, 44.663), stdev = 0.030
  CI (99.9%): [44.502, 44.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  664.556 ±(99.9%) 1.727 MB/sec [Average]
  (min, avg, max) = (664.051, 664.556, 665.234), stdev = 0.449
  CI (99.9%): [662.829, 666.283] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.688 ±(99.9%) 0.100 B/op [Average]
  (min, avg, max) = (16400.651, 16400.688, 16400.711), stdev = 0.026
  CI (99.9%): [16400.588, 16400.787] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  665.204 ±(99.9%) 97.068 MB/sec [Average]
  (min, avg, max) = (620.110, 665.204, 676.487), stdev = 25.208
  CI (99.9%): [568.136, 762.272] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16416.466 ±(99.9%) 2370.355 B/op [Average]
  (min, avg, max) = (15315.404, 16416.466, 16701.944), stdev = 615.574
  CI (99.9%): [14046.111, 18786.821] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.047 ±(99.9%) 0.024 B/op [Average]
  (min, avg, max) = (0.037, 0.047, 0.053), stdev = 0.006
  CI (99.9%): [0.023, 0.071] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  59.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.800, 12.000), stdev = 0.447
  CI (99.9%): [59.000, 59.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  48.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.600, 13.000), stdev = 1.949
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 86.11% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 49.060 ops/ms
# Warmup Iteration   2: 49.111 ops/ms
# Warmup Iteration   3: 53.745 ops/ms
Iteration   1: 53.860 ops/ms
                 ·gc.alloc.rate:                   802.216 MB/sec
                 ·gc.alloc.rate.norm:              16400.735 B/op
                 ·gc.churn.G1_Eden_Space:          845.605 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17287.782 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.017 B/op
                 ·gc.count:                        15.000 counts
                 ·gc.time:                         9.000 ms

Iteration   2: 53.786 ops/ms
                 ·gc.alloc.rate:                   801.123 MB/sec
                 ·gc.alloc.rate.norm:              16400.686 B/op
                 ·gc.churn.G1_Eden_Space:          789.244 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16157.492 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.029 B/op
                 ·gc.count:                        14.000 counts
                 ·gc.time:                         13.000 ms

Iteration   3: 53.766 ops/ms
                 ·gc.alloc.rate:                   800.799 MB/sec
                 ·gc.alloc.rate.norm:              16400.670 B/op
                 ·gc.churn.G1_Eden_Space:          789.207 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16163.262 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.029 B/op
                 ·gc.count:                        14.000 counts
                 ·gc.time:                         10.000 ms

Iteration   4: 53.783 ops/ms
                 ·gc.alloc.rate:                   800.981 MB/sec
                 ·gc.alloc.rate.norm:              16400.697 B/op
                 ·gc.churn.G1_Eden_Space:          845.503 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17312.307 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.046 B/op
                 ·gc.count:                        15.000 counts
                 ·gc.time:                         10.000 ms

Iteration   5: 53.756 ops/ms
                 ·gc.alloc.rate:                   800.643 MB/sec
                 ·gc.alloc.rate.norm:              16400.651 B/op
                 ·gc.churn.G1_Eden_Space:          789.210 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16166.449 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.027 B/op
                 ·gc.count:                        14.000 counts
                 ·gc.time:                         11.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  53.790 ±(99.9%) 0.157 ops/ms [Average]
  (min, avg, max) = (53.756, 53.790, 53.860), stdev = 0.041
  CI (99.9%): [53.633, 53.948] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  801.153 ±(99.9%) 2.394 MB/sec [Average]
  (min, avg, max) = (800.643, 801.153, 802.216), stdev = 0.622
  CI (99.9%): [798.759, 803.546] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.688 ±(99.9%) 0.122 B/op [Average]
  (min, avg, max) = (16400.651, 16400.688, 16400.735), stdev = 0.032
  CI (99.9%): [16400.566, 16400.810] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  811.754 ±(99.9%) 118.812 MB/sec [Average]
  (min, avg, max) = (789.207, 811.754, 845.605), stdev = 30.855
  CI (99.9%): [692.941, 930.566] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16617.458 ±(99.9%) 2399.650 B/op [Average]
  (min, avg, max) = (16157.492, 16617.458, 17312.307), stdev = 623.182
  CI (99.9%): [14217.808, 19017.108] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.030 ±(99.9%) 0.040 B/op [Average]
  (min, avg, max) = (0.017, 0.030, 0.046), stdev = 0.010
  CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  72.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.400, 15.000), stdev = 0.548
  CI (99.9%): [72.000, 72.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  53.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 10.600, 13.000), stdev = 1.517
  CI (99.9%): [53.000, 53.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 87.50% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 69629.702 ops/ms
# Warmup Iteration   2: 67486.077 ops/ms
# Warmup Iteration   3: 76665.516 ops/ms
Iteration   1: 76648.493 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76448.144 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76689.674 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76664.875 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76710.014 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76632.240 ±(99.9%) 406.456 ops/ms [Average]
  (min, avg, max) = (76448.144, 76632.240, 76710.014), stdev = 105.555
  CI (99.9%): [76225.784, 77038.696] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 88.89% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 69365.659 ops/ms
# Warmup Iteration   2: 67497.001 ops/ms
# Warmup Iteration   3: 76639.892 ops/ms
Iteration   1: 76654.244 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76460.897 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76711.621 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76703.358 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76686.779 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76643.380 ±(99.9%) 401.816 ops/ms [Average]
  (min, avg, max) = (76460.897, 76643.380, 76711.621), stdev = 104.350
  CI (99.9%): [76241.564, 77045.195] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 90.28% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 68622.131 ops/ms
# Warmup Iteration   2: 67409.201 ops/ms
# Warmup Iteration   3: 76655.158 ops/ms
Iteration   1: 76639.670 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76398.731 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76634.563 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76627.594 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76620.052 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76584.122 ±(99.9%) 400.079 ops/ms [Average]
  (min, avg, max) = (76398.731, 76584.122, 76639.670), stdev = 103.899
  CI (99.9%): [76184.043, 76984.201] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 91.67% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9149.836 ops/ms
# Warmup Iteration   2: 8256.962 ops/ms
# Warmup Iteration   3: 9243.013 ops/ms
Iteration   1: 9247.203 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9238.293 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9245.142 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9246.026 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9247.424 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9244.818 ±(99.9%) 14.488 ops/ms [Average]
  (min, avg, max) = (9238.293, 9244.818, 9247.424), stdev = 3.762
  CI (99.9%): [9230.330, 9259.305] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 93.06% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 33427.279 ops/ms
# Warmup Iteration   2: 32927.701 ops/ms
# Warmup Iteration   3: 32568.904 ops/ms
Iteration   1: 32572.556 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32592.204 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32563.145 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32591.339 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32600.141 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  32583.877 ±(99.9%) 59.264 ops/ms [Average]
  (min, avg, max) = (32563.145, 32583.877, 32600.141), stdev = 15.391
  CI (99.9%): [32524.613, 32643.141] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 94.44% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: 33503.235 ops/ms
# Warmup Iteration   2: 32800.925 ops/ms
# Warmup Iteration   3: 32011.611 ops/ms
Iteration   1: 32024.807 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32014.264 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31995.842 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32001.612 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31994.002 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  32006.106 ±(99.9%) 50.513 ops/ms [Average]
  (min, avg, max) = (31994.002, 32006.106, 32024.807), stdev = 13.118
  CI (99.9%): [31955.592, 32056.619] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 95.83% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 9.603 ops/ms
# Warmup Iteration   2: 9.509 ops/ms
# Warmup Iteration   3: 9.574 ops/ms
Iteration   1: 9.568 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.587 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.584 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.587 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.585 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.582 ±(99.9%) 0.030 ops/ms [Average]
  (min, avg, max) = (9.568, 9.582, 9.587), stdev = 0.008
  CI (99.9%): [9.552, 9.612] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.004 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 97.22% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 16.762 ops/ms
# Warmup Iteration   2: 16.800 ops/ms
# Warmup Iteration   3: 16.828 ops/ms
Iteration   1: 16.826 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.833 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.839 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.834 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.829 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.832 ±(99.9%) 0.018 ops/ms [Average]
  (min, avg, max) = (16.826, 16.832, 16.839), stdev = 0.005
  CI (99.9%): [16.814, 16.850] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 98.61% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 18.974 ops/ms
# Warmup Iteration   2: 18.992 ops/ms
# Warmup Iteration   3: 18.974 ops/ms
Iteration   1: 18.975 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.965 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.976 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.983 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.983 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  18.976 ±(99.9%) 0.028 ops/ms [Average]
  (min, avg, max) = (18.965, 18.976, 18.983), stdev = 0.007
  CI (99.9%): [18.948, 19.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# Run complete. Total time: 01:41:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (charsetName)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score      Error   Units
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128             128  thrpt    5   3001.010 ±    2.556  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128            1024  thrpt    5   3113.157 ±    2.753  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128         1048576  thrpt    5   3288.544 ±    1.767  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024             128  thrpt    5    378.278 ±    0.490  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024            1024  thrpt    5    413.088 ±    0.538  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024         1048576  thrpt    5    398.044 ±    0.686  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576             128  thrpt    5      0.368 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576             128  thrpt    5      0.114 ±    0.019    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576            1024  thrpt    5      0.414 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576            1024  thrpt    5      0.106 ±    0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576         1048576  thrpt    5      0.356 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576         1048576  thrpt    5      0.123 ±    0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128             128  thrpt    5   3131.826 ±    7.629  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128            1024  thrpt    5   3244.612 ±    3.909  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128         1048576  thrpt    5   3152.683 ±    5.423  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024             128  thrpt    5    385.264 ±    0.802  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024            1024  thrpt    5    438.067 ±    1.372  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024         1048576  thrpt    5    425.700 ±    0.497  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576             128  thrpt    5      0.377 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576             128  thrpt    5      0.119 ±    0.014    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576            1024  thrpt    5      0.428 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576            1024  thrpt    5      0.103 ±    0.020    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576         1048576  thrpt    5      0.395 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576         1048576  thrpt    5      0.108 ±    0.017    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128             128  thrpt    5   3385.930 ±    3.180  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128            1024  thrpt    5   3388.840 ±    4.342  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128         1048576  thrpt    5   3493.650 ±    3.868  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024             128  thrpt    5    420.077 ±    0.212  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024            1024  thrpt    5    457.673 ±    0.442  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024         1048576  thrpt    5    451.796 ±    0.690  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576             128  thrpt    5      0.426 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576             128  thrpt    5      0.099 ±    0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576            1024  thrpt    5      0.452 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576            1024  thrpt    5      0.093 ±    0.015    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576         1048576  thrpt    5      0.460 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576         1048576  thrpt    5      0.094 ±    0.012    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128             128  thrpt    5   9913.065 ±   12.582  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128            1024  thrpt    5  11305.335 ±   17.777  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128         1048576  thrpt    5  12433.676 ±   20.501  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024             128  thrpt    5    999.247 ±    1.160  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024            1024  thrpt    5   2432.787 ±    7.540  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024         1048576  thrpt    5   2385.206 ±    4.571  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576             128  thrpt    5      0.822 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576             128  thrpt    5      0.053 ±    0.007    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576            1024  thrpt    5      1.473 ±    0.007  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576            1024  thrpt    5      0.030 ±    0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576         1048576  thrpt    5      1.732 ±    0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576         1048576  thrpt    5      0.025 ±    0.013    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128             128  thrpt    5  10908.424 ±   14.325  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128            1024  thrpt    5  14226.633 ±   20.578  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁶               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128         1048576  thrpt    5  14337.227 ±   17.649  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁶               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024             128  thrpt    5   1053.914 ±    2.675  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024            1024  thrpt    5   2689.388 ±    3.846  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024         1048576  thrpt    5   2611.365 ±    1.069  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576             128  thrpt    5      1.020 ±    0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576             128  thrpt    5      0.041 ±    0.007    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576            1024  thrpt    5      1.595 ±    0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576            1024  thrpt    5      0.029 ±    0.016    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576         1048576  thrpt    5      1.732 ±    0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576         1048576  thrpt    5      0.025 ±    0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128             128  thrpt    5   9958.506 ±   15.944  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128            1024  thrpt    5  12076.008 ±   28.790  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128         1048576  thrpt    5  11159.116 ±   22.393  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024             128  thrpt    5   1252.017 ±    1.319  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024            1024  thrpt    5   2419.458 ±   14.216  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024         1048576  thrpt    5   2209.067 ±    4.317  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576             128  thrpt    5      1.203 ±    0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576             128  thrpt    5      0.036 ±    0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576            1024  thrpt    5      2.341 ±    0.033  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576            1024  thrpt    5      0.019 ±    0.008    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576         1048576  thrpt    5      2.356 ±    0.012  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576         1048576  thrpt    5      0.020 ±    0.007    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576         1048576  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readDirectBuffer                                             N/A                 128             128  thrpt    5  26221.528 ±   59.860  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128             128  thrpt    5   6477.435 ±   14.769  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128             128  thrpt    5    272.007 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128             128  thrpt    5   6472.187 ±  171.731  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128             128  thrpt    5    271.786 ±    7.018    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128             128  thrpt    5      0.004 ±    0.007  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128             128  thrpt    5     ≈ 10⁻⁴               B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128             128  thrpt    5    397.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128             128  thrpt    5    218.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128            1024  thrpt    5  25955.274 ± 1510.916  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128            1024  thrpt    5   6411.683 ±  373.459  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128            1024  thrpt    5    272.007 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128            1024  thrpt    5   6406.994 ±  358.137  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128            1024  thrpt    5    271.816 ±    7.490    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128            1024  thrpt    5      0.004 ±    0.008  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128            1024  thrpt    5     ≈ 10⁻⁴               B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128            1024  thrpt    5    393.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128            1024  thrpt    5    215.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128         1048576  thrpt    5  26216.449 ±   85.623  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128         1048576  thrpt    5   6476.187 ±   21.285  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128         1048576  thrpt    5    272.007 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128         1048576  thrpt    5   6472.191 ±  172.161  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128         1048576  thrpt    5    271.838 ±    6.522    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128         1048576  thrpt    5      0.004 ±    0.011  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴               B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128         1048576  thrpt    5    397.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128         1048576  thrpt    5    235.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024             128  thrpt    5   4346.872 ±   68.454  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024             128  thrpt    5   8148.174 ±  128.425  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024             128  thrpt    5   2064.050 ±    0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024             128  thrpt    5   8163.505 ±    0.625  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024             128  thrpt    5   2067.961 ±   32.480    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024             128  thrpt    5      0.005 ±    0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024             128  thrpt    5      0.001 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024             128  thrpt    5    470.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024             128  thrpt    5    291.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024            1024  thrpt    5   5642.089 ±   44.090  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024            1024  thrpt    5  10576.073 ±   82.435  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024            1024  thrpt    5   2064.038 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024            1024  thrpt    5  10601.828 ±  239.239  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024            1024  thrpt    5   2069.078 ±   54.530    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024            1024  thrpt    5      0.005 ±    0.004  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024            1024  thrpt    5      0.001 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024            1024  thrpt    5    467.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024            1024  thrpt    5    306.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024         1048576  thrpt    5   5627.016 ±   63.910  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024         1048576  thrpt    5  10547.823 ±  119.694  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024         1048576  thrpt    5   2064.038 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024         1048576  thrpt    5  10556.413 ±    0.484  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024         1048576  thrpt    5   2065.734 ±   23.472    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024         1048576  thrpt    5      0.005 ±    0.003  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024         1048576  thrpt    5      0.001 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024         1048576  thrpt    5    465.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024         1048576  thrpt    5    300.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576             128  thrpt    5     16.406 ±    0.083  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576             128  thrpt    5    244.366 ±    1.235  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576             128  thrpt    5  16400.753 ±    0.381    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576             128  thrpt    5    248.042 ±  118.906  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576             128  thrpt    5  16647.874 ± 7994.653    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576             128  thrpt    5      0.071 ±    0.592  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576             128  thrpt    5      4.755 ±   39.688    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576             128  thrpt    5     22.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576             128  thrpt    5     18.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576            1024  thrpt    5     44.618 ±    0.116  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576            1024  thrpt    5    664.556 ±    1.727  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576            1024  thrpt    5  16400.688 ±    0.100    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576            1024  thrpt    5    665.204 ±   97.068  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576            1024  thrpt    5  16416.466 ± 2370.355    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576            1024  thrpt    5      0.002 ±    0.001  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576            1024  thrpt    5      0.047 ±    0.024    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576            1024  thrpt    5     59.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576            1024  thrpt    5     48.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576         1048576  thrpt    5     53.790 ±    0.157  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576         1048576  thrpt    5    801.153 ±    2.394  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576         1048576  thrpt    5  16400.688 ±    0.122    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576         1048576  thrpt    5    811.754 ±  118.812  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576         1048576  thrpt    5  16617.458 ± 2399.650    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576         1048576  thrpt    5      0.001 ±    0.002  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576         1048576  thrpt    5      0.030 ±    0.040    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576         1048576  thrpt    5     72.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576         1048576  thrpt    5     53.000                 ms
ReaderBenchmarks.readHeapBuffer                                               N/A                 128             128  thrpt    5  76632.240 ±  406.456  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128             128  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128             128  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128            1024  thrpt    5  76643.380 ±  401.816  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128            1024  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128            1024  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128         1048576  thrpt    5  76584.122 ±  400.079  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128         1048576  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024             128  thrpt    5   9244.818 ±   14.488  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024             128  thrpt    5     ≈ 10⁻⁵               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024             128  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024            1024  thrpt    5  32583.877 ±   59.264  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024            1024  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024            1024  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024         1048576  thrpt    5  32006.106 ±   50.513  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024         1048576  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576             128  thrpt    5      9.582 ±    0.030  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576             128  thrpt    5      0.004 ±    0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576             128  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576            1024  thrpt    5     16.832 ±    0.018  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576            1024  thrpt    5      0.003 ±    0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576            1024  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576         1048576  thrpt    5     18.976 ±    0.028  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576         1048576  thrpt    5      0.002 ±    0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576         1048576  thrpt    5        ≈ 0             counts

Benchmark result is saved to jmh-result.text
