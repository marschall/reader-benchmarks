# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 5791.753 ops/ms
# Warmup Iteration   2: 5663.606 ops/ms
# Warmup Iteration   3: 5615.757 ops/ms
Iteration   1: 5617.407 ops/ms
                 ·gc.alloc.rate:                   1673.370 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1634.834 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     320.459 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        29.000 counts
                 ·gc.time:                         16.000 ms

Iteration   2: 5626.776 ops/ms
                 ·gc.alloc.rate:                   1676.196 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1691.261 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.961 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         19.000 ms

Iteration   3: 5625.075 ops/ms
                 ·gc.alloc.rate:                   1675.646 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1691.204 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     331.059 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         16.000 ms

Iteration   4: 5620.772 ops/ms
                 ·gc.alloc.rate:                   1674.371 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1691.219 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     331.313 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         18.000 ms

Iteration   5: 5623.589 ops/ms
                 ·gc.alloc.rate:                   1675.208 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1634.850 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     320.110 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        29.000 counts
                 ·gc.time:                         16.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  5622.724 ±(99.9%) 14.249 ops/ms [Average]
  (min, avg, max) = (5617.407, 5622.724, 5626.776), stdev = 3.700
  CI (99.9%): [5608.475, 5636.973] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1674.958 ±(99.9%) 4.276 MB/sec [Average]
  (min, avg, max) = (1673.370, 1674.958, 1676.196), stdev = 1.111
  CI (99.9%): [1670.682, 1679.234] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1668.674 ±(99.9%) 118.923 MB/sec [Average]
  (min, avg, max) = (1634.834, 1668.674, 1691.261), stdev = 30.884
  CI (99.9%): [1549.751, 1787.596] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  326.780 ±(99.9%) 22.844 B/op [Average]
  (min, avg, max) = (320.110, 326.780, 331.313), stdev = 5.933
  CI (99.9%): [303.936, 349.625] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  148.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (29.000, 29.600, 30.000), stdev = 0.548
  CI (99.9%): [148.000, 148.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  85.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 17.000, 19.000), stdev = 1.414
  CI (99.9%): [85.000, 85.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 1.33% complete, ETA 01:43:55
# Fork: 1 of 1
# Warmup Iteration   1: 6656.581 ops/ms
# Warmup Iteration   2: 6702.693 ops/ms
# Warmup Iteration   3: 6860.566 ops/ms
Iteration   1: 6858.847 ops/ms
                 ·gc.alloc.rate:                   2043.195 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          2085.835 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     334.859 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         21.000 ms

Iteration   2: 6860.739 ops/ms
                 ·gc.alloc.rate:                   2043.789 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          2029.520 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.723 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         20.000 ms

Iteration   3: 6861.969 ops/ms
                 ·gc.alloc.rate:                   2044.103 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          2029.457 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.662 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         23.000 ms

Iteration   4: 6862.418 ops/ms
                 ·gc.alloc.rate:                   2044.215 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          2029.434 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.641 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         21.000 ms

Iteration   5: 6852.366 ops/ms
                 ·gc.alloc.rate:                   2041.253 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          2085.832 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     335.176 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         26.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6859.268 ±(99.9%) 15.783 ops/ms [Average]
  (min, avg, max) = (6852.366, 6859.268, 6862.418), stdev = 4.099
  CI (99.9%): [6843.485, 6875.051] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2043.311 ±(99.9%) 4.686 MB/sec [Average]
  (min, avg, max) = (2041.253, 2043.311, 2044.215), stdev = 1.217
  CI (99.9%): [2038.625, 2047.997] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2052.016 ±(99.9%) 118.875 MB/sec [Average]
  (min, avg, max) = (2029.434, 2052.016, 2085.835), stdev = 30.871
  CI (99.9%): [1933.141, 2170.890] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  329.412 ±(99.9%) 19.709 B/op [Average]
  (min, avg, max) = (325.641, 329.412, 335.176), stdev = 5.118
  CI (99.9%): [309.703, 349.121] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  182.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (36.000, 36.400, 37.000), stdev = 0.548
  CI (99.9%): [182.000, 182.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  111.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 22.200, 26.000), stdev = 2.387
  CI (99.9%): [111.000, 111.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 2.67% complete, ETA 01:42:31
# Fork: 1 of 1
# Warmup Iteration   1: 6080.486 ops/ms
# Warmup Iteration   2: 6198.145 ops/ms
# Warmup Iteration   3: 6234.300 ops/ms
Iteration   1: 6239.044 ops/ms
                 ·gc.alloc.rate:                   1858.560 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1860.337 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.327 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         21.000 ms

Iteration   2: 6231.520 ops/ms
                 ·gc.alloc.rate:                   1856.308 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1860.350 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.727 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         19.000 ms

Iteration   3: 6234.249 ops/ms
                 ·gc.alloc.rate:                   1857.103 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1860.318 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.581 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         24.000 ms

Iteration   4: 6238.377 ops/ms
                 ·gc.alloc.rate:                   1858.301 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1860.295 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.364 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms

Iteration   5: 6228.503 ops/ms
                 ·gc.alloc.rate:                   1855.391 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1860.320 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.884 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6234.339 ±(99.9%) 17.270 ops/ms [Average]
  (min, avg, max) = (6228.503, 6234.339, 6239.044), stdev = 4.485
  CI (99.9%): [6217.068, 6251.609] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1857.133 ±(99.9%) 5.136 MB/sec [Average]
  (min, avg, max) = (1855.391, 1857.133, 1858.560), stdev = 1.334
  CI (99.9%): [1851.996, 1862.269] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1860.324 ±(99.9%) 0.080 MB/sec [Average]
  (min, avg, max) = (1860.295, 1860.324, 1860.350), stdev = 0.021
  CI (99.9%): [1860.244, 1860.404] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  328.576 ±(99.9%) 0.912 B/op [Average]
  (min, avg, max) = (328.327, 328.576, 328.884), stdev = 0.237
  CI (99.9%): [327.664, 329.489] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  165.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (33.000, 33.000, 33.000), stdev = 0.001
  CI (99.9%): [165.000, 165.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  100.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 20.000, 24.000), stdev = 2.550
  CI (99.9%): [100.000, 100.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 4.00% complete, ETA 01:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 904.703 ops/ms
# Warmup Iteration   2: 924.458 ops/ms
# Warmup Iteration   3: 930.463 ops/ms
Iteration   1: 929.289 ops/ms
                 ·gc.alloc.rate:                   1789.248 MB/sec
                 ·gc.alloc.rate.norm:              2120.083 B/op
                 ·gc.churn.G1_Eden_Space:          1747.589 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2070.721 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         22.000 ms

Iteration   2: 927.707 ops/ms
                 ·gc.alloc.rate:                   1786.221 MB/sec
                 ·gc.alloc.rate.norm:              2120.084 B/op
                 ·gc.churn.G1_Eden_Space:          1804.007 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2141.195 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         23.000 ms

Iteration   3: 928.173 ops/ms
                 ·gc.alloc.rate:                   1787.096 MB/sec
                 ·gc.alloc.rate.norm:              2120.083 B/op
                 ·gc.churn.G1_Eden_Space:          1803.974 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2140.105 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         24.000 ms

Iteration   4: 929.528 ops/ms
                 ·gc.alloc.rate:                   1789.708 MB/sec
                 ·gc.alloc.rate.norm:              2120.081 B/op
                 ·gc.churn.G1_Eden_Space:          1803.980 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2136.986 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   5: 930.926 ops/ms
                 ·gc.alloc.rate:                   1792.352 MB/sec
                 ·gc.alloc.rate.norm:              2120.078 B/op
                 ·gc.churn.G1_Eden_Space:          1747.550 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2067.085 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         19.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  929.125 ±(99.9%) 4.851 ops/ms [Average]
  (min, avg, max) = (927.707, 929.125, 930.926), stdev = 1.260
  CI (99.9%): [924.273, 933.976] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1788.925 ±(99.9%) 9.257 MB/sec [Average]
  (min, avg, max) = (1786.221, 1788.925, 1792.352), stdev = 2.404
  CI (99.9%): [1779.668, 1798.182] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.082 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (2120.078, 2120.082, 2120.084), stdev = 0.002
  CI (99.9%): [2120.073, 2120.091] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1781.420 ±(99.9%) 118.989 MB/sec [Average]
  (min, avg, max) = (1747.550, 1781.420, 1804.007), stdev = 30.901
  CI (99.9%): [1662.431, 1900.409] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2111.218 ±(99.9%) 148.946 B/op [Average]
  (min, avg, max) = (2067.085, 2111.218, 2141.195), stdev = 38.681
  CI (99.9%): [1962.272, 2260.165] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  158.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.600, 32.000), stdev = 0.548
  CI (99.9%): [158.000, 158.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  108.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 21.600, 24.000), stdev = 2.074
  CI (99.9%): [108.000, 108.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 5.33% complete, ETA 01:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 1469.765 ops/ms
# Warmup Iteration   2: 1502.929 ops/ms
# Warmup Iteration   3: 1504.116 ops/ms
Iteration   1: 1506.033 ops/ms
                 ·gc.alloc.rate:                   2899.711 MB/sec
                 ·gc.alloc.rate.norm:              2120.082 B/op
                 ·gc.churn.G1_Eden_Space:          2931.444 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2143.283 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        52.000 counts
                 ·gc.time:                         27.000 ms

Iteration   2: 1505.089 ops/ms
                 ·gc.alloc.rate:                   2897.915 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          2875.120 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2103.403 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         32.000 ms

Iteration   3: 1506.096 ops/ms
                 ·gc.alloc.rate:                   2899.821 MB/sec
                 ·gc.alloc.rate.norm:              2120.081 B/op
                 ·gc.churn.G1_Eden_Space:          2931.442 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2143.199 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        52.000 counts
                 ·gc.time:                         31.000 ms

Iteration   4: 1506.246 ops/ms
                 ·gc.alloc.rate:                   2900.103 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          2875.066 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2101.776 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 1496.826 ops/ms
                 ·gc.alloc.rate:                   2881.962 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          2875.061 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2115.002 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         33.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1504.058 ±(99.9%) 15.665 ops/ms [Average]
  (min, avg, max) = (1496.826, 1504.058, 1506.246), stdev = 4.068
  CI (99.9%): [1488.393, 1519.723] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2895.903 ±(99.9%) 30.191 MB/sec [Average]
  (min, avg, max) = (2881.962, 2895.903, 2900.103), stdev = 7.841
  CI (99.9%): [2865.712, 2926.094] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.080 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (2120.079, 2120.080, 2120.082), stdev = 0.002
  CI (99.9%): [2120.074, 2120.086] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2897.627 ±(99.9%) 118.869 MB/sec [Average]
  (min, avg, max) = (2875.061, 2897.627, 2931.444), stdev = 30.870
  CI (99.9%): [2778.758, 3016.496] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2121.333 ±(99.9%) 79.476 B/op [Average]
  (min, avg, max) = (2101.776, 2121.333, 2143.283), stdev = 20.640
  CI (99.9%): [2041.857, 2200.809] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  257.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (51.000, 51.400, 52.000), stdev = 0.548
  CI (99.9%): [257.000, 257.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  151.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (27.000, 30.200, 33.000), stdev = 2.588
  CI (99.9%): [151.000, 151.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 6.67% complete, ETA 01:38:17
# Fork: 1 of 1
# Warmup Iteration   1: 1431.389 ops/ms
# Warmup Iteration   2: 1455.593 ops/ms
# Warmup Iteration   3: 1459.756 ops/ms
Iteration   1: 1459.729 ops/ms
                 ·gc.alloc.rate:                   2810.553 MB/sec
                 ·gc.alloc.rate.norm:              2120.082 B/op
                 ·gc.churn.G1_Eden_Space:          2818.687 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2126.218 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        50.000 counts
                 ·gc.time:                         27.000 ms

Iteration   2: 1459.668 ops/ms
                 ·gc.alloc.rate:                   2810.470 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          2818.756 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2126.330 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        50.000 counts
                 ·gc.time:                         27.000 ms

Iteration   3: 1458.074 ops/ms
                 ·gc.alloc.rate:                   2807.367 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          2762.331 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2086.068 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        49.000 counts
                 ·gc.time:                         35.000 ms

Iteration   4: 1458.945 ops/ms
                 ·gc.alloc.rate:                   2809.038 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          2818.699 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2127.372 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        50.000 counts
                 ·gc.time:                         31.000 ms

Iteration   5: 1462.167 ops/ms
                 ·gc.alloc.rate:                   2815.239 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          2818.697 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2122.683 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        50.000 counts
                 ·gc.time:                         27.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1459.716 ±(99.9%) 5.872 ops/ms [Average]
  (min, avg, max) = (1458.074, 1459.716, 1462.167), stdev = 1.525
  CI (99.9%): [1453.844, 1465.588] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2810.534 ±(99.9%) 11.294 MB/sec [Average]
  (min, avg, max) = (2807.367, 2810.534, 2815.239), stdev = 2.933
  CI (99.9%): [2799.239, 2821.828] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.080 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (2120.079, 2120.080, 2120.082), stdev = 0.001
  CI (99.9%): [2120.075, 2120.085] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2807.434 ±(99.9%) 97.088 MB/sec [Average]
  (min, avg, max) = (2762.331, 2807.434, 2818.756), stdev = 25.214
  CI (99.9%): [2710.346, 2904.522] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2117.734 ±(99.9%) 68.505 B/op [Average]
  (min, avg, max) = (2086.068, 2117.734, 2127.372), stdev = 17.790
  CI (99.9%): [2049.230, 2186.239] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.003, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  249.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (49.000, 49.800, 50.000), stdev = 0.447
  CI (99.9%): [249.000, 249.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  147.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (27.000, 29.400, 35.000), stdev = 3.578
  CI (99.9%): [147.000, 147.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 8.00% complete, ETA 01:36:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.013 ops/ms
# Warmup Iteration   2: 1.016 ops/ms
# Warmup Iteration   3: 1.014 ops/ms
Iteration   1: 1.013 ops/ms
                 ·gc.alloc.rate:      15.135 MB/sec
                 ·gc.alloc.rate.norm: 16456.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.014 ops/ms
                 ·gc.alloc.rate:               15.152 MB/sec
                 ·gc.alloc.rate.norm:          16458.664 B/op
                 ·gc.churn.G1_Eden_Space:      56.370 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 61230.715 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   3: 1.016 ops/ms
                 ·gc.alloc.rate:      15.189 MB/sec
                 ·gc.alloc.rate.norm: 16456.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.017 ops/ms
                 ·gc.alloc.rate:      15.199 MB/sec
                 ·gc.alloc.rate.norm: 16456.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.017 ops/ms
                 ·gc.alloc.rate:      15.199 MB/sec
                 ·gc.alloc.rate.norm: 16456.043 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.015 ±(99.9%) 0.008 ops/ms [Average]
  (min, avg, max) = (1.013, 1.015, 1.017), stdev = 0.002
  CI (99.9%): [1.008, 1.023] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  15.175 ±(99.9%) 0.113 MB/sec [Average]
  (min, avg, max) = (15.135, 15.175, 15.199), stdev = 0.029
  CI (99.9%): [15.062, 15.288] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.567 ±(99.9%) 4.514 B/op [Average]
  (min, avg, max) = (16456.040, 16456.567, 16458.664), stdev = 1.172
  CI (99.9%): [16452.052, 16461.081] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  11.274 ±(99.9%) 97.073 MB/sec [Average]
  (min, avg, max) = (≈ 0, 11.274, 56.370), stdev = 25.210
  CI (99.9%): [≈ 0, 108.347] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  12246.143 ±(99.9%) 105442.985 B/op [Average]
  (min, avg, max) = (≈ 0, 12246.143, 61230.715), stdev = 27383.208
  CI (99.9%): [≈ 0, 117689.128] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  2.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 9.33% complete, ETA 01:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 1.093 ops/ms
# Warmup Iteration   2: 1.094 ops/ms
# Warmup Iteration   3: 1.094 ops/ms
Iteration   1: 1.093 ops/ms
                 ·gc.alloc.rate:      16.338 MB/sec
                 ·gc.alloc.rate.norm: 16456.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.094 ops/ms
                 ·gc.alloc.rate:               16.350 MB/sec
                 ·gc.alloc.rate.norm:          16458.466 B/op
                 ·gc.churn.G1_Eden_Space:      56.369 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 56741.955 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   3: 1.095 ops/ms
                 ·gc.alloc.rate:      16.371 MB/sec
                 ·gc.alloc.rate.norm: 16456.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.095 ops/ms
                 ·gc.alloc.rate:      16.364 MB/sec
                 ·gc.alloc.rate.norm: 16456.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.094 ops/ms
                 ·gc.alloc.rate:               16.349 MB/sec
                 ·gc.alloc.rate.norm:          16458.469 B/op
                 ·gc.churn.G1_Eden_Space:      56.370 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 56747.143 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.094 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.093, 1.094, 1.095), stdev = 0.001
  CI (99.9%): [1.091, 1.098] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  16.354 ±(99.9%) 0.049 MB/sec [Average]
  (min, avg, max) = (16.338, 16.354, 16.371), stdev = 0.013
  CI (99.9%): [16.305, 16.404] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16457.011 ±(99.9%) 5.119 B/op [Average]
  (min, avg, max) = (16456.037, 16457.011, 16458.469), stdev = 1.329
  CI (99.9%): [16451.892, 16462.130] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  22.548 ±(99.9%) 118.889 MB/sec [Average]
  (min, avg, max) = (≈ 0, 22.548, 56.370), stdev = 30.875
  CI (99.9%): [≈ 0, 141.437] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  22697.820 ±(99.9%) 119679.051 B/op [Average]
  (min, avg, max) = (≈ 0, 22697.820, 56747.143), stdev = 31080.270
  CI (99.9%): [≈ 0, 142376.871] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  2.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 10.67% complete, ETA 01:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.852 ops/ms
# Warmup Iteration   2: 1.855 ops/ms
# Warmup Iteration   3: 1.854 ops/ms
Iteration   1: 1.859 ops/ms
                 ·gc.alloc.rate:      27.784 MB/sec
                 ·gc.alloc.rate.norm: 16456.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.860 ops/ms
                 ·gc.alloc.rate:               27.804 MB/sec
                 ·gc.alloc.rate.norm:          16457.452 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 33366.856 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   3: 1.864 ops/ms
                 ·gc.alloc.rate:      27.857 MB/sec
                 ·gc.alloc.rate.norm: 16456.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.866 ops/ms
                 ·gc.alloc.rate:               27.893 MB/sec
                 ·gc.alloc.rate.norm:          16457.447 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 33259.590 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   5: 1.869 ops/ms
                 ·gc.alloc.rate:      27.939 MB/sec
                 ·gc.alloc.rate.norm: 16456.024 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.864 ±(99.9%) 0.016 ops/ms [Average]
  (min, avg, max) = (1.859, 1.864, 1.869), stdev = 0.004
  CI (99.9%): [1.847, 1.880] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  27.855 ±(99.9%) 0.244 MB/sec [Average]
  (min, avg, max) = (27.784, 27.855, 27.939), stdev = 0.063
  CI (99.9%): [27.611, 28.099] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.594 ±(99.9%) 3.006 B/op [Average]
  (min, avg, max) = (16456.022, 16456.594, 16457.452), stdev = 0.781
  CI (99.9%): [16453.589, 16459.600] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  22.549 ±(99.9%) 118.892 MB/sec [Average]
  (min, avg, max) = (≈ 0, 22.549, 56.372), stdev = 30.876
  CI (99.9%): [≈ 0, 141.441] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  13325.289 ±(99.9%) 70260.556 B/op [Average]
  (min, avg, max) = (≈ 0, 13325.289, 33366.856), stdev = 18246.443
  CI (99.9%): [≈ 0, 83585.845] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  2.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 12.00% complete, ETA 01:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 6049.983 ops/ms
# Warmup Iteration   2: 5875.482 ops/ms
# Warmup Iteration   3: 5840.106 ops/ms
Iteration   1: 5847.251 ops/ms
                 ·gc.alloc.rate:                   1741.847 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1747.588 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     329.094 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   2: 5851.904 ops/ms
                 ·gc.alloc.rate:                   1743.228 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1747.608 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.837 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         22.000 ms

Iteration   3: 5851.557 ops/ms
                 ·gc.alloc.rate:                   1743.109 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1747.581 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.854 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         19.000 ms

Iteration   4: 5851.830 ops/ms
                 ·gc.alloc.rate:                   1743.195 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1747.588 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.839 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   5: 5850.676 ops/ms
                 ·gc.alloc.rate:                   1742.827 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1747.559 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     328.903 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         19.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  5850.643 ±(99.9%) 7.541 ops/ms [Average]
  (min, avg, max) = (5847.251, 5850.643, 5851.904), stdev = 1.958
  CI (99.9%): [5843.102, 5858.184] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1742.841 ±(99.9%) 2.224 MB/sec [Average]
  (min, avg, max) = (1741.847, 1742.841, 1743.228), stdev = 0.578
  CI (99.9%): [1740.617, 1745.066] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1747.585 ±(99.9%) 0.067 MB/sec [Average]
  (min, avg, max) = (1747.559, 1747.585, 1747.608), stdev = 0.017
  CI (99.9%): [1747.518, 1747.652] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  328.906 ±(99.9%) 0.419 B/op [Average]
  (min, avg, max) = (328.837, 328.906, 329.094), stdev = 0.109
  CI (99.9%): [328.487, 329.325] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  155.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.000, 31.000), stdev = 0.001
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  94.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 18.800, 22.000), stdev = 2.049
  CI (99.9%): [94.000, 94.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 13.33% complete, ETA 01:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 6734.308 ops/ms
# Warmup Iteration   2: 6820.123 ops/ms
# Warmup Iteration   3: 6952.995 ops/ms
Iteration   1: 6955.183 ops/ms
                 ·gc.alloc.rate:                   2071.906 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          2085.873 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.224 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         24.000 ms

Iteration   2: 6954.303 ops/ms
                 ·gc.alloc.rate:                   2071.596 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          2029.456 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     321.340 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         27.000 ms

Iteration   3: 6951.594 ops/ms
                 ·gc.alloc.rate:                   2070.796 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          2085.818 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.392 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         24.000 ms

Iteration   4: 6953.846 ops/ms
                 ·gc.alloc.rate:                   2071.482 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          2085.842 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.286 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 6951.081 ops/ms
                 ·gc.alloc.rate:                   2070.669 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          2085.850 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.417 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         27.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6953.201 ±(99.9%) 6.844 ops/ms [Average]
  (min, avg, max) = (6951.081, 6953.201, 6955.183), stdev = 1.777
  CI (99.9%): [6946.358, 6960.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2071.290 ±(99.9%) 2.054 MB/sec [Average]
  (min, avg, max) = (2070.669, 2071.290, 2071.906), stdev = 0.534
  CI (99.9%): [2069.235, 2073.344] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.012, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2074.568 ±(99.9%) 97.107 MB/sec [Average]
  (min, avg, max) = (2029.456, 2074.568, 2085.873), stdev = 25.218
  CI (99.9%): [1977.461, 2171.674] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  328.532 ±(99.9%) 15.484 B/op [Average]
  (min, avg, max) = (321.340, 328.532, 330.417), stdev = 4.021
  CI (99.9%): [313.048, 344.016] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  184.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (36.000, 36.800, 37.000), stdev = 0.447
  CI (99.9%): [184.000, 184.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  130.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (24.000, 26.000, 28.000), stdev = 1.871
  CI (99.9%): [130.000, 130.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 14.67% complete, ETA 01:29:51
# Fork: 1 of 1
# Warmup Iteration   1: 6188.785 ops/ms
# Warmup Iteration   2: 6185.768 ops/ms
# Warmup Iteration   3: 6302.956 ops/ms
Iteration   1: 6292.907 ops/ms
                 ·gc.alloc.rate:                   1874.593 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1860.326 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.517 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         17.000 ms

Iteration   2: 6302.077 ops/ms
                 ·gc.alloc.rate:                   1877.305 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1916.704 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     334.897 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        34.000 counts
                 ·gc.time:                         20.000 ms

Iteration   3: 6305.518 ops/ms
                 ·gc.alloc.rate:                   1878.343 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1860.334 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     324.868 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         17.000 ms

Iteration   4: 6300.190 ops/ms
                 ·gc.alloc.rate:                   1876.721 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1860.296 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.141 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms

Iteration   5: 6302.490 ops/ms
                 ·gc.alloc.rate:                   1877.408 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1916.668 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     334.872 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        34.000 counts
                 ·gc.time:                         21.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6300.637 ±(99.9%) 18.193 ops/ms [Average]
  (min, avg, max) = (6292.907, 6300.637, 6305.518), stdev = 4.725
  CI (99.9%): [6282.444, 6318.829] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1876.874 ±(99.9%) 5.396 MB/sec [Average]
  (min, avg, max) = (1874.593, 1876.874, 1878.343), stdev = 1.401
  CI (99.9%): [1871.479, 1882.270] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1882.866 ±(99.9%) 118.884 MB/sec [Average]
  (min, avg, max) = (1860.296, 1882.866, 1916.704), stdev = 30.874
  CI (99.9%): [1763.982, 2001.749] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  329.059 ±(99.9%) 20.497 B/op [Average]
  (min, avg, max) = (324.868, 329.059, 334.897), stdev = 5.323
  CI (99.9%): [308.562, 349.556] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  167.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (33.000, 33.400, 34.000), stdev = 0.548
  CI (99.9%): [167.000, 167.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  93.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 18.600, 21.000), stdev = 1.817
  CI (99.9%): [93.000, 93.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 16.00% complete, ETA 01:28:27
# Fork: 1 of 1
# Warmup Iteration   1: 753.528 ops/ms
# Warmup Iteration   2: 752.024 ops/ms
# Warmup Iteration   3: 753.787 ops/ms
Iteration   1: 753.775 ops/ms
                 ·gc.alloc.rate:                   1451.313 MB/sec
                 ·gc.alloc.rate.norm:              2120.083 B/op
                 ·gc.churn.G1_Eden_Space:          1409.366 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2058.806 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        25.000 counts
                 ·gc.time:                         15.000 ms

Iteration   2: 754.372 ops/ms
                 ·gc.alloc.rate:                   1452.468 MB/sec
                 ·gc.alloc.rate.norm:              2120.086 B/op
                 ·gc.churn.G1_Eden_Space:          1465.735 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2139.450 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        26.000 counts
                 ·gc.time:                         20.000 ms

Iteration   3: 754.007 ops/ms
                 ·gc.alloc.rate:                   1451.742 MB/sec
                 ·gc.alloc.rate.norm:              2120.083 B/op
                 ·gc.churn.G1_Eden_Space:          1465.710 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2140.482 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        26.000 counts
                 ·gc.time:                         14.000 ms

Iteration   4: 753.463 ops/ms
                 ·gc.alloc.rate:                   1450.698 MB/sec
                 ·gc.alloc.rate.norm:              2120.083 B/op
                 ·gc.churn.G1_Eden_Space:          1465.713 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2142.027 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        26.000 counts
                 ·gc.time:                         15.000 ms

Iteration   5: 753.957 ops/ms
                 ·gc.alloc.rate:                   1451.627 MB/sec
                 ·gc.alloc.rate.norm:              2120.078 B/op
                 ·gc.churn.G1_Eden_Space:          1409.316 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2058.284 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        25.000 counts
                 ·gc.time:                         21.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  753.915 ±(99.9%) 1.281 ops/ms [Average]
  (min, avg, max) = (753.463, 753.915, 754.372), stdev = 0.333
  CI (99.9%): [752.634, 755.196] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1451.570 ±(99.9%) 2.485 MB/sec [Average]
  (min, avg, max) = (1450.698, 1451.570, 1452.468), stdev = 0.645
  CI (99.9%): [1449.084, 1454.055] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.083 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (2120.078, 2120.083, 2120.086), stdev = 0.003
  CI (99.9%): [2120.071, 2120.094] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1443.168 ±(99.9%) 118.906 MB/sec [Average]
  (min, avg, max) = (1409.316, 1443.168, 1465.735), stdev = 30.880
  CI (99.9%): [1324.261, 1562.074] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2107.810 ±(99.9%) 173.211 B/op [Average]
  (min, avg, max) = (2058.284, 2107.810, 2142.027), stdev = 44.982
  CI (99.9%): [1934.599, 2281.020] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.004 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  128.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (25.000, 25.600, 26.000), stdev = 0.548
  CI (99.9%): [128.000, 128.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  85.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (14.000, 17.000, 21.000), stdev = 3.240
  CI (99.9%): [85.000, 85.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 17.33% complete, ETA 01:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 1566.308 ops/ms
# Warmup Iteration   2: 1597.573 ops/ms
# Warmup Iteration   3: 1608.071 ops/ms
Iteration   1: 1607.803 ops/ms
                 ·gc.alloc.rate:                   3095.647 MB/sec
                 ·gc.alloc.rate.norm:              2120.081 B/op
                 ·gc.churn.G1_Eden_Space:          3100.551 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2123.439 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         31.000 ms

Iteration   2: 1609.362 ops/ms
                 ·gc.alloc.rate:                   3098.652 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          3100.598 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2121.412 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 1609.938 ops/ms
                 ·gc.alloc.rate:                   3099.753 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          3100.591 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2120.653 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         39.000 ms

Iteration   4: 1609.847 ops/ms
                 ·gc.alloc.rate:                   3099.521 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          3100.535 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2120.773 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 1610.434 ops/ms
                 ·gc.alloc.rate:                   3100.716 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          3100.601 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2120.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         29.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1609.477 ±(99.9%) 3.890 ops/ms [Average]
  (min, avg, max) = (1607.803, 1609.477, 1610.434), stdev = 1.010
  CI (99.9%): [1605.587, 1613.367] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3098.858 ±(99.9%) 7.468 MB/sec [Average]
  (min, avg, max) = (3095.647, 3098.858, 3100.716), stdev = 1.939
  CI (99.9%): [3091.390, 3106.326] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.080 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (2120.079, 2120.080, 2120.081), stdev = 0.001
  CI (99.9%): [2120.076, 2120.083] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3100.575 ±(99.9%) 0.116 MB/sec [Average]
  (min, avg, max) = (3100.535, 3100.575, 3100.601), stdev = 0.030
  CI (99.9%): [3100.459, 3100.691] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2121.255 ±(99.9%) 5.082 B/op [Average]
  (min, avg, max) = (2120.000, 2121.255, 2123.439), stdev = 1.320
  CI (99.9%): [2116.174, 2126.337] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.002 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  275.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (55.000, 55.000, 55.000), stdev = 0.001
  CI (99.9%): [275.000, 275.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  157.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 31.400, 39.000), stdev = 4.393
  CI (99.9%): [157.000, 157.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 18.67% complete, ETA 01:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 1612.217 ops/ms
# Warmup Iteration   2: 1635.456 ops/ms
# Warmup Iteration   3: 1636.733 ops/ms
Iteration   1: 1637.174 ops/ms
                 ·gc.alloc.rate:                   3152.151 MB/sec
                 ·gc.alloc.rate.norm:              2120.081 B/op
                 ·gc.churn.G1_Eden_Space:          3156.884 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2123.264 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         33.000 ms

Iteration   2: 1638.216 ops/ms
                 ·gc.alloc.rate:                   3154.240 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          3157.004 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2121.938 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         33.000 ms

Iteration   3: 1639.592 ops/ms
                 ·gc.alloc.rate:                   3156.825 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          3156.912 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2120.138 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         37.000 ms

Iteration   4: 1641.645 ops/ms
                 ·gc.alloc.rate:                   3160.804 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          3156.937 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2117.485 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 1641.311 ops/ms
                 ·gc.alloc.rate:                   3160.085 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          3156.873 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2117.924 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         29.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1639.588 ±(99.9%) 7.435 ops/ms [Average]
  (min, avg, max) = (1637.174, 1639.588, 1641.645), stdev = 1.931
  CI (99.9%): [1632.152, 1647.023] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3156.821 ±(99.9%) 14.277 MB/sec [Average]
  (min, avg, max) = (3152.151, 3156.821, 3160.804), stdev = 3.708
  CI (99.9%): [3142.544, 3171.098] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.080 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (2120.079, 2120.080, 2120.081), stdev = 0.001
  CI (99.9%): [2120.076, 2120.083] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3156.922 ±(99.9%) 0.201 MB/sec [Average]
  (min, avg, max) = (3156.873, 3156.922, 3157.004), stdev = 0.052
  CI (99.9%): [3156.721, 3157.123] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2120.150 ±(99.9%) 9.617 B/op [Average]
  (min, avg, max) = (2117.485, 2120.150, 2123.264), stdev = 2.498
  CI (99.9%): [2110.533, 2129.767] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.001, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  280.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
  CI (99.9%): [280.000, 280.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  161.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 32.200, 37.000), stdev = 3.347
  CI (99.9%): [161.000, 161.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 20.00% complete, ETA 01:24:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.992 ops/ms
# Warmup Iteration   2: 1.003 ops/ms
# Warmup Iteration   3: 1.006 ops/ms
Iteration   1: 1.006 ops/ms
                 ·gc.alloc.rate:      15.032 MB/sec
                 ·gc.alloc.rate.norm: 16456.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.006 ops/ms
                 ·gc.alloc.rate:                   15.039 MB/sec
                 ·gc.alloc.rate.norm:              16458.690 B/op
                 ·gc.churn.G1_Eden_Space:          56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     61693.201 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.432 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   3: 0.994 ops/ms
                 ·gc.alloc.rate:      14.849 MB/sec
                 ·gc.alloc.rate.norm: 16456.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.995 ops/ms
                 ·gc.alloc.rate:      14.876 MB/sec
                 ·gc.alloc.rate.norm: 16456.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.995 ops/ms
                 ·gc.alloc.rate:      14.869 MB/sec
                 ·gc.alloc.rate.norm: 16456.044 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.999 ±(99.9%) 0.024 ops/ms [Average]
  (min, avg, max) = (0.994, 0.999, 1.006), stdev = 0.006
  CI (99.9%): [0.975, 1.023] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  14.933 ±(99.9%) 0.363 MB/sec [Average]
  (min, avg, max) = (14.849, 14.933, 15.039), stdev = 0.094
  CI (99.9%): [14.570, 15.296] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.573 ±(99.9%) 4.557 B/op [Average]
  (min, avg, max) = (16456.041, 16456.573, 16458.690), stdev = 1.184
  CI (99.9%): [16452.015, 16461.130] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  11.274 ±(99.9%) 97.077 MB/sec [Average]
  (min, avg, max) = (≈ 0, 11.274, 56.372), stdev = 25.211
  CI (99.9%): [≈ 0, 108.351] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  12338.640 ±(99.9%) 106239.414 B/op [Average]
  (min, avg, max) = (≈ 0, 12338.640, 61693.201), stdev = 27590.038
  CI (99.9%): [≈ 0, 118578.054] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.086 ±(99.9%) 0.743 B/op [Average]
  (min, avg, max) = (≈ 0, 0.086, 0.432), stdev = 0.193
  CI (99.9%): [≈ 0, 0.830] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  1.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 21.33% complete, ETA 01:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.357 ops/ms
# Warmup Iteration   2: 1.373 ops/ms
# Warmup Iteration   3: 1.371 ops/ms
Iteration   1: 1.371 ops/ms
                 ·gc.alloc.rate:               20.494 MB/sec
                 ·gc.alloc.rate.norm:          16457.970 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 45271.076 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   2: 1.378 ops/ms
                 ·gc.alloc.rate:      20.588 MB/sec
                 ·gc.alloc.rate.norm: 16456.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.377 ops/ms
                 ·gc.alloc.rate:      20.582 MB/sec
                 ·gc.alloc.rate.norm: 16456.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.380 ops/ms
                 ·gc.alloc.rate:               20.626 MB/sec
                 ·gc.alloc.rate.norm:          16457.957 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 44979.131 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   5: 1.382 ops/ms
                 ·gc.alloc.rate:      20.649 MB/sec
                 ·gc.alloc.rate.norm: 16456.039 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.378 ±(99.9%) 0.015 ops/ms [Average]
  (min, avg, max) = (1.371, 1.378, 1.382), stdev = 0.004
  CI (99.9%): [1.362, 1.393] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  20.588 ±(99.9%) 0.228 MB/sec [Average]
  (min, avg, max) = (20.494, 20.588, 20.649), stdev = 0.059
  CI (99.9%): [20.360, 20.816] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.806 ±(99.9%) 4.070 B/op [Average]
  (min, avg, max) = (16456.030, 16456.806, 16457.970), stdev = 1.057
  CI (99.9%): [16452.736, 16460.875] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  22.549 ±(99.9%) 118.894 MB/sec [Average]
  (min, avg, max) = (≈ 0, 22.549, 56.374), stdev = 30.876
  CI (99.9%): [≈ 0, 141.443] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  18050.041 ±(99.9%) 95173.488 B/op [Average]
  (min, avg, max) = (≈ 0, 18050.041, 45271.076), stdev = 24716.253
  CI (99.9%): [≈ 0, 113223.530] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  2.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  4.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
  CI (99.9%): [4.000, 4.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 22.67% complete, ETA 01:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 2.252 ops/ms
# Warmup Iteration   2: 2.260 ops/ms
# Warmup Iteration   3: 2.254 ops/ms
Iteration   1: 2.255 ops/ms
                 ·gc.alloc.rate:                   33.705 MB/sec
                 ·gc.alloc.rate.norm:              16457.200 B/op
                 ·gc.churn.G1_Eden_Space:          56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     27524.364 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.666 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   2: 2.259 ops/ms
                 ·gc.alloc.rate:      33.753 MB/sec
                 ·gc.alloc.rate.norm: 16456.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.259 ops/ms
                 ·gc.alloc.rate:               33.761 MB/sec
                 ·gc.alloc.rate.norm:          16457.194 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27479.283 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 2.263 ops/ms
                 ·gc.alloc.rate:      33.822 MB/sec
                 ·gc.alloc.rate.norm: 16456.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.262 ops/ms
                 ·gc.alloc.rate:                   33.815 MB/sec
                 ·gc.alloc.rate.norm:              16457.196 B/op
                 ·gc.churn.G1_Eden_Space:          56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     27435.561 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 2.083 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2.260 ±(99.9%) 0.012 ops/ms [Average]
  (min, avg, max) = (2.255, 2.260, 2.263), stdev = 0.003
  CI (99.9%): [2.247, 2.272] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  33.771 ±(99.9%) 0.186 MB/sec [Average]
  (min, avg, max) = (33.705, 33.771, 33.822), stdev = 0.048
  CI (99.9%): [33.586, 33.957] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.726 ±(99.9%) 2.481 B/op [Average]
  (min, avg, max) = (16456.018, 16456.726, 16457.200), stdev = 0.644
  CI (99.9%): [16454.245, 16459.207] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  33.823 ±(99.9%) 118.893 MB/sec [Average]
  (min, avg, max) = (≈ 0, 33.823, 56.372), stdev = 30.876
  CI (99.9%): [≈ 0, 152.716] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16487.841 ±(99.9%) 57957.212 B/op [Average]
  (min, avg, max) = (≈ 0, 16487.841, 27524.364), stdev = 15051.304
  CI (99.9%): [≈ 0, 74445.054] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.550 ±(99.9%) 3.483 B/op [Average]
  (min, avg, max) = (≈ 0, 0.550, 2.083), stdev = 0.904
  CI (99.9%): [≈ 0, 4.032] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  3.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 24.00% complete, ETA 01:20:02
# Fork: 1 of 1
# Warmup Iteration   1: 5795.192 ops/ms
# Warmup Iteration   2: 5611.501 ops/ms
# Warmup Iteration   3: 5626.569 ops/ms
Iteration   1: 5629.497 ops/ms
                 ·gc.alloc.rate:                   1676.978 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1691.214 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.798 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         24.000 ms

Iteration   2: 5618.895 ops/ms
                 ·gc.alloc.rate:                   1673.836 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1691.248 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     331.425 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         23.000 ms

Iteration   3: 5626.198 ops/ms
                 ·gc.alloc.rate:                   1675.979 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1691.204 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.993 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         17.000 ms

Iteration   4: 5622.258 ops/ms
                 ·gc.alloc.rate:                   1674.814 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1634.843 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     320.184 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        29.000 counts
                 ·gc.time:                         21.000 ms

Iteration   5: 5633.852 ops/ms
                 ·gc.alloc.rate:                   1678.272 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1691.221 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     330.543 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         20.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  5626.140 ±(99.9%) 22.642 ops/ms [Average]
  (min, avg, max) = (5618.895, 5626.140, 5633.852), stdev = 5.880
  CI (99.9%): [5603.498, 5648.782] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1675.976 ±(99.9%) 6.726 MB/sec [Average]
  (min, avg, max) = (1673.836, 1675.976, 1678.272), stdev = 1.747
  CI (99.9%): [1669.249, 1682.702] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.015] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1679.946 ±(99.9%) 97.087 MB/sec [Average]
  (min, avg, max) = (1634.843, 1679.946, 1691.248), stdev = 25.213
  CI (99.9%): [1582.859, 1777.033] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  328.789 ±(99.9%) 18.564 B/op [Average]
  (min, avg, max) = (320.184, 328.789, 331.425), stdev = 4.821
  CI (99.9%): [310.225, 347.352] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  149.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (29.000, 29.800, 30.000), stdev = 0.447
  CI (99.9%): [149.000, 149.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  105.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 21.000, 24.000), stdev = 2.739
  CI (99.9%): [105.000, 105.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 25.33% complete, ETA 01:18:37
# Fork: 1 of 1
# Warmup Iteration   1: 6407.061 ops/ms
# Warmup Iteration   2: 6322.680 ops/ms
# Warmup Iteration   3: 6298.771 ops/ms
Iteration   1: 6315.629 ops/ms
                 ·gc.alloc.rate:                   1881.372 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1860.338 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     324.346 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms

Iteration   2: 6316.935 ops/ms
                 ·gc.alloc.rate:                   1881.770 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1916.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     334.109 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        34.000 counts
                 ·gc.time:                         22.000 ms

Iteration   3: 6320.066 ops/ms
                 ·gc.alloc.rate:                   1882.688 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1860.340 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     324.119 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         17.000 ms

Iteration   4: 6310.073 ops/ms
                 ·gc.alloc.rate:                   1879.723 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1916.731 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     334.471 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        34.000 counts
                 ·gc.time:                         22.000 ms

Iteration   5: 6315.834 ops/ms
                 ·gc.alloc.rate:                   1881.380 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1860.296 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     324.336 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6315.707 ±(99.9%) 13.920 ops/ms [Average]
  (min, avg, max) = (6310.073, 6315.707, 6320.066), stdev = 3.615
  CI (99.9%): [6301.787, 6329.628] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1881.386 ±(99.9%) 4.133 MB/sec [Average]
  (min, avg, max) = (1879.723, 1881.386, 1882.688), stdev = 1.073
  CI (99.9%): [1877.253, 1885.519] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.013), stdev = 0.001
  CI (99.9%): [328.011, 328.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1882.890 ±(99.9%) 118.980 MB/sec [Average]
  (min, avg, max) = (1860.296, 1882.890, 1916.745), stdev = 30.899
  CI (99.9%): [1763.910, 2001.870] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  328.276 ±(99.9%) 21.148 B/op [Average]
  (min, avg, max) = (324.119, 328.276, 334.471), stdev = 5.492
  CI (99.9%): [307.128, 349.424] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  167.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (33.000, 33.400, 34.000), stdev = 0.548
  CI (99.9%): [167.000, 167.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  97.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 19.400, 22.000), stdev = 2.408
  CI (99.9%): [97.000, 97.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 26.67% complete, ETA 01:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 5971.207 ops/ms
# Warmup Iteration   2: 6087.821 ops/ms
# Warmup Iteration   3: 6102.963 ops/ms
Iteration   1: 6093.365 ops/ms
                 ·gc.alloc.rate:                   1815.166 MB/sec
                 ·gc.alloc.rate.norm:              328.014 B/op
                 ·gc.churn.G1_Eden_Space:          1860.340 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     336.177 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         21.000 ms

Iteration   2: 6098.428 ops/ms
                 ·gc.alloc.rate:                   1816.662 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1803.977 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.722 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   3: 6089.767 ops/ms
                 ·gc.alloc.rate:                   1814.069 MB/sec
                 ·gc.alloc.rate.norm:              328.013 B/op
                 ·gc.churn.G1_Eden_Space:          1803.953 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     326.183 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 6093.642 ops/ms
                 ·gc.alloc.rate:                   1815.242 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1803.977 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.977 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         17.000 ms

Iteration   5: 6097.393 ops/ms
                 ·gc.alloc.rate:                   1816.280 MB/sec
                 ·gc.alloc.rate.norm:              328.012 B/op
                 ·gc.churn.G1_Eden_Space:          1803.901 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     325.777 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6094.519 ±(99.9%) 13.370 ops/ms [Average]
  (min, avg, max) = (6089.767, 6094.519, 6098.428), stdev = 3.472
  CI (99.9%): [6081.149, 6107.889] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1815.484 ±(99.9%) 3.938 MB/sec [Average]
  (min, avg, max) = (1814.069, 1815.484, 1816.662), stdev = 1.023
  CI (99.9%): [1811.546, 1819.422] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  328.013 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (328.012, 328.013, 328.014), stdev = 0.001
  CI (99.9%): [328.011, 328.015] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1815.229 ±(99.9%) 97.104 MB/sec [Average]
  (min, avg, max) = (1803.901, 1815.229, 1860.340), stdev = 25.218
  CI (99.9%): [1718.126, 1912.333] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  327.967 ±(99.9%) 17.686 B/op [Average]
  (min, avg, max) = (325.722, 327.967, 336.177), stdev = 4.593
  CI (99.9%): [310.281, 345.653] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  161.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.200, 33.000), stdev = 0.447
  CI (99.9%): [161.000, 161.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  95.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 19.000, 21.000), stdev = 1.581
  CI (99.9%): [95.000, 95.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 28.00% complete, ETA 01:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 1057.552 ops/ms
# Warmup Iteration   2: 1060.804 ops/ms
# Warmup Iteration   3: 1058.115 ops/ms
Iteration   1: 1060.512 ops/ms
                 ·gc.alloc.rate:                   2041.906 MB/sec
                 ·gc.alloc.rate.norm:              2120.084 B/op
                 ·gc.churn.G1_Eden_Space:          2029.460 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2107.161 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         23.000 ms

Iteration   2: 1060.947 ops/ms
                 ·gc.alloc.rate:                   2042.735 MB/sec
                 ·gc.alloc.rate.norm:              2120.082 B/op
                 ·gc.churn.G1_Eden_Space:          2029.479 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2106.323 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         22.000 ms

Iteration   3: 1059.526 ops/ms
                 ·gc.alloc.rate:                   2040.011 MB/sec
                 ·gc.alloc.rate.norm:              2120.082 B/op
                 ·gc.churn.G1_Eden_Space:          2085.851 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2167.722 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        37.000 counts
                 ·gc.time:                         25.000 ms

Iteration   4: 1061.051 ops/ms
                 ·gc.alloc.rate:                   2042.950 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          2029.484 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2106.105 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         20.000 ms

Iteration   5: 1060.426 ops/ms
                 ·gc.alloc.rate:                   2041.692 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          2029.422 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2107.339 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         21.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1060.492 ±(99.9%) 2.324 ops/ms [Average]
  (min, avg, max) = (1059.526, 1060.492, 1061.051), stdev = 0.604
  CI (99.9%): [1058.168, 1062.817] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2041.859 ±(99.9%) 4.476 MB/sec [Average]
  (min, avg, max) = (2040.011, 2041.859, 2042.950), stdev = 1.162
  CI (99.9%): [2037.383, 2046.335] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.081 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (2120.080, 2120.081, 2120.084), stdev = 0.002
  CI (99.9%): [2120.075, 2120.088] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2040.739 ±(99.9%) 97.107 MB/sec [Average]
  (min, avg, max) = (2029.422, 2040.739, 2085.851), stdev = 25.218
  CI (99.9%): [1943.632, 2137.846] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2118.930 ±(99.9%) 105.047 B/op [Average]
  (min, avg, max) = (2106.105, 2118.930, 2167.722), stdev = 27.280
  CI (99.9%): [2013.882, 2223.977] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  181.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (36.000, 36.200, 37.000), stdev = 0.447
  CI (99.9%): [181.000, 181.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  111.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 22.200, 25.000), stdev = 1.924
  CI (99.9%): [111.000, 111.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 29.33% complete, ETA 01:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 1461.195 ops/ms
# Warmup Iteration   2: 1488.889 ops/ms
# Warmup Iteration   3: 1495.630 ops/ms
Iteration   1: 1495.602 ops/ms
                 ·gc.alloc.rate:                   2879.632 MB/sec
                 ·gc.alloc.rate.norm:              2120.081 B/op
                 ·gc.churn.G1_Eden_Space:          2875.077 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2116.728 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         28.000 ms

Iteration   2: 1494.438 ops/ms
                 ·gc.alloc.rate:                   2877.427 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          2875.137 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2118.393 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         36.000 ms

Iteration   3: 1496.197 ops/ms
                 ·gc.alloc.rate:                   2880.758 MB/sec
                 ·gc.alloc.rate.norm:              2120.081 B/op
                 ·gc.churn.G1_Eden_Space:          2931.446 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2157.385 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        52.000 counts
                 ·gc.time:                         28.000 ms

Iteration   4: 1494.233 ops/ms
                 ·gc.alloc.rate:                   2876.988 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          2875.088 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2118.679 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 1497.256 ops/ms
                 ·gc.alloc.rate:                   2882.809 MB/sec
                 ·gc.alloc.rate.norm:              2120.079 B/op
                 ·gc.churn.G1_Eden_Space:          2875.095 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2114.406 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         31.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1495.545 ±(99.9%) 4.834 ops/ms [Average]
  (min, avg, max) = (1494.233, 1495.545, 1497.256), stdev = 1.255
  CI (99.9%): [1490.711, 1500.380] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2879.523 ±(99.9%) 9.263 MB/sec [Average]
  (min, avg, max) = (2876.988, 2879.523, 2882.809), stdev = 2.406
  CI (99.9%): [2870.260, 2888.786] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.080 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (2120.079, 2120.080, 2120.081), stdev = 0.001
  CI (99.9%): [2120.075, 2120.085] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2886.369 ±(99.9%) 97.033 MB/sec [Average]
  (min, avg, max) = (2875.077, 2886.369, 2931.446), stdev = 25.199
  CI (99.9%): [2789.336, 2983.402] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2125.118 ±(99.9%) 69.765 B/op [Average]
  (min, avg, max) = (2114.406, 2125.118, 2157.385), stdev = 18.118
  CI (99.9%): [2055.353, 2194.883] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  256.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (51.000, 51.200, 52.000), stdev = 0.447
  CI (99.9%): [256.000, 256.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  151.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 30.200, 36.000), stdev = 3.493
  CI (99.9%): [151.000, 151.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 30.67% complete, ETA 01:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 920.963 ops/ms
# Warmup Iteration   2: 936.263 ops/ms
# Warmup Iteration   3: 936.615 ops/ms
Iteration   1: 937.517 ops/ms
                 ·gc.alloc.rate:                   1805.079 MB/sec
                 ·gc.alloc.rate.norm:              2120.085 B/op
                 ·gc.churn.G1_Eden_Space:          1803.948 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2118.756 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   2: 936.466 ops/ms
                 ·gc.alloc.rate:                   1803.072 MB/sec
                 ·gc.alloc.rate.norm:              2120.083 B/op
                 ·gc.churn.G1_Eden_Space:          1803.987 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2121.159 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         21.000 ms

Iteration   3: 936.837 ops/ms
                 ·gc.alloc.rate:                   1803.767 MB/sec
                 ·gc.alloc.rate.norm:              2120.082 B/op
                 ·gc.churn.G1_Eden_Space:          1803.956 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2120.304 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 937.083 ops/ms
                 ·gc.alloc.rate:                   1804.249 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          1803.964 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2119.746 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   5: 937.565 ops/ms
                 ·gc.alloc.rate:                   1805.138 MB/sec
                 ·gc.alloc.rate.norm:              2120.080 B/op
                 ·gc.churn.G1_Eden_Space:          1803.925 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2118.655 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  937.093 ±(99.9%) 1.787 ops/ms [Average]
  (min, avg, max) = (936.466, 937.093, 937.565), stdev = 0.464
  CI (99.9%): [935.306, 938.881] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  1804.261 ±(99.9%) 3.389 MB/sec [Average]
  (min, avg, max) = (1803.072, 1804.261, 1805.138), stdev = 0.880
  CI (99.9%): [1800.872, 1807.650] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2120.082 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (2120.080, 2120.082, 2120.085), stdev = 0.002
  CI (99.9%): [2120.074, 2120.090] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  1803.956 ±(99.9%) 0.088 MB/sec [Average]
  (min, avg, max) = (1803.925, 1803.956, 1803.987), stdev = 0.023
  CI (99.9%): [1803.868, 1804.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2119.724 ±(99.9%) 4.073 B/op [Average]
  (min, avg, max) = (2118.655, 2119.724, 2121.159), stdev = 1.058
  CI (99.9%): [2115.651, 2123.798] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  160.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
  CI (99.9%): [160.000, 160.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  98.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 19.600, 21.000), stdev = 1.140
  CI (99.9%): [98.000, 98.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 32.00% complete, ETA 01:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.375 ops/ms
# Warmup Iteration   2: 1.381 ops/ms
# Warmup Iteration   3: 1.375 ops/ms
Iteration   1: 1.374 ops/ms
                 ·gc.alloc.rate:               20.532 MB/sec
                 ·gc.alloc.rate.norm:          16457.968 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 45185.398 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   2: 1.370 ops/ms
                 ·gc.alloc.rate:      20.480 MB/sec
                 ·gc.alloc.rate.norm: 16456.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.370 ops/ms
                 ·gc.alloc.rate:      20.476 MB/sec
                 ·gc.alloc.rate.norm: 16456.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.378 ops/ms
                 ·gc.alloc.rate:               20.591 MB/sec
                 ·gc.alloc.rate.norm:          16457.960 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 45057.487 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   5: 1.380 ops/ms
                 ·gc.alloc.rate:      20.620 MB/sec
                 ·gc.alloc.rate.norm: 16456.039 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.374 ±(99.9%) 0.017 ops/ms [Average]
  (min, avg, max) = (1.370, 1.374, 1.380), stdev = 0.004
  CI (99.9%): [1.358, 1.391] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  20.540 ±(99.9%) 0.249 MB/sec [Average]
  (min, avg, max) = (20.476, 20.540, 20.620), stdev = 0.065
  CI (99.9%): [20.290, 20.789] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.806 ±(99.9%) 4.070 B/op [Average]
  (min, avg, max) = (16456.032, 16456.806, 16457.968), stdev = 1.057
  CI (99.9%): [16452.736, 16460.877] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  22.549 ±(99.9%) 118.893 MB/sec [Average]
  (min, avg, max) = (≈ 0, 22.549, 56.372), stdev = 30.876
  CI (99.9%): [≈ 0, 141.442] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  18048.577 ±(99.9%) 95165.095 B/op [Average]
  (min, avg, max) = (≈ 0, 18048.577, 45185.398), stdev = 24714.073
  CI (99.9%): [≈ 0, 113213.672] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  2.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  4.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
  CI (99.9%): [4.000, 4.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 33.33% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.980 ops/ms
# Warmup Iteration   2: 1.985 ops/ms
# Warmup Iteration   3: 1.990 ops/ms
Iteration   1: 1.998 ops/ms
                 ·gc.alloc.rate:      29.854 MB/sec
                 ·gc.alloc.rate.norm: 16456.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.999 ops/ms
                 ·gc.alloc.rate:               29.873 MB/sec
                 ·gc.alloc.rate.norm:          16457.351 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 31056.483 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   3: 1.999 ops/ms
                 ·gc.alloc.rate:      29.874 MB/sec
                 ·gc.alloc.rate.norm: 16456.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.998 ops/ms
                 ·gc.alloc.rate:                   29.867 MB/sec
                 ·gc.alloc.rate.norm:              16457.354 B/op
                 ·gc.churn.G1_Eden_Space:          56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     31061.145 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1.292 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 2.001 ops/ms
                 ·gc.alloc.rate:      29.903 MB/sec
                 ·gc.alloc.rate.norm: 16456.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.999 ±(99.9%) 0.005 ops/ms [Average]
  (min, avg, max) = (1.998, 1.999, 2.001), stdev = 0.001
  CI (99.9%): [1.994, 2.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  29.874 ±(99.9%) 0.069 MB/sec [Average]
  (min, avg, max) = (29.854, 29.874, 29.903), stdev = 0.018
  CI (99.9%): [29.805, 29.944] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.555 ±(99.9%) 2.803 B/op [Average]
  (min, avg, max) = (16456.022, 16456.555, 16457.354), stdev = 0.728
  CI (99.9%): [16453.752, 16459.358] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  22.549 ±(99.9%) 118.893 MB/sec [Average]
  (min, avg, max) = (≈ 0, 22.549, 56.373), stdev = 30.876
  CI (99.9%): [≈ 0, 141.441] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  12423.526 ±(99.9%) 65505.666 B/op [Average]
  (min, avg, max) = (≈ 0, 12423.526, 31061.145), stdev = 17011.613
  CI (99.9%): [≈ 0, 77929.192] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻³ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.258 ±(99.9%) 2.225 B/op [Average]
  (min, avg, max) = (≈ 0, 0.258, 1.292), stdev = 0.578
  CI (99.9%): [≈ 0, 2.484] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  2.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 34.67% complete, ETA 01:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 1.902 ops/ms
# Warmup Iteration   2: 1.906 ops/ms
# Warmup Iteration   3: 1.909 ops/ms
Iteration   1: 1.910 ops/ms
                 ·gc.alloc.rate:      28.551 MB/sec
                 ·gc.alloc.rate.norm: 16456.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.912 ops/ms
                 ·gc.alloc.rate:                   28.575 MB/sec
                 ·gc.alloc.rate.norm:              16457.415 B/op
                 ·gc.churn.G1_Eden_Space:          56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     32466.370 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 3.469 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   3: 1.919 ops/ms
                 ·gc.alloc.rate:      28.673 MB/sec
                 ·gc.alloc.rate.norm: 16456.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.921 ops/ms
                 ·gc.alloc.rate:               28.706 MB/sec
                 ·gc.alloc.rate.norm:          16457.408 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 32317.628 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   5: 1.923 ops/ms
                 ·gc.alloc.rate:      28.734 MB/sec
                 ·gc.alloc.rate.norm: 16456.023 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.917 ±(99.9%) 0.021 ops/ms [Average]
  (min, avg, max) = (1.910, 1.917, 1.923), stdev = 0.005
  CI (99.9%): [1.896, 1.938] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  28.648 ±(99.9%) 0.312 MB/sec [Average]
  (min, avg, max) = (28.551, 28.648, 28.734), stdev = 0.081
  CI (99.9%): [28.336, 28.960] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16456.579 ±(99.9%) 2.926 B/op [Average]
  (min, avg, max) = (16456.023, 16456.579, 16457.415), stdev = 0.760
  CI (99.9%): [16453.653, 16459.505] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  22.548 ±(99.9%) 118.891 MB/sec [Average]
  (min, avg, max) = (≈ 0, 22.548, 56.371), stdev = 30.876
  CI (99.9%): [≈ 0, 141.439] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  12956.800 ±(99.9%) 68317.764 B/op [Average]
  (min, avg, max) = (≈ 0, 12956.800, 32466.370), stdev = 17741.906
  CI (99.9%): [≈ 0, 81274.563] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.010 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.003
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.694 ±(99.9%) 5.975 B/op [Average]
  (min, avg, max) = (≈ 0, 0.694, 3.469), stdev = 1.552
  CI (99.9%): [≈ 0, 6.669] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  2.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  3.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.600, 2.000), stdev = 0.894
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 36.00% complete, ETA 01:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 9536.253 ops/ms
# Warmup Iteration   2: 9695.179 ops/ms
# Warmup Iteration   3: 9852.559 ops/ms
Iteration   1: 9856.614 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9861.775 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9858.278 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9856.623 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9861.729 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9859.004 ±(99.9%) 10.007 ops/ms [Average]
  (min, avg, max) = (9856.614, 9859.004, 9861.775), stdev = 2.599
  CI (99.9%): [9848.997, 9869.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 37.33% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 11722.143 ops/ms
# Warmup Iteration   2: 12180.523 ops/ms
# Warmup Iteration   3: 12556.602 ops/ms
Iteration   1: 12562.319 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12554.394 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12550.040 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12563.228 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12562.921 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12558.580 ±(99.9%) 23.175 ops/ms [Average]
  (min, avg, max) = (12550.040, 12558.580, 12563.228), stdev = 6.018
  CI (99.9%): [12535.405, 12581.755] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 38.67% complete, ETA 01:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 12196.666 ops/ms
# Warmup Iteration   2: 12240.069 ops/ms
# Warmup Iteration   3: 12290.281 ops/ms
Iteration   1: 12306.431 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12307.492 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12306.796 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12317.877 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12292.994 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12306.318 ±(99.9%) 34.049 ops/ms [Average]
  (min, avg, max) = (12292.994, 12306.318, 12317.877), stdev = 8.842
  CI (99.9%): [12272.269, 12340.367] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 40.00% complete, ETA 01:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 1141.017 ops/ms
# Warmup Iteration   2: 1141.233 ops/ms
# Warmup Iteration   3: 1141.485 ops/ms
Iteration   1: 1140.915 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1141.760 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1141.541 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1142.072 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1142.399 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1141.737 ±(99.9%) 2.165 ops/ms [Average]
  (min, avg, max) = (1140.915, 1141.737, 1142.399), stdev = 0.562
  CI (99.9%): [1139.572, 1143.903] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 41.33% complete, ETA 01:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 2415.689 ops/ms
# Warmup Iteration   2: 2411.924 ops/ms
# Warmup Iteration   3: 2426.263 ops/ms
Iteration   1: 2426.090 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2428.656 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2428.943 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2429.188 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2428.693 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2428.314 ±(99.9%) 4.857 ops/ms [Average]
  (min, avg, max) = (2426.090, 2428.314, 2429.188), stdev = 1.261
  CI (99.9%): [2423.457, 2433.171] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 42.67% complete, ETA 01:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 2361.915 ops/ms
# Warmup Iteration   2: 2371.957 ops/ms
# Warmup Iteration   3: 2380.392 ops/ms
Iteration   1: 2380.874 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2381.300 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2380.969 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2380.037 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2381.350 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2380.906 ±(99.9%) 2.030 ops/ms [Average]
  (min, avg, max) = (2380.037, 2380.906, 2381.350), stdev = 0.527
  CI (99.9%): [2378.875, 2382.936] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 44.00% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.922 ops/ms
# Warmup Iteration   2: 0.924 ops/ms
# Warmup Iteration   3: 0.924 ops/ms
Iteration   1: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.925 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.925 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.925 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  0.924 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (0.923, 0.924, 0.925), stdev = 0.001
  CI (99.9%): [0.922, 0.926] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.045 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.044, 0.045, 0.048), stdev = 0.002
  CI (99.9%): [0.039, 0.051] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 45.33% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.151 ops/ms
# Warmup Iteration   2: 1.151 ops/ms
# Warmup Iteration   3: 1.150 ops/ms
Iteration   1: 1.150 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.150 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.151 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.151 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.151 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.151 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.150, 1.151, 1.151), stdev = 0.001
  CI (99.9%): [1.148, 1.153] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.038 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (0.035, 0.038, 0.038), stdev = 0.001
  CI (99.9%): [0.033, 0.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 46.67% complete, ETA 00:56:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.548 ops/ms
# Warmup Iteration   2: 1.555 ops/ms
# Warmup Iteration   3: 1.555 ops/ms
Iteration   1: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.555 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (1.554, 1.555, 1.555), stdev = 0.001
  CI (99.9%): [1.554, 1.556] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.028 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.026, 0.028, 0.033), stdev = 0.003
  CI (99.9%): [0.017, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 48.00% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 10552.680 ops/ms
# Warmup Iteration   2: 10719.326 ops/ms
# Warmup Iteration   3: 10975.596 ops/ms
Iteration   1: 10965.289 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10975.616 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10975.359 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10975.696 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10979.210 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10974.234 ±(99.9%) 20.201 ops/ms [Average]
  (min, avg, max) = (10965.289, 10974.234, 10979.210), stdev = 5.246
  CI (99.9%): [10954.033, 10994.435] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 49.33% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 12593.302 ops/ms
# Warmup Iteration   2: 13341.590 ops/ms
# Warmup Iteration   3: 13653.527 ops/ms
Iteration   1: 13645.297 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13652.518 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13647.583 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13642.137 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13652.827 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13648.073 ±(99.9%) 17.807 ops/ms [Average]
  (min, avg, max) = (13642.137, 13648.073, 13652.827), stdev = 4.624
  CI (99.9%): [13630.266, 13665.879] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 50.67% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 14996.528 ops/ms
# Warmup Iteration   2: 15112.432 ops/ms
# Warmup Iteration   3: 15036.497 ops/ms
Iteration   1: 15052.899 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15041.916 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15025.070 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15037.084 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15046.685 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  15040.731 ±(99.9%) 40.545 ops/ms [Average]
  (min, avg, max) = (15025.070, 15040.731, 15052.899), stdev = 10.530
  CI (99.9%): [15000.185, 15081.276] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 52.00% complete, ETA 00:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 1127.337 ops/ms
# Warmup Iteration   2: 1129.150 ops/ms
# Warmup Iteration   3: 1130.657 ops/ms
Iteration   1: 1129.410 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1131.008 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1131.900 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1131.111 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1129.721 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1130.630 ±(99.9%) 3.994 ops/ms [Average]
  (min, avg, max) = (1129.410, 1130.630, 1131.900), stdev = 1.037
  CI (99.9%): [1126.636, 1134.624] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 53.33% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 2717.247 ops/ms
# Warmup Iteration   2: 2723.784 ops/ms
# Warmup Iteration   3: 2736.688 ops/ms
Iteration   1: 2733.600 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2734.165 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2732.395 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2735.645 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2736.655 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2734.492 ±(99.9%) 6.475 ops/ms [Average]
  (min, avg, max) = (2732.395, 2734.492, 2736.655), stdev = 1.682
  CI (99.9%): [2728.017, 2740.967] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 54.67% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 3017.775 ops/ms
# Warmup Iteration   2: 2779.450 ops/ms
# Warmup Iteration   3: 2777.634 ops/ms
Iteration   1: 2777.050 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2778.257 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2778.677 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2779.137 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2780.497 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2778.724 ±(99.9%) 4.847 ops/ms [Average]
  (min, avg, max) = (2777.050, 2778.724, 2780.497), stdev = 1.259
  CI (99.9%): [2773.877, 2783.570] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 56.00% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.088 ops/ms
# Warmup Iteration   2: 1.092 ops/ms
# Warmup Iteration   3: 1.092 ops/ms
Iteration   1: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.091 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.092 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.091, 1.092, 1.092), stdev = 0.001
  CI (99.9%): [1.090, 1.094] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.039 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.037, 0.039, 0.040), stdev = 0.002
  CI (99.9%): [0.033, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 57.33% complete, ETA 00:44:56
# Fork: 1 of 1
# Warmup Iteration   1: 1.492 ops/ms
# Warmup Iteration   2: 1.495 ops/ms
# Warmup Iteration   3: 1.495 ops/ms
Iteration   1: 1.494 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.495 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.495 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.496 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.497 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.495 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (1.494, 1.495, 1.497), stdev = 0.001
  CI (99.9%): [1.492, 1.499] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (0.027, 0.030, 0.036), stdev = 0.004
  CI (99.9%): [0.016, 0.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 58.67% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.545 ops/ms
# Warmup Iteration   2: 1.549 ops/ms
# Warmup Iteration   3: 1.551 ops/ms
Iteration   1: 1.551 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.551 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.551 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.551 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.548 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.550 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.548, 1.550, 1.551), stdev = 0.002
  CI (99.9%): [1.544, 1.556] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.028 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.026, 0.028, 0.033), stdev = 0.003
  CI (99.9%): [0.018, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 60.00% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 10175.264 ops/ms
# Warmup Iteration   2: 9954.329 ops/ms
# Warmup Iteration   3: 10116.200 ops/ms
Iteration   1: 10121.556 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10125.263 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10117.534 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10119.039 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10121.655 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10121.010 ±(99.9%) 11.352 ops/ms [Average]
  (min, avg, max) = (10117.534, 10121.010, 10125.263), stdev = 2.948
  CI (99.9%): [10109.658, 10132.361] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 61.33% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 11423.435 ops/ms
# Warmup Iteration   2: 11676.495 ops/ms
# Warmup Iteration   3: 12016.454 ops/ms
Iteration   1: 12007.891 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12029.910 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12018.786 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12025.211 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12017.436 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12019.847 ±(99.9%) 32.213 ops/ms [Average]
  (min, avg, max) = (12007.891, 12019.847, 12029.910), stdev = 8.366
  CI (99.9%): [11987.633, 12052.060] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 62.67% complete, ETA 00:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 10279.112 ops/ms
# Warmup Iteration   2: 11118.394 ops/ms
# Warmup Iteration   3: 11137.142 ops/ms
Iteration   1: 11143.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11128.431 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11133.323 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11119.899 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11132.625 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11131.527 ±(99.9%) 32.739 ops/ms [Average]
  (min, avg, max) = (11119.899, 11131.527, 11143.356), stdev = 8.502
  CI (99.9%): [11098.788, 11164.266] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 64.00% complete, ETA 00:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 1554.268 ops/ms
# Warmup Iteration   2: 1561.307 ops/ms
# Warmup Iteration   3: 1565.201 ops/ms
Iteration   1: 1555.511 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1552.098 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1561.445 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1552.246 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1552.367 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1554.733 ±(99.9%) 15.448 ops/ms [Average]
  (min, avg, max) = (1552.098, 1554.733, 1561.445), stdev = 4.012
  CI (99.9%): [1539.285, 1570.182] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 65.33% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 2403.256 ops/ms
# Warmup Iteration   2: 2408.576 ops/ms
# Warmup Iteration   3: 2414.828 ops/ms
Iteration   1: 2416.500 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2418.214 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2416.153 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2415.759 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2412.481 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2415.821 ±(99.9%) 8.044 ops/ms [Average]
  (min, avg, max) = (2412.481, 2415.821, 2418.214), stdev = 2.089
  CI (99.9%): [2407.777, 2423.866] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 66.67% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 2198.793 ops/ms
# Warmup Iteration   2: 2195.297 ops/ms
# Warmup Iteration   3: 2200.148 ops/ms
Iteration   1: 2201.736 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2203.557 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2199.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2204.512 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2200.007 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2201.833 ±(99.9%) 8.530 ops/ms [Average]
  (min, avg, max) = (2199.356, 2201.833, 2204.512), stdev = 2.215
  CI (99.9%): [2193.303, 2210.363] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 68.00% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.606 ops/ms
# Warmup Iteration   2: 1.609 ops/ms
# Warmup Iteration   3: 1.608 ops/ms
Iteration   1: 1.608 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.603 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.602 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.607 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.608 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.605 ±(99.9%) 0.011 ops/ms [Average]
  (min, avg, max) = (1.602, 1.605, 1.608), stdev = 0.003
  CI (99.9%): [1.594, 1.617] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.028 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.025, 0.028, 0.034), stdev = 0.003
  CI (99.9%): [0.015, 0.041] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 69.33% complete, ETA 00:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 2.466 ops/ms
# Warmup Iteration   2: 2.476 ops/ms
# Warmup Iteration   3: 2.475 ops/ms
Iteration   1: 2.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.016 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.471 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.471 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.473 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (2.471, 2.473, 2.475), stdev = 0.002
  CI (99.9%): [2.467, 2.479] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.018 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.016, 0.018, 0.022), stdev = 0.002
  CI (99.9%): [0.009, 0.027] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 70.67% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.366 ops/ms
# Warmup Iteration   2: 2.374 ops/ms
# Warmup Iteration   3: 2.374 ops/ms
Iteration   1: 2.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.375 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.375 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.377 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.374 ±(99.9%) 0.007 ops/ms [Average]
  (min, avg, max) = (2.373, 2.374, 2.377), stdev = 0.002
  CI (99.9%): [2.367, 2.382] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.019 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.017, 0.019, 0.022), stdev = 0.002
  CI (99.9%): [0.013, 0.026] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 72.00% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 12951.965 ops/ms
# Warmup Iteration   2: 13163.511 ops/ms
# Warmup Iteration   3: 13283.237 ops/ms
Iteration   1: 13270.676 ops/ms
                 ·gc.alloc.rate:                   3278.299 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.711 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.298 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         32.000 ms

Iteration   2: 13286.955 ops/ms
                 ·gc.alloc.rate:                   3282.360 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.022 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     275.629 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         33.000 ms

Iteration   3: 13284.501 ops/ms
                 ·gc.alloc.rate:                   3281.648 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.654 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.016 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         28.000 ms

Iteration   4: 13269.669 ops/ms
                 ·gc.alloc.rate:                   3277.953 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.642 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.320 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         33.000 ms

Iteration   5: 13261.373 ops/ms
                 ·gc.alloc.rate:                   3275.953 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.712 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.492 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         29.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13274.635 ±(99.9%) 41.532 ops/ms [Average]
  (min, avg, max) = (13261.373, 13274.635, 13286.955), stdev = 10.786
  CI (99.9%): [13233.103, 13316.167] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3279.243 ±(99.9%) 10.346 MB/sec [Average]
  (min, avg, max) = (3275.953, 3279.243, 3282.360), stdev = 2.687
  CI (99.9%): [3268.896, 3289.589] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3280.948 ±(99.9%) 97.025 MB/sec [Average]
  (min, avg, max) = (3269.642, 3280.948, 3326.022), stdev = 25.197
  CI (99.9%): [3183.923, 3377.974] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.151 ±(99.9%) 7.515 B/op [Average]
  (min, avg, max) = (271.016, 272.151, 275.629), stdev = 1.952
  CI (99.9%): [264.636, 279.666] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  291.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (58.000, 58.200, 59.000), stdev = 0.447
  CI (99.9%): [291.000, 291.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  155.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 31.000, 33.000), stdev = 2.345
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 73.33% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 13018.540 ops/ms
# Warmup Iteration   2: 13201.087 ops/ms
# Warmup Iteration   3: 13074.422 ops/ms
Iteration   1: 13098.356 ops/ms
                 ·gc.alloc.rate:                   3235.735 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.339 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.127 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         32.000 ms

Iteration   2: 13090.235 ops/ms
                 ·gc.alloc.rate:                   3233.723 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.365 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.298 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         33.000 ms

Iteration   3: 13082.875 ops/ms
                 ·gc.alloc.rate:                   3231.820 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.624 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     275.192 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         30.000 ms

Iteration   4: 13098.761 ops/ms
                 ·gc.alloc.rate:                   3235.735 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.262 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.121 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 13105.188 ops/ms
                 ·gc.alloc.rate:                   3237.340 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.672 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.727 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         31.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13095.083 ±(99.9%) 33.286 ops/ms [Average]
  (min, avg, max) = (13082.875, 13095.083, 13105.188), stdev = 8.644
  CI (99.9%): [13061.797, 13128.369] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3234.871 ±(99.9%) 8.218 MB/sec [Average]
  (min, avg, max) = (3231.820, 3234.871, 3237.340), stdev = 2.134
  CI (99.9%): [3226.653, 3243.088] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3235.852 ±(99.9%) 118.796 MB/sec [Average]
  (min, avg, max) = (3213.262, 3235.852, 3269.672), stdev = 30.851
  CI (99.9%): [3117.056, 3354.649] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.093 ±(99.9%) 10.100 B/op [Average]
  (min, avg, max) = (270.121, 272.093, 275.192), stdev = 2.623
  CI (99.9%): [261.993, 282.193] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.003, 0.003, 0.006), stdev = 0.001
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  287.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (57.000, 57.400, 58.000), stdev = 0.548
  CI (99.9%): [287.000, 287.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  155.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 31.000, 33.000), stdev = 1.581
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 74.67% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 12994.610 ops/ms
# Warmup Iteration   2: 13233.530 ops/ms
# Warmup Iteration   3: 13072.472 ops/ms
Iteration   1: 13078.449 ops/ms
                 ·gc.alloc.rate:                   3230.808 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.323 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.538 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         32.000 ms

Iteration   2: 13080.617 ops/ms
                 ·gc.alloc.rate:                   3231.325 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.344 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.497 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         34.000 ms

Iteration   3: 13072.209 ops/ms
                 ·gc.alloc.rate:                   3229.256 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.700 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     275.417 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         36.000 ms

Iteration   4: 13082.379 ops/ms
                 ·gc.alloc.rate:                   3231.755 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.317 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.458 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         33.000 ms

Iteration   5: 13071.656 ops/ms
                 ·gc.alloc.rate:                   3229.093 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.307 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.680 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         28.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13077.062 ±(99.9%) 18.826 ops/ms [Average]
  (min, avg, max) = (13071.656, 13077.062, 13082.379), stdev = 4.889
  CI (99.9%): [13058.236, 13095.888] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3230.447 ±(99.9%) 4.663 MB/sec [Average]
  (min, avg, max) = (3229.093, 3230.447, 3231.755), stdev = 1.211
  CI (99.9%): [3225.784, 3235.110] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3224.598 ±(99.9%) 97.085 MB/sec [Average]
  (min, avg, max) = (3213.307, 3224.598, 3269.700), stdev = 25.213
  CI (99.9%): [3127.514, 3321.683] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.518 ±(99.9%) 8.399 B/op [Average]
  (min, avg, max) = (270.458, 271.518, 275.417), stdev = 2.181
  CI (99.9%): [263.119, 279.917] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  286.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (57.000, 57.200, 58.000), stdev = 0.447
  CI (99.9%): [286.000, 286.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  163.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 32.600, 36.000), stdev = 2.966
  CI (99.9%): [163.000, 163.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 76.00% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 1797.605 ops/ms
# Warmup Iteration   2: 1816.696 ops/ms
# Warmup Iteration   3: 1821.612 ops/ms
Iteration   1: 1817.158 ops/ms
                 ·gc.alloc.rate:                   3406.361 MB/sec
                 ·gc.alloc.rate.norm:              2064.079 B/op
                 ·gc.churn.G1_Eden_Space:          3438.863 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2083.773 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         31.000 ms

Iteration   2: 1818.761 ops/ms
                 ·gc.alloc.rate:                   3409.348 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3382.483 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2047.813 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        60.000 counts
                 ·gc.time:                         32.000 ms

Iteration   3: 1817.885 ops/ms
                 ·gc.alloc.rate:                   3407.677 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3438.801 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2082.930 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         34.000 ms

Iteration   4: 1818.843 ops/ms
                 ·gc.alloc.rate:                   3409.459 MB/sec
                 ·gc.alloc.rate.norm:              2064.076 B/op
                 ·gc.churn.G1_Eden_Space:          3382.419 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2047.706 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        60.000 counts
                 ·gc.time:                         33.000 ms

Iteration   5: 1816.004 ops/ms
                 ·gc.alloc.rate:                   3404.158 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3438.817 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2085.093 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         37.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  1817.730 ±(99.9%) 4.569 ops/ms [Average]
  (min, avg, max) = (1816.004, 1817.730, 1818.843), stdev = 1.187
  CI (99.9%): [1813.161, 1822.299] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3407.401 ±(99.9%) 8.545 MB/sec [Average]
  (min, avg, max) = (3404.158, 3407.401, 3409.459), stdev = 2.219
  CI (99.9%): [3398.856, 3415.946] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.078 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (2064.076, 2064.078, 2064.079), stdev = 0.001
  CI (99.9%): [2064.074, 2064.082] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3416.276 ±(99.9%) 118.902 MB/sec [Average]
  (min, avg, max) = (3382.419, 3416.276, 3438.863), stdev = 30.879
  CI (99.9%): [3297.374, 3535.179] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2069.463 ±(99.9%) 76.349 B/op [Average]
  (min, avg, max) = (2047.706, 2069.463, 2085.093), stdev = 19.828
  CI (99.9%): [1993.114, 2145.812] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.002 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  303.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (60.000, 60.600, 61.000), stdev = 0.548
  CI (99.9%): [303.000, 303.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  167.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (31.000, 33.400, 37.000), stdev = 2.302
  CI (99.9%): [167.000, 167.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 77.33% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 3742.452 ops/ms
# Warmup Iteration   2: 3797.001 ops/ms
# Warmup Iteration   3: 3855.525 ops/ms
Iteration   1: 3861.321 ops/ms
                 ·gc.alloc.rate:                   7238.127 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7231.184 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2062.071 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         50.000 ms

Iteration   2: 3860.240 ops/ms
                 ·gc.alloc.rate:                   7236.082 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7231.211 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2062.661 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         47.000 ms

Iteration   3: 3857.977 ops/ms
                 ·gc.alloc.rate:                   7231.811 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7231.109 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.850 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         46.000 ms

Iteration   4: 3858.073 ops/ms
                 ·gc.alloc.rate:                   7231.805 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7230.922 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.798 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         49.000 ms

Iteration   5: 3859.005 ops/ms
                 ·gc.alloc.rate:                   7233.620 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7317.090 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2087.868 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         44.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3859.323 ±(99.9%) 5.550 ops/ms [Average]
  (min, avg, max) = (3857.977, 3859.323, 3861.321), stdev = 1.441
  CI (99.9%): [3853.773, 3864.873] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7234.289 ±(99.9%) 10.668 MB/sec [Average]
  (min, avg, max) = (7231.805, 7234.289, 7238.127), stdev = 2.770
  CI (99.9%): [7223.621, 7244.957] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.050 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.050, 2064.050, 2064.051), stdev = 0.001
  CI (99.9%): [2064.049, 2064.052] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7248.303 ±(99.9%) 148.070 MB/sec [Average]
  (min, avg, max) = (7230.922, 7248.303, 7317.090), stdev = 38.453
  CI (99.9%): [7100.233, 7396.373] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2068.050 ±(99.9%) 42.761 B/op [Average]
  (min, avg, max) = (2062.071, 2068.050, 2087.868), stdev = 11.105
  CI (99.9%): [2025.288, 2110.811] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.010 MB/sec [Average]
  (min, avg, max) = (0.002, 0.005, 0.008), stdev = 0.003
  CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  421.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (84.000, 84.200, 85.000), stdev = 0.447
  CI (99.9%): [421.000, 421.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  236.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (44.000, 47.200, 50.000), stdev = 2.387
  CI (99.9%): [236.000, 236.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 78.67% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 3742.378 ops/ms
# Warmup Iteration   2: 3791.097 ops/ms
# Warmup Iteration   3: 3844.608 ops/ms
Iteration   1: 3847.867 ops/ms
                 ·gc.alloc.rate:                   7212.914 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7208.281 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2062.725 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        83.000 counts
                 ·gc.time:                         45.000 ms

Iteration   2: 3846.547 ops/ms
                 ·gc.alloc.rate:                   7210.441 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7208.363 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.455 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        83.000 counts
                 ·gc.time:                         46.000 ms

Iteration   3: 3846.314 ops/ms
                 ·gc.alloc.rate:                   7209.942 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7208.251 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.566 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        83.000 counts
                 ·gc.time:                         48.000 ms

Iteration   4: 3853.435 ops/ms
                 ·gc.alloc.rate:                   7223.257 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7208.216 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2059.752 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        83.000 counts
                 ·gc.time:                         44.000 ms

Iteration   5: 3842.993 ops/ms
                 ·gc.alloc.rate:                   7203.665 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7208.186 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2065.345 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        83.000 counts
                 ·gc.time:                         46.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3847.431 ±(99.9%) 14.659 ops/ms [Average]
  (min, avg, max) = (3842.993, 3847.431, 3853.435), stdev = 3.807
  CI (99.9%): [3832.773, 3862.090] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7212.044 ±(99.9%) 27.478 MB/sec [Average]
  (min, avg, max) = (7203.665, 7212.044, 7223.257), stdev = 7.136
  CI (99.9%): [7184.565, 7239.522] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.050 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.050, 2064.050, 2064.051), stdev = 0.001
  CI (99.9%): [2064.049, 2064.051] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7208.259 ±(99.9%) 0.262 MB/sec [Average]
  (min, avg, max) = (7208.186, 7208.259, 7208.363), stdev = 0.068
  CI (99.9%): [7207.997, 7208.522] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2062.968 ±(99.9%) 7.856 B/op [Average]
  (min, avg, max) = (2059.752, 2062.968, 2065.345), stdev = 2.040
  CI (99.9%): [2055.112, 2070.825] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  415.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (83.000, 83.000, 83.000), stdev = 0.001
  CI (99.9%): [415.000, 415.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  229.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (44.000, 45.800, 48.000), stdev = 1.483
  CI (99.9%): [229.000, 229.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 80.00% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.252 ops/ms
# Warmup Iteration   2: 2.251 ops/ms
# Warmup Iteration   3: 2.261 ops/ms
Iteration   1: 2.269 ops/ms
                 ·gc.alloc.rate:               33.798 MB/sec
                 ·gc.alloc.rate.norm:          16401.190 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27355.764 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   2: 2.269 ops/ms
                 ·gc.alloc.rate:      33.797 MB/sec
                 ·gc.alloc.rate.norm: 16400.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.281 ops/ms
                 ·gc.alloc.rate:               33.976 MB/sec
                 ·gc.alloc.rate.norm:          16401.183 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27213.055 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 2.278 ops/ms
                 ·gc.alloc.rate:      33.930 MB/sec
                 ·gc.alloc.rate.norm: 16400.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.278 ops/ms
                 ·gc.alloc.rate:                   33.928 MB/sec
                 ·gc.alloc.rate.norm:              16401.188 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     27251.284 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1.046 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  2.275 ±(99.9%) 0.021 ops/ms [Average]
  (min, avg, max) = (2.269, 2.275, 2.281), stdev = 0.006
  CI (99.9%): [2.254, 2.296] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  33.886 ±(99.9%) 0.319 MB/sec [Average]
  (min, avg, max) = (33.797, 33.886, 33.976), stdev = 0.083
  CI (99.9%): [33.566, 34.205] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.721 ±(99.9%) 2.459 B/op [Average]
  (min, avg, max) = (16400.019, 16400.721, 16401.190), stdev = 0.639
  CI (99.9%): [16398.261, 16403.180] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  33.824 ±(99.9%) 118.895 MB/sec [Average]
  (min, avg, max) = (≈ 0, 33.824, 56.373), stdev = 30.877
  CI (99.9%): [≈ 0, 152.718] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16364.020 ±(99.9%) 57522.189 B/op [Average]
  (min, avg, max) = (≈ 0, 16364.020, 27355.764), stdev = 14938.330
  CI (99.9%): [≈ 0, 73886.210] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻³ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.209 ±(99.9%) 1.801 B/op [Average]
  (min, avg, max) = (≈ 0, 0.209, 1.046), stdev = 0.468
  CI (99.9%): [≈ 0, 2.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  3.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 81.33% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 7.044 ops/ms
# Warmup Iteration   2: 7.148 ops/ms
# Warmup Iteration   3: 7.166 ops/ms
Iteration   1: 7.145 ops/ms
                 ·gc.alloc.rate:                   106.428 MB/sec
                 ·gc.alloc.rate.norm:              16400.747 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17374.281 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.265 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 7.152 ops/ms
                 ·gc.alloc.rate:                   106.519 MB/sec
                 ·gc.alloc.rate.norm:              16400.746 B/op
                 ·gc.churn.G1_Eden_Space:          112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17359.704 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.007 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 7.144 ops/ms
                 ·gc.alloc.rate:                   106.404 MB/sec
                 ·gc.alloc.rate.norm:              16400.747 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17378.172 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.083 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         4.000 ms

Iteration   4: 7.144 ops/ms
                 ·gc.alloc.rate:               106.398 MB/sec
                 ·gc.alloc.rate.norm:          16400.378 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 8689.329 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   5: 7.143 ops/ms
                 ·gc.alloc.rate:                   106.395 MB/sec
                 ·gc.alloc.rate.norm:              16401.230 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17380.118 B/op
                 ·gc.churn.G1_Survivor_Space:      0.340 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 52.355 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  7.146 ±(99.9%) 0.013 ops/ms [Average]
  (min, avg, max) = (7.143, 7.146, 7.152), stdev = 0.003
  CI (99.9%): [7.132, 7.159] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  106.429 ±(99.9%) 0.201 MB/sec [Average]
  (min, avg, max) = (106.395, 106.429, 106.519), stdev = 0.052
  CI (99.9%): [106.228, 106.630] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.770 ±(99.9%) 1.167 B/op [Average]
  (min, avg, max) = (16400.378, 16400.770, 16401.230), stdev = 0.303
  CI (99.9%): [16399.603, 16401.936] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  101.471 ±(99.9%) 97.078 MB/sec [Average]
  (min, avg, max) = (56.373, 101.471, 112.748), stdev = 25.211
  CI (99.9%): [4.393, 198.549] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  15636.321 ±(99.9%) 14953.955 B/op [Average]
  (min, avg, max) = (8689.329, 15636.321, 17380.118), stdev = 3883.495
  CI (99.9%): [682.366, 30590.276] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.068 ±(99.9%) 0.584 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.068, 0.340), stdev = 0.152
  CI (99.9%): [≈ 0, 0.652] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  10.542 ±(99.9%) 90.007 B/op [Average]
  (min, avg, max) = (≈ 0, 10.542, 52.355), stdev = 23.374
  CI (99.9%): [≈ 0, 100.549] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  9.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.095
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 82.67% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 9.069 ops/ms
# Warmup Iteration   2: 9.293 ops/ms
# Warmup Iteration   3: 9.310 ops/ms
Iteration   1: 9.296 ops/ms
                 ·gc.alloc.rate:               138.450 MB/sec
                 ·gc.alloc.rate.norm:          16400.573 B/op
                 ·gc.churn.G1_Eden_Space:      112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 13355.644 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     4.000 ms

Iteration   2: 9.307 ops/ms
                 ·gc.alloc.rate:                   138.627 MB/sec
                 ·gc.alloc.rate.norm:              16400.574 B/op
                 ·gc.churn.G1_Eden_Space:          112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13338.856 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.279 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 9.301 ops/ms
                 ·gc.alloc.rate:                   138.541 MB/sec
                 ·gc.alloc.rate.norm:              16401.227 B/op
                 ·gc.churn.G1_Eden_Space:          169.117 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     20020.975 B/op
                 ·gc.churn.G1_Survivor_Space:      0.343 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 40.633 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         4.000 ms

Iteration   4: 9.252 ops/ms
                 ·gc.alloc.rate:                   137.804 MB/sec
                 ·gc.alloc.rate.norm:              16400.576 B/op
                 ·gc.churn.G1_Eden_Space:          112.744 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13418.146 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.043 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 9.220 ops/ms
                 ·gc.alloc.rate:                   137.322 MB/sec
                 ·gc.alloc.rate.norm:              16400.864 B/op
                 ·gc.churn.G1_Eden_Space:          169.120 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     20198.605 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.731 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  9.275 ±(99.9%) 0.146 ops/ms [Average]
  (min, avg, max) = (9.220, 9.275, 9.307), stdev = 0.038
  CI (99.9%): [9.129, 9.421] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  138.149 ±(99.9%) 2.174 MB/sec [Average]
  (min, avg, max) = (137.322, 138.149, 138.627), stdev = 0.565
  CI (99.9%): [135.974, 140.323] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.763 ±(99.9%) 1.110 B/op [Average]
  (min, avg, max) = (16400.573, 16400.763, 16401.227), stdev = 0.288
  CI (99.9%): [16399.653, 16401.873] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  135.295 ±(99.9%) 118.894 MB/sec [Average]
  (min, avg, max) = (112.744, 135.295, 169.120), stdev = 30.877
  CI (99.9%): [16.400, 254.189] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16066.445 ±(99.9%) 14215.439 B/op [Average]
  (min, avg, max) = (13338.856, 16066.445, 20198.605), stdev = 3691.704
  CI (99.9%): [1851.007, 30281.884] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.070 ±(99.9%) 0.587 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.070, 0.343), stdev = 0.153
  CI (99.9%): [≈ 0, 0.658] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  8.337 ±(99.9%) 69.528 B/op [Average]
  (min, avg, max) = (≈ 0, 8.337, 40.633), stdev = 18.056
  CI (99.9%): [≈ 0, 77.865] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  12.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 84.00% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 71820.375 ops/ms
# Warmup Iteration   2: 70799.046 ops/ms
# Warmup Iteration   3: 76675.181 ops/ms
Iteration   1: 76536.653 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76670.185 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76469.759 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76714.515 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76703.983 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76619.019 ±(99.9%) 421.900 ops/ms [Average]
  (min, avg, max) = (76469.759, 76619.019, 76714.515), stdev = 109.566
  CI (99.9%): [76197.119, 77040.919] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 85.33% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 72803.434 ops/ms
# Warmup Iteration   2: 73659.926 ops/ms
# Warmup Iteration   3: 76890.537 ops/ms
Iteration   1: 76791.967 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76935.261 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76851.997 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76779.420 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76746.000 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76820.929 ±(99.9%) 286.952 ops/ms [Average]
  (min, avg, max) = (76746.000, 76820.929, 76935.261), stdev = 74.520
  CI (99.9%): [76533.977, 77107.881] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 86.67% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 71822.367 ops/ms
# Warmup Iteration   2: 70794.914 ops/ms
# Warmup Iteration   3: 76773.952 ops/ms
Iteration   1: 76766.304 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76712.371 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76793.959 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76790.055 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76563.796 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76725.297 ±(99.9%) 369.539 ops/ms [Average]
  (min, avg, max) = (76563.796, 76725.297, 76793.959), stdev = 95.968
  CI (99.9%): [76355.758, 77094.836] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 88.00% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 9092.503 ops/ms
# Warmup Iteration   2: 8824.776 ops/ms
# Warmup Iteration   3: 9221.495 ops/ms
Iteration   1: 9232.950 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9222.890 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9226.358 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9228.133 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9230.248 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9228.116 ±(99.9%) 14.703 ops/ms [Average]
  (min, avg, max) = (9222.890, 9228.116, 9232.950), stdev = 3.818
  CI (99.9%): [9213.413, 9242.818] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 89.33% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 35011.676 ops/ms
# Warmup Iteration   2: 35136.251 ops/ms
# Warmup Iteration   3: 34969.334 ops/ms
Iteration   1: 35607.548 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35613.492 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35590.806 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35618.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35066.981 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  35499.460 ±(99.9%) 931.810 ops/ms [Average]
  (min, avg, max) = (35066.981, 35499.460, 35618.475), stdev = 241.988
  CI (99.9%): [34567.651, 36431.270] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 90.67% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 35338.296 ops/ms
# Warmup Iteration   2: 35338.009 ops/ms
# Warmup Iteration   3: 35810.068 ops/ms
Iteration   1: 35046.490 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 35805.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 35801.000 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 35048.557 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 35801.800 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  35500.679 ±(99.9%) 1592.923 ops/ms [Average]
  (min, avg, max) = (35046.490, 35500.679, 35805.549), stdev = 413.677
  CI (99.9%): [33907.756, 37093.602] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 92.00% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9.428 ops/ms
# Warmup Iteration   2: 9.420 ops/ms
# Warmup Iteration   3: 9.492 ops/ms
Iteration   1: 9.494 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.499 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.496 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.495 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.495 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.496 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (9.494, 9.496, 9.499), stdev = 0.002
  CI (99.9%): [9.490, 9.502] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.005 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 93.33% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16.482 ops/ms
# Warmup Iteration   2: 16.521 ops/ms
# Warmup Iteration   3: 16.561 ops/ms
Iteration   1: 16.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.544 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.570 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.553 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.554 ±(99.9%) 0.038 ops/ms [Average]
  (min, avg, max) = (16.544, 16.554, 16.570), stdev = 0.010
  CI (99.9%): [16.516, 16.592] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 94.67% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: 18.751 ops/ms
# Warmup Iteration   2: 18.771 ops/ms
# Warmup Iteration   3: 18.763 ops/ms
Iteration   1: 18.765 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.772 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.784 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.776 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.759 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  18.771 ±(99.9%) 0.037 ops/ms [Average]
  (min, avg, max) = (18.759, 18.771, 18.784), stdev = 0.010
  CI (99.9%): [18.734, 18.808] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 128)

# Run progress: 96.00% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 4632.632 ops/ms
# Warmup Iteration   2: 4538.717 ops/ms
# Warmup Iteration   3: 4524.473 ops/ms
Iteration   1: 4513.638 ops/ms
                 ·gc.alloc.rate:                   1780.159 MB/sec
                 ·gc.alloc.rate.norm:              434.266 B/op
                 ·gc.churn.G1_Eden_Space:          1804.026 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     440.088 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         27.000 ms

Iteration   2: 4533.181 ops/ms
                 ·gc.alloc.rate:                   1787.872 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1804.039 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.192 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   3: 4529.841 ops/ms
                 ·gc.alloc.rate:                   1786.486 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1747.581 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     424.807 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         15.000 ms

Iteration   4: 4529.795 ops/ms
                 ·gc.alloc.rate:                   1786.486 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1803.967 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.514 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   5: 4532.330 ops/ms
                 ·gc.alloc.rate:                   1787.490 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1803.970 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.269 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         17.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4527.757 ±(99.9%) 30.936 ops/ms [Average]
  (min, avg, max) = (4513.638, 4527.757, 4533.181), stdev = 8.034
  CI (99.9%): [4496.821, 4558.693] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1785.699 ±(99.9%) 12.155 MB/sec [Average]
  (min, avg, max) = (1780.159, 1785.699, 1787.872), stdev = 3.157
  CI (99.9%): [1773.544, 1797.854] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  434.265 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (434.265, 434.265, 434.266), stdev = 0.001
  CI (99.9%): [434.263, 434.267] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1792.717 ±(99.9%) 97.159 MB/sec [Average]
  (min, avg, max) = (1747.581, 1792.717, 1804.039), stdev = 25.232
  CI (99.9%): [1695.558, 1889.876] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  435.974 ±(99.9%) 24.221 B/op [Average]
  (min, avg, max) = (424.807, 435.974, 440.088), stdev = 6.290
  CI (99.9%): [411.754, 460.195] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  159.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.800, 32.000), stdev = 0.447
  CI (99.9%): [159.000, 159.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  97.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (15.000, 19.400, 27.000), stdev = 4.561
  CI (99.9%): [97.000, 97.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1024)

# Run progress: 97.33% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 4656.619 ops/ms
# Warmup Iteration   2: 4568.032 ops/ms
# Warmup Iteration   3: 4533.733 ops/ms
Iteration   1: 4534.354 ops/ms
                 ·gc.alloc.rate:                   1781.090 MB/sec
                 ·gc.alloc.rate.norm:              432.518 B/op
                 ·gc.churn.G1_Eden_Space:          1803.966 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.073 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   2: 4532.295 ops/ms
                 ·gc.alloc.rate:                   1780.305 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1747.639 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     424.580 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         20.000 ms

Iteration   3: 4533.822 ops/ms
                 ·gc.alloc.rate:                   1780.857 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1803.956 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.127 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 4532.654 ops/ms
                 ·gc.alloc.rate:                   1780.420 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1803.967 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.237 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   5: 4534.925 ops/ms
                 ·gc.alloc.rate:                   1781.299 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1747.585 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     424.330 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         22.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4533.610 ±(99.9%) 4.293 ops/ms [Average]
  (min, avg, max) = (4532.295, 4533.610, 4534.925), stdev = 1.115
  CI (99.9%): [4529.317, 4537.903] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1780.794 ±(99.9%) 1.639 MB/sec [Average]
  (min, avg, max) = (1780.305, 1780.794, 1781.299), stdev = 0.426
  CI (99.9%): [1779.155, 1782.433] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.517 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.516, 432.517, 432.518), stdev = 0.001
  CI (99.9%): [432.514, 432.519] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1781.422 ±(99.9%) 118.849 MB/sec [Average]
  (min, avg, max) = (1747.585, 1781.422, 1803.967), stdev = 30.865
  CI (99.9%): [1662.573, 1900.271] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  432.669 ±(99.9%) 28.877 B/op [Average]
  (min, avg, max) = (424.330, 432.669, 438.237), stdev = 7.499
  CI (99.9%): [403.792, 461.546] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  158.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.600, 32.000), stdev = 0.548
  CI (99.9%): [158.000, 158.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  98.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 19.600, 22.000), stdev = 1.673
  CI (99.9%): [98.000, 98.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1048576)

# Run progress: 98.67% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 5254.225 ops/ms
# Warmup Iteration   2: 5142.619 ops/ms
# Warmup Iteration   3: 5112.802 ops/ms
Iteration   1: 5110.132 ops/ms
                 ·gc.alloc.rate:                   2006.242 MB/sec
                 ·gc.alloc.rate.norm:              432.299 B/op
                 ·gc.churn.G1_Eden_Space:          2029.459 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     437.302 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         21.000 ms

Iteration   2: 5109.391 ops/ms
                 ·gc.alloc.rate:                   2005.978 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          2029.508 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     437.369 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         23.000 ms

Iteration   3: 5111.715 ops/ms
                 ·gc.alloc.rate:                   2006.858 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.092 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     425.024 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         18.000 ms

Iteration   4: 5107.967 ops/ms
                 ·gc.alloc.rate:                   2005.375 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          2029.449 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     437.487 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         21.000 ms

Iteration   5: 5117.842 ops/ms
                 ·gc.alloc.rate:                   2009.262 MB/sec
                 ·gc.alloc.rate.norm:              432.297 B/op
                 ·gc.churn.G1_Eden_Space:          1973.091 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     424.515 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         20.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5111.409 ±(99.9%) 14.792 ops/ms [Average]
  (min, avg, max) = (5107.967, 5111.409, 5117.842), stdev = 3.841
  CI (99.9%): [5096.617, 5126.201] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  2006.743 ±(99.9%) 5.797 MB/sec [Average]
  (min, avg, max) = (2005.375, 2006.743, 2009.262), stdev = 1.506
  CI (99.9%): [2000.946, 2012.540] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.298 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.297, 432.298, 432.299), stdev = 0.001
  CI (99.9%): [432.296, 432.300] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  2006.920 ±(99.9%) 118.912 MB/sec [Average]
  (min, avg, max) = (1973.091, 2006.920, 2029.508), stdev = 30.881
  CI (99.9%): [1888.007, 2125.832] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  432.340 ±(99.9%) 26.620 B/op [Average]
  (min, avg, max) = (424.515, 432.340, 437.487), stdev = 6.913
  CI (99.9%): [405.720, 458.959] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.001, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  178.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 35.600, 36.000), stdev = 0.548
  CI (99.9%): [178.000, 178.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  103.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 20.600, 23.000), stdev = 1.817
  CI (99.9%): [103.000, 103.000] (assumes normal distribution)


# Run complete. Total time: 01:45:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (charsetName)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score        Error   Units
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII                 128             128  thrpt    5   5622.724 ±     14.249  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII                 128             128  thrpt    5   1674.958 ±      4.276  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII                 128             128  thrpt    5    328.013 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII                 128             128  thrpt    5   1668.674 ±    118.923  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII                 128             128  thrpt    5    326.780 ±     22.844    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII                 128             128  thrpt    5      0.002 ±      0.001  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII                 128             128  thrpt    5     ≈ 10⁻³                 B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII                 128             128  thrpt    5    148.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII                 128             128  thrpt    5     85.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII                 128            1024  thrpt    5   6859.268 ±     15.783  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII                 128            1024  thrpt    5   2043.311 ±      4.686  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII                 128            1024  thrpt    5    328.013 ±      0.002    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII                 128            1024  thrpt    5   2052.016 ±    118.875  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII                 128            1024  thrpt    5    329.412 ±     19.709    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII                 128            1024  thrpt    5      0.003 ±      0.002  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII                 128            1024  thrpt    5     ≈ 10⁻³                 B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII                 128            1024  thrpt    5    182.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII                 128            1024  thrpt    5    111.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII                 128         1048576  thrpt    5   6234.339 ±     17.270  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII                 128         1048576  thrpt    5   1857.133 ±      5.136  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII                 128         1048576  thrpt    5    328.013 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII                 128         1048576  thrpt    5   1860.324 ±      0.080  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII                 128         1048576  thrpt    5    328.576 ±      0.912    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII                 128         1048576  thrpt    5      0.003 ±      0.003  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻³                 B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII                 128         1048576  thrpt    5    165.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII                 128         1048576  thrpt    5    100.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII                1024             128  thrpt    5    929.125 ±      4.851  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII                1024             128  thrpt    5   1788.925 ±      9.257  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII                1024             128  thrpt    5   2120.082 ±      0.009    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII                1024             128  thrpt    5   1781.420 ±    118.989  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII                1024             128  thrpt    5   2111.218 ±    148.946    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII                1024             128  thrpt    5      0.003 ±      0.002  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII                1024             128  thrpt    5      0.003 ±      0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII                1024             128  thrpt    5    158.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII                1024             128  thrpt    5    108.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII                1024            1024  thrpt    5   1504.058 ±     15.665  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII                1024            1024  thrpt    5   2895.903 ±     30.191  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII                1024            1024  thrpt    5   2120.080 ±      0.006    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII                1024            1024  thrpt    5   2897.627 ±    118.869  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII                1024            1024  thrpt    5   2121.333 ±     79.476    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII                1024            1024  thrpt    5      0.004 ±      0.007  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII                1024            1024  thrpt    5      0.003 ±      0.005    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII                1024            1024  thrpt    5    257.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII                1024            1024  thrpt    5    151.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII                1024         1048576  thrpt    5   1459.716 ±      5.872  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII                1024         1048576  thrpt    5   2810.534 ±     11.294  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII                1024         1048576  thrpt    5   2120.080 ±      0.005    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII                1024         1048576  thrpt    5   2807.434 ±     97.088  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII                1024         1048576  thrpt    5   2117.734 ±     68.505    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII                1024         1048576  thrpt    5      0.003 ±      0.004  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII                1024         1048576  thrpt    5      0.003 ±      0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII                1024         1048576  thrpt    5    249.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII                1024         1048576  thrpt    5    147.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII             1048576             128  thrpt    5      1.015 ±      0.008  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII             1048576             128  thrpt    5     15.175 ±      0.113  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII             1048576             128  thrpt    5  16456.567 ±      4.514    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII             1048576             128  thrpt    5     11.274 ±     97.073  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII             1048576             128  thrpt    5  12246.143 ± 105442.985    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII             1048576             128  thrpt    5      1.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII             1048576             128  thrpt    5      2.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII             1048576            1024  thrpt    5      1.094 ±      0.003  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII             1048576            1024  thrpt    5     16.354 ±      0.049  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII             1048576            1024  thrpt    5  16457.011 ±      5.119    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII             1048576            1024  thrpt    5     22.548 ±    118.889  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII             1048576            1024  thrpt    5  22697.820 ± 119679.051    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII             1048576            1024  thrpt    5      2.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII             1048576            1024  thrpt    5      3.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII             1048576         1048576  thrpt    5      1.864 ±      0.016  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII             1048576         1048576  thrpt    5     27.855 ±      0.244  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII             1048576         1048576  thrpt    5  16456.594 ±      3.006    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII             1048576         1048576  thrpt    5     22.549 ±    118.892  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII             1048576         1048576  thrpt    5  13325.289 ±  70260.556    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII             1048576         1048576  thrpt    5      2.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII             1048576         1048576  thrpt    5      3.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1                 128             128  thrpt    5   5850.643 ±      7.541  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1                 128             128  thrpt    5   1742.841 ±      2.224  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1                 128             128  thrpt    5    328.013 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1                 128             128  thrpt    5   1747.585 ±      0.067  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1                 128             128  thrpt    5    328.906 ±      0.419    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1                 128             128  thrpt    5      0.003 ±      0.002  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1                 128             128  thrpt    5      0.001 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1                 128             128  thrpt    5    155.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1                 128             128  thrpt    5     94.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1                 128            1024  thrpt    5   6953.201 ±      6.844  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1                 128            1024  thrpt    5   2071.290 ±      2.054  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1                 128            1024  thrpt    5    328.013 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1                 128            1024  thrpt    5   2074.568 ±     97.107  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1                 128            1024  thrpt    5    328.532 ±     15.484    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1                 128            1024  thrpt    5      0.003 ±      0.003  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻³                 B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1                 128            1024  thrpt    5    184.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1                 128            1024  thrpt    5    130.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1                 128         1048576  thrpt    5   6300.637 ±     18.193  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1                 128         1048576  thrpt    5   1876.874 ±      5.396  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1                 128         1048576  thrpt    5    328.013 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1                 128         1048576  thrpt    5   1882.866 ±    118.884  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1                 128         1048576  thrpt    5    329.059 ±     20.497    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1                 128         1048576  thrpt    5      0.002 ±      0.001  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻³                 B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1                 128         1048576  thrpt    5    167.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1                 128         1048576  thrpt    5     93.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1                1024             128  thrpt    5    753.915 ±      1.281  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1                1024             128  thrpt    5   1451.570 ±      2.485  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1                1024             128  thrpt    5   2120.083 ±      0.011    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1                1024             128  thrpt    5   1443.168 ±    118.906  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1                1024             128  thrpt    5   2107.810 ±    173.211    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1                1024             128  thrpt    5      0.003 ±      0.004  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1                1024             128  thrpt    5      0.004 ±      0.005    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1                1024             128  thrpt    5    128.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1                1024             128  thrpt    5     85.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1                1024            1024  thrpt    5   1609.477 ±      3.890  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1                1024            1024  thrpt    5   3098.858 ±      7.468  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1                1024            1024  thrpt    5   2120.080 ±      0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1                1024            1024  thrpt    5   3100.575 ±      0.116  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1                1024            1024  thrpt    5   2121.255 ±      5.082    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1                1024            1024  thrpt    5      0.003 ±      0.004  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1                1024            1024  thrpt    5      0.002 ±      0.002    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1                1024            1024  thrpt    5    275.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1                1024            1024  thrpt    5    157.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1                1024         1048576  thrpt    5   1639.588 ±      7.435  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1                1024         1048576  thrpt    5   3156.821 ±     14.277  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1                1024         1048576  thrpt    5   2120.080 ±      0.004    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1                1024         1048576  thrpt    5   3156.922 ±      0.201  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1                1024         1048576  thrpt    5   2120.150 ±      9.617    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1                1024         1048576  thrpt    5      0.004 ±      0.003  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1                1024         1048576  thrpt    5      0.003 ±      0.002    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1                1024         1048576  thrpt    5    280.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1                1024         1048576  thrpt    5    161.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1             1048576             128  thrpt    5      0.999 ±      0.024  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1             1048576             128  thrpt    5     14.933 ±      0.363  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1             1048576             128  thrpt    5  16456.573 ±      4.557    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1             1048576             128  thrpt    5     11.274 ±     97.077  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1             1048576             128  thrpt    5  12338.640 ± 106239.414    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1             1048576             128  thrpt    5      0.086 ±      0.743    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1             1048576             128  thrpt    5      1.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1             1048576             128  thrpt    5      1.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1             1048576            1024  thrpt    5      1.378 ±      0.015  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1             1048576            1024  thrpt    5     20.588 ±      0.228  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1             1048576            1024  thrpt    5  16456.806 ±      4.070    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1             1048576            1024  thrpt    5     22.549 ±    118.894  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1             1048576            1024  thrpt    5  18050.041 ±  95173.488    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1             1048576            1024  thrpt    5      2.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1             1048576            1024  thrpt    5      4.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1             1048576         1048576  thrpt    5      2.260 ±      0.012  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1             1048576         1048576  thrpt    5     33.771 ±      0.186  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1             1048576         1048576  thrpt    5  16456.726 ±      2.481    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space              ISO-8859-1             1048576         1048576  thrpt    5     33.823 ±    118.893  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm         ISO-8859-1             1048576         1048576  thrpt    5  16487.841 ±  57957.212    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space          ISO-8859-1             1048576         1048576  thrpt    5      0.001 ±      0.007  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm     ISO-8859-1             1048576         1048576  thrpt    5      0.550 ±      3.483    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1             1048576         1048576  thrpt    5      3.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                             ISO-8859-1             1048576         1048576  thrpt    5      5.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8                 128             128  thrpt    5   5626.140 ±     22.642  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8                 128             128  thrpt    5   1675.976 ±      6.726  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8                 128             128  thrpt    5    328.013 ±      0.002    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8                 128             128  thrpt    5   1679.946 ±     97.087  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8                 128             128  thrpt    5    328.789 ±     18.564    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8                 128             128  thrpt    5      0.003 ±      0.003  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8                 128             128  thrpt    5      0.001 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8                 128             128  thrpt    5    149.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8                 128             128  thrpt    5    105.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8                 128            1024  thrpt    5   6315.707 ±     13.920  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8                 128            1024  thrpt    5   1881.386 ±      4.133  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8                 128            1024  thrpt    5    328.013 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8                 128            1024  thrpt    5   1882.890 ±    118.980  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8                 128            1024  thrpt    5    328.276 ±     21.148    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8                 128            1024  thrpt    5      0.002 ±      0.001  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8                 128            1024  thrpt    5     ≈ 10⁻³                 B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8                 128            1024  thrpt    5    167.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8                 128            1024  thrpt    5     97.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8                 128         1048576  thrpt    5   6094.519 ±     13.370  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8                 128         1048576  thrpt    5   1815.484 ±      3.938  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8                 128         1048576  thrpt    5    328.013 ±      0.002    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8                 128         1048576  thrpt    5   1815.229 ±     97.104  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8                 128         1048576  thrpt    5    327.967 ±     17.686    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8                 128         1048576  thrpt    5      0.003 ±      0.002  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8                 128         1048576  thrpt    5      0.001 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8                 128         1048576  thrpt    5    161.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8                 128         1048576  thrpt    5     95.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8                1024             128  thrpt    5   1060.492 ±      2.324  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8                1024             128  thrpt    5   2041.859 ±      4.476  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8                1024             128  thrpt    5   2120.081 ±      0.007    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8                1024             128  thrpt    5   2040.739 ±     97.107  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8                1024             128  thrpt    5   2118.930 ±    105.047    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8                1024             128  thrpt    5      0.003 ±      0.003  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8                1024             128  thrpt    5      0.003 ±      0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8                1024             128  thrpt    5    181.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8                1024             128  thrpt    5    111.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8                1024            1024  thrpt    5   1495.545 ±      4.834  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8                1024            1024  thrpt    5   2879.523 ±      9.263  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8                1024            1024  thrpt    5   2120.080 ±      0.005    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8                1024            1024  thrpt    5   2886.369 ±     97.033  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8                1024            1024  thrpt    5   2125.118 ±     69.765    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8                1024            1024  thrpt    5      0.004 ±      0.007  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8                1024            1024  thrpt    5      0.003 ±      0.005    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8                1024            1024  thrpt    5    256.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8                1024            1024  thrpt    5    151.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8                1024         1048576  thrpt    5    937.093 ±      1.787  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8                1024         1048576  thrpt    5   1804.261 ±      3.389  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8                1024         1048576  thrpt    5   2120.082 ±      0.008    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8                1024         1048576  thrpt    5   1803.956 ±      0.088  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8                1024         1048576  thrpt    5   2119.724 ±      4.073    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8                1024         1048576  thrpt    5      0.003 ±      0.001  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8                1024         1048576  thrpt    5      0.003 ±      0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8                1024         1048576  thrpt    5    160.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8                1024         1048576  thrpt    5     98.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8             1048576             128  thrpt    5      1.374 ±      0.017  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8             1048576             128  thrpt    5     20.540 ±      0.249  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8             1048576             128  thrpt    5  16456.806 ±      4.070    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8             1048576             128  thrpt    5     22.549 ±    118.893  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8             1048576             128  thrpt    5  18048.577 ±  95165.095    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8             1048576             128  thrpt    5      2.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8             1048576             128  thrpt    5      4.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8             1048576            1024  thrpt    5      1.999 ±      0.005  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8             1048576            1024  thrpt    5     29.874 ±      0.069  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8             1048576            1024  thrpt    5  16456.555 ±      2.803    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8             1048576            1024  thrpt    5     22.549 ±    118.893  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8             1048576            1024  thrpt    5  12423.526 ±  65505.666    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8             1048576            1024  thrpt    5     ≈ 10⁻³               MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8             1048576            1024  thrpt    5      0.258 ±      2.225    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8             1048576            1024  thrpt    5      2.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8             1048576            1024  thrpt    5      3.000                   ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8             1048576         1048576  thrpt    5      1.917 ±      0.021  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8             1048576         1048576  thrpt    5     28.648 ±      0.312  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8             1048576         1048576  thrpt    5  16456.579 ±      2.926    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8             1048576         1048576  thrpt    5     22.548 ±    118.891  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8             1048576         1048576  thrpt    5  12956.800 ±  68317.764    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8             1048576         1048576  thrpt    5      0.001 ±      0.010  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8             1048576         1048576  thrpt    5      0.694 ±      5.975    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8             1048576         1048576  thrpt    5      2.000               counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8             1048576         1048576  thrpt    5      3.000                   ms
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII                 128             128  thrpt    5   9859.004 ±     10.007  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII                 128             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII                 128            1024  thrpt    5  12558.580 ±     23.175  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII                 128            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII                 128         1048576  thrpt    5  12306.318 ±     34.049  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII                 128         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII                1024             128  thrpt    5   1141.737 ±      2.165  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII                1024             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII                1024            1024  thrpt    5   2428.314 ±      4.857  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII                1024            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII                1024         1048576  thrpt    5   2380.906 ±      2.030  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII                1024         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII             1048576             128  thrpt    5      0.924 ±      0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII             1048576             128  thrpt    5      0.045 ±      0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII             1048576             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII             1048576            1024  thrpt    5      1.151 ±      0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII             1048576            1024  thrpt    5      0.038 ±      0.005    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII             1048576            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII             1048576         1048576  thrpt    5      1.555 ±      0.001  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII             1048576         1048576  thrpt    5      0.028 ±      0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII             1048576         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1                 128             128  thrpt    5  10974.234 ±     20.201  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1                 128             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1                 128            1024  thrpt    5  13648.073 ±     17.807  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1                 128            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1                 128         1048576  thrpt    5  15040.731 ±     40.545  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁶                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1                 128         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1                1024             128  thrpt    5   1130.630 ±      3.994  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1                1024             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1                1024            1024  thrpt    5   2734.492 ±      6.475  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1                1024            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1                1024         1048576  thrpt    5   2778.724 ±      4.847  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1                1024         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1             1048576             128  thrpt    5      1.092 ±      0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1             1048576             128  thrpt    5      0.039 ±      0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1             1048576             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1             1048576            1024  thrpt    5      1.495 ±      0.004  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1             1048576            1024  thrpt    5      0.030 ±      0.014    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1             1048576            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1             1048576         1048576  thrpt    5      1.550 ±      0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1             1048576         1048576  thrpt    5      0.028 ±      0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8                 128             128  thrpt    5  10121.010 ±     11.352  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8                 128             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8                 128            1024  thrpt    5  12019.847 ±     32.213  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8                 128            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8                 128         1048576  thrpt    5  11131.527 ±     32.739  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8                 128         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8                1024             128  thrpt    5   1554.733 ±     15.448  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8                1024             128  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8                1024             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8                1024            1024  thrpt    5   2415.821 ±      8.044  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8                1024            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8                1024         1048576  thrpt    5   2201.833 ±      8.530  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁵                 B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8                1024         1048576  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8             1048576             128  thrpt    5      1.605 ±      0.011  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8             1048576             128  thrpt    5      0.028 ±      0.013    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8             1048576             128  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8             1048576            1024  thrpt    5      2.473 ±      0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8             1048576            1024  thrpt    5      0.018 ±      0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8             1048576            1024  thrpt    5        ≈ 0               counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8             1048576         1048576  thrpt    5      2.374 ±      0.007  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8             1048576         1048576  thrpt    5      0.019 ±      0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8             1048576         1048576  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readDirectBuffer                                                        N/A                 128             128  thrpt    5  13274.635 ±     41.532  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A                 128             128  thrpt    5   3279.243 ±     10.346  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A                 128             128  thrpt    5    272.010 ±      0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A                 128             128  thrpt    5   3280.948 ±     97.025  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A                 128             128  thrpt    5    272.151 ±      7.515    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A                 128             128  thrpt    5      0.003 ±      0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A                 128             128  thrpt    5     ≈ 10⁻⁴                 B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A                 128             128  thrpt    5    291.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A                 128             128  thrpt    5    155.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A                 128            1024  thrpt    5  13095.083 ±     33.286  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A                 128            1024  thrpt    5   3234.871 ±      8.218  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A                 128            1024  thrpt    5    272.010 ±      0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A                 128            1024  thrpt    5   3235.852 ±    118.796  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A                 128            1024  thrpt    5    272.093 ±     10.100    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A                 128            1024  thrpt    5      0.003 ±      0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴                 B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A                 128            1024  thrpt    5    287.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A                 128            1024  thrpt    5    155.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A                 128         1048576  thrpt    5  13077.062 ±     18.826  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A                 128         1048576  thrpt    5   3230.447 ±      4.663  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A                 128         1048576  thrpt    5    272.010 ±      0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A                 128         1048576  thrpt    5   3224.598 ±     97.085  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A                 128         1048576  thrpt    5    271.518 ±      8.399    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A                 128         1048576  thrpt    5      0.004 ±      0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A                 128         1048576  thrpt    5     ≈ 10⁻³                 B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A                 128         1048576  thrpt    5    286.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A                 128         1048576  thrpt    5    163.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A                1024             128  thrpt    5   1817.730 ±      4.569  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A                1024             128  thrpt    5   3407.401 ±      8.545  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A                1024             128  thrpt    5   2064.078 ±      0.004    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A                1024             128  thrpt    5   3416.276 ±    118.902  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A                1024             128  thrpt    5   2069.463 ±     76.349    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A                1024             128  thrpt    5      0.004 ±      0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A                1024             128  thrpt    5      0.002 ±      0.004    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A                1024             128  thrpt    5    303.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A                1024             128  thrpt    5    167.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A                1024            1024  thrpt    5   3859.323 ±      5.550  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A                1024            1024  thrpt    5   7234.289 ±     10.668  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A                1024            1024  thrpt    5   2064.050 ±      0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A                1024            1024  thrpt    5   7248.303 ±    148.070  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A                1024            1024  thrpt    5   2068.050 ±     42.761    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A                1024            1024  thrpt    5      0.005 ±      0.010  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A                1024            1024  thrpt    5      0.001 ±      0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A                1024            1024  thrpt    5    421.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A                1024            1024  thrpt    5    236.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A                1024         1048576  thrpt    5   3847.431 ±     14.659  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A                1024         1048576  thrpt    5   7212.044 ±     27.478  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A                1024         1048576  thrpt    5   2064.050 ±      0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A                1024         1048576  thrpt    5   7208.259 ±      0.262  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A                1024         1048576  thrpt    5   2062.968 ±      7.856    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A                1024         1048576  thrpt    5      0.004 ±      0.009  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A                1024         1048576  thrpt    5      0.001 ±      0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A                1024         1048576  thrpt    5    415.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A                1024         1048576  thrpt    5    229.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A             1048576             128  thrpt    5      2.275 ±      0.021  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A             1048576             128  thrpt    5     33.886 ±      0.319  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A             1048576             128  thrpt    5  16400.721 ±      2.459    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A             1048576             128  thrpt    5     33.824 ±    118.895  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A             1048576             128  thrpt    5  16364.020 ±  57522.189    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A             1048576             128  thrpt    5     ≈ 10⁻³               MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A             1048576             128  thrpt    5      0.209 ±      1.801    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A             1048576             128  thrpt    5      3.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A             1048576             128  thrpt    5      5.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A             1048576            1024  thrpt    5      7.146 ±      0.013  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A             1048576            1024  thrpt    5    106.429 ±      0.201  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A             1048576            1024  thrpt    5  16400.770 ±      1.167    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A             1048576            1024  thrpt    5    101.471 ±     97.078  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A             1048576            1024  thrpt    5  15636.321 ±  14953.955    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A             1048576            1024  thrpt    5      0.068 ±      0.584  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A             1048576            1024  thrpt    5     10.542 ±     90.007    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A             1048576            1024  thrpt    5      9.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A             1048576            1024  thrpt    5     14.000                   ms
ReaderBenchmarks.readDirectBuffer                                                        N/A             1048576         1048576  thrpt    5      9.275 ±      0.146  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A             1048576         1048576  thrpt    5    138.149 ±      2.174  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A             1048576         1048576  thrpt    5  16400.763 ±      1.110    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                                N/A             1048576         1048576  thrpt    5    135.295 ±    118.894  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                           N/A             1048576         1048576  thrpt    5  16066.445 ±  14215.439    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                            N/A             1048576         1048576  thrpt    5      0.070 ±      0.587  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm                       N/A             1048576         1048576  thrpt    5      8.337 ±     69.528    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A             1048576         1048576  thrpt    5     12.000               counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                               N/A             1048576         1048576  thrpt    5     16.000                   ms
ReaderBenchmarks.readHeapBuffer                                                          N/A                 128             128  thrpt    5  76619.019 ±    421.900  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A                 128             128  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A                 128             128  thrpt    5     ≈ 10⁻⁶                 B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A                 128             128  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A                 128            1024  thrpt    5  76820.929 ±    286.952  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A                 128            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A                 128            1024  thrpt    5     ≈ 10⁻⁶                 B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A                 128            1024  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A                 128         1048576  thrpt    5  76725.297 ±    369.539  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶                 B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A                 128         1048576  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A                1024             128  thrpt    5   9228.116 ±     14.703  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A                1024             128  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A                1024             128  thrpt    5     ≈ 10⁻⁵                 B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A                1024             128  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A                1024            1024  thrpt    5  35499.460 ±    931.810  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A                1024            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A                1024            1024  thrpt    5     ≈ 10⁻⁶                 B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A                1024            1024  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A                1024         1048576  thrpt    5  35500.679 ±   1592.923  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶                 B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A                1024         1048576  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A             1048576             128  thrpt    5      9.496 ±      0.006  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A             1048576             128  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A             1048576             128  thrpt    5      0.005 ±      0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A             1048576             128  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A             1048576            1024  thrpt    5     16.554 ±      0.038  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A             1048576            1024  thrpt    5      0.003 ±      0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A             1048576            1024  thrpt    5        ≈ 0               counts
ReaderBenchmarks.readHeapBuffer                                                          N/A             1048576         1048576  thrpt    5     18.771 ±      0.037  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴               MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A             1048576         1048576  thrpt    5      0.002 ±      0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A             1048576         1048576  thrpt    5        ≈ 0               counts
ScannerBenchmarks.scan                                                                   N/A                 N/A             128  thrpt    5   4527.757 ±     30.936  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                                    N/A                 N/A             128  thrpt    5   1785.699 ±     12.155  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                               N/A                 N/A             128  thrpt    5    434.265 ±      0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                           N/A                 N/A             128  thrpt    5   1792.717 ±     97.159  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                                      N/A                 N/A             128  thrpt    5    435.974 ±     24.221    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                                       N/A                 N/A             128  thrpt    5      0.002 ±      0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                                  N/A                 N/A             128  thrpt    5      0.001 ±      0.001    B/op
ScannerBenchmarks.scan:·gc.count                                                         N/A                 N/A             128  thrpt    5    159.000               counts
ScannerBenchmarks.scan:·gc.time                                                          N/A                 N/A             128  thrpt    5     97.000                   ms
ScannerBenchmarks.scan                                                                   N/A                 N/A            1024  thrpt    5   4533.610 ±      4.293  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                                    N/A                 N/A            1024  thrpt    5   1780.794 ±      1.639  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                               N/A                 N/A            1024  thrpt    5    432.517 ±      0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                           N/A                 N/A            1024  thrpt    5   1781.422 ±    118.849  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                                      N/A                 N/A            1024  thrpt    5    432.669 ±     28.877    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                                       N/A                 N/A            1024  thrpt    5      0.003 ±      0.003  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                                  N/A                 N/A            1024  thrpt    5      0.001 ±      0.001    B/op
ScannerBenchmarks.scan:·gc.count                                                         N/A                 N/A            1024  thrpt    5    158.000               counts
ScannerBenchmarks.scan:·gc.time                                                          N/A                 N/A            1024  thrpt    5     98.000                   ms
ScannerBenchmarks.scan                                                                   N/A                 N/A         1048576  thrpt    5   5111.409 ±     14.792  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                                    N/A                 N/A         1048576  thrpt    5   2006.743 ±      5.797  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                               N/A                 N/A         1048576  thrpt    5    432.298 ±      0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                           N/A                 N/A         1048576  thrpt    5   2006.920 ±    118.912  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                                      N/A                 N/A         1048576  thrpt    5    432.340 ±     26.620    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                                       N/A                 N/A         1048576  thrpt    5      0.003 ±      0.001  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                                  N/A                 N/A         1048576  thrpt    5      0.001 ±      0.001    B/op
ScannerBenchmarks.scan:·gc.count                                                         N/A                 N/A         1048576  thrpt    5    178.000               counts
ScannerBenchmarks.scan:·gc.time                                                          N/A                 N/A         1048576  thrpt    5    103.000                   ms

Benchmark result is saved to jmh-result.csv
