# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 3012.788 ops/ms
# Warmup Iteration   2: 3005.199 ops/ms
# Warmup Iteration   3: 3029.554 ops/ms
Iteration   1: 3026.761 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3028.026 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3026.857 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3023.010 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3025.438 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3026.018 ±(99.9%) 7.374 ops/ms [Average]
  (min, avg, max) = (3023.010, 3026.018, 3028.026), stdev = 1.915
  CI (99.9%): [3018.644, 3033.392] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 1.33% complete, ETA 01:43:55
# Fork: 1 of 1
# Warmup Iteration   1: 3057.420 ops/ms
# Warmup Iteration   2: 3008.121 ops/ms
# Warmup Iteration   3: 3107.433 ops/ms
Iteration   1: 3106.118 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3106.833 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3105.585 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3107.741 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3106.774 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3106.610 ±(99.9%) 3.134 ops/ms [Average]
  (min, avg, max) = (3105.585, 3106.610, 3107.741), stdev = 0.814
  CI (99.9%): [3103.477, 3109.744] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 2.67% complete, ETA 01:42:30
# Fork: 1 of 1
# Warmup Iteration   1: 2903.822 ops/ms
# Warmup Iteration   2: 2885.989 ops/ms
# Warmup Iteration   3: 2906.441 ops/ms
Iteration   1: 2908.405 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2908.449 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2907.068 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2908.377 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2905.405 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2907.541 ±(99.9%) 5.113 ops/ms [Average]
  (min, avg, max) = (2905.405, 2907.541, 2908.449), stdev = 1.328
  CI (99.9%): [2902.427, 2912.654] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 4.00% complete, ETA 01:41:05
# Fork: 1 of 1
# Warmup Iteration   1: 381.515 ops/ms
# Warmup Iteration   2: 383.158 ops/ms
# Warmup Iteration   3: 384.829 ops/ms
Iteration   1: 384.839 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 384.649 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 384.714 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 384.963 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 384.731 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  384.779 ±(99.9%) 0.475 ops/ms [Average]
  (min, avg, max) = (384.649, 384.779, 384.963), stdev = 0.123
  CI (99.9%): [384.304, 385.254] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 5.33% complete, ETA 01:39:41
# Fork: 1 of 1
# Warmup Iteration   1: 423.425 ops/ms
# Warmup Iteration   2: 424.442 ops/ms
# Warmup Iteration   3: 424.433 ops/ms
Iteration   1: 424.744 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 424.998 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 424.961 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 425.006 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 425.004 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  424.942 ±(99.9%) 0.433 ops/ms [Average]
  (min, avg, max) = (424.744, 424.942, 425.006), stdev = 0.112
  CI (99.9%): [424.510, 425.375] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 6.67% complete, ETA 01:38:17
# Fork: 1 of 1
# Warmup Iteration   1: 403.926 ops/ms
# Warmup Iteration   2: 404.946 ops/ms
# Warmup Iteration   3: 404.780 ops/ms
Iteration   1: 404.874 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 405.172 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 405.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 405.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 405.088 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  405.049 ±(99.9%) 0.431 ops/ms [Average]
  (min, avg, max) = (404.874, 405.049, 405.172), stdev = 0.112
  CI (99.9%): [404.618, 405.480] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 8.00% complete, ETA 01:36:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.382 ops/ms
# Warmup Iteration   2: 0.384 ops/ms
# Warmup Iteration   3: 0.384 ops/ms
Iteration   1: 0.383 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.383 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.384 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.383, 0.384, 0.384), stdev = 0.001
  CI (99.9%): [0.383, 0.384] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.110 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (0.106, 0.110, 0.115), stdev = 0.005
  CI (99.9%): [0.092, 0.127] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 9.33% complete, ETA 01:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 ops/ms
# Warmup Iteration   2: 0.418 ops/ms
# Warmup Iteration   3: 0.418 ops/ms
Iteration   1: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.418 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.418, 0.418, 0.418), stdev = 0.001
  CI (99.9%): [0.418, 0.419] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.099 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.097, 0.099, 0.105), stdev = 0.003
  CI (99.9%): [0.086, 0.112] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 10.67% complete, ETA 01:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 0.383 ops/ms
# Warmup Iteration   2: 0.373 ops/ms
# Warmup Iteration   3: 0.373 ops/ms
Iteration   1: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.126 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.126 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.374 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.373 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.373, 0.373, 0.374), stdev = 0.001
  CI (99.9%): [0.372, 0.375] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.118 ±(99.9%) 0.033 B/op [Average]
  (min, avg, max) = (0.109, 0.118, 0.126), stdev = 0.008
  CI (99.9%): [0.085, 0.151] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 12.00% complete, ETA 01:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 3106.154 ops/ms
# Warmup Iteration   2: 3057.029 ops/ms
# Warmup Iteration   3: 3102.385 ops/ms
Iteration   1: 3103.675 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3105.600 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3104.717 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3103.399 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3103.929 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3104.264 ±(99.9%) 3.442 ops/ms [Average]
  (min, avg, max) = (3103.399, 3104.264, 3105.600), stdev = 0.894
  CI (99.9%): [3100.822, 3107.706] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 13.33% complete, ETA 01:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 3219.518 ops/ms
# Warmup Iteration   2: 3193.664 ops/ms
# Warmup Iteration   3: 3281.170 ops/ms
Iteration   1: 3280.794 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3281.479 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3280.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3281.779 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3284.008 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3281.734 ±(99.9%) 5.232 ops/ms [Average]
  (min, avg, max) = (3280.610, 3281.734, 3284.008), stdev = 1.359
  CI (99.9%): [3276.501, 3286.966] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 14.67% complete, ETA 01:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 3068.095 ops/ms
# Warmup Iteration   2: 3084.616 ops/ms
# Warmup Iteration   3: 3112.193 ops/ms
Iteration   1: 3108.774 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3111.122 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3111.317 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3109.708 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3111.149 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3110.414 ±(99.9%) 4.324 ops/ms [Average]
  (min, avg, max) = (3108.774, 3110.414, 3111.317), stdev = 1.123
  CI (99.9%): [3106.090, 3114.738] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 16.00% complete, ETA 01:28:27
# Fork: 1 of 1
# Warmup Iteration   1: 402.558 ops/ms
# Warmup Iteration   2: 403.437 ops/ms
# Warmup Iteration   3: 403.630 ops/ms
Iteration   1: 403.630 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 403.581 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 403.645 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 403.425 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 403.561 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  403.568 ±(99.9%) 0.336 ops/ms [Average]
  (min, avg, max) = (403.425, 403.568, 403.645), stdev = 0.087
  CI (99.9%): [403.232, 403.905] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 17.33% complete, ETA 01:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 428.891 ops/ms
# Warmup Iteration   2: 429.254 ops/ms
# Warmup Iteration   3: 430.425 ops/ms
Iteration   1: 430.132 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 429.889 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 430.188 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 430.235 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 430.183 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  430.125 ±(99.9%) 0.528 ops/ms [Average]
  (min, avg, max) = (429.889, 430.125, 430.235), stdev = 0.137
  CI (99.9%): [429.598, 430.653] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 18.67% complete, ETA 01:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 456.436 ops/ms
# Warmup Iteration   2: 457.349 ops/ms
# Warmup Iteration   3: 458.334 ops/ms
Iteration   1: 458.283 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 458.588 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 458.656 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 458.708 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 458.726 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  458.592 ±(99.9%) 0.697 ops/ms [Average]
  (min, avg, max) = (458.283, 458.592, 458.726), stdev = 0.181
  CI (99.9%): [457.896, 459.289] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 20.00% complete, ETA 01:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.396 ops/ms
# Warmup Iteration   2: 0.397 ops/ms
# Warmup Iteration   3: 0.398 ops/ms
Iteration   1: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.119 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.397 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.397, 0.397, 0.398), stdev = 0.001
  CI (99.9%): [0.397, 0.398] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.109 ±(99.9%) 0.026 B/op [Average]
  (min, avg, max) = (0.103, 0.109, 0.119), stdev = 0.007
  CI (99.9%): [0.083, 0.135] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 21.33% complete, ETA 01:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 0.421 ops/ms
# Warmup Iteration   2: 0.421 ops/ms
# Warmup Iteration   3: 0.421 ops/ms
Iteration   1: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.421 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.421, 0.421, 0.421), stdev = 0.001
  CI (99.9%): [0.420, 0.422] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.103 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.097, 0.103, 0.105), stdev = 0.003
  CI (99.9%): [0.090, 0.116] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 22.67% complete, ETA 01:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.439 ops/ms
# Warmup Iteration   2: 0.435 ops/ms
# Warmup Iteration   3: 0.435 ops/ms
Iteration   1: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.435 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.435, 0.435, 0.435), stdev = 0.001
  CI (99.9%): [0.434, 0.436] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.098 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.094, 0.098, 0.101), stdev = 0.004
  CI (99.9%): [0.083, 0.114] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 24.00% complete, ETA 01:20:02
# Fork: 1 of 1
# Warmup Iteration   1: 3450.193 ops/ms
# Warmup Iteration   2: 3429.050 ops/ms
# Warmup Iteration   3: 3459.942 ops/ms
Iteration   1: 3458.829 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3460.063 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3460.871 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3459.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3460.808 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3459.989 ±(99.9%) 3.433 ops/ms [Average]
  (min, avg, max) = (3458.829, 3459.989, 3460.871), stdev = 0.892
  CI (99.9%): [3456.556, 3463.422] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 25.33% complete, ETA 01:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 3338.632 ops/ms
# Warmup Iteration   2: 3248.406 ops/ms
# Warmup Iteration   3: 3385.373 ops/ms
Iteration   1: 3386.456 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3388.824 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3389.059 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3387.192 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3385.220 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3387.350 ±(99.9%) 6.225 ops/ms [Average]
  (min, avg, max) = (3385.220, 3387.350, 3389.059), stdev = 1.617
  CI (99.9%): [3381.125, 3393.575] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 26.67% complete, ETA 01:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 3365.394 ops/ms
# Warmup Iteration   2: 3476.464 ops/ms
# Warmup Iteration   3: 3485.289 ops/ms
Iteration   1: 3486.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3486.152 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3482.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3483.111 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3486.820 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3484.980 ±(99.9%) 7.939 ops/ms [Average]
  (min, avg, max) = (3482.397, 3484.980, 3486.820), stdev = 2.062
  CI (99.9%): [3477.041, 3492.919] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 28.00% complete, ETA 01:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 447.525 ops/ms
# Warmup Iteration   2: 448.346 ops/ms
# Warmup Iteration   3: 448.297 ops/ms
Iteration   1: 448.061 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 448.097 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 448.223 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 448.172 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 448.111 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  448.133 ±(99.9%) 0.248 ops/ms [Average]
  (min, avg, max) = (448.061, 448.133, 448.223), stdev = 0.064
  CI (99.9%): [447.885, 448.381] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 29.33% complete, ETA 01:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 464.068 ops/ms
# Warmup Iteration   2: 465.330 ops/ms
# Warmup Iteration   3: 465.449 ops/ms
Iteration   1: 465.675 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 465.787 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 465.645 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 465.308 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 465.401 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  465.563 ±(99.9%) 0.772 ops/ms [Average]
  (min, avg, max) = (465.308, 465.563, 465.787), stdev = 0.200
  CI (99.9%): [464.792, 466.335] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 30.67% complete, ETA 01:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 462.356 ops/ms
# Warmup Iteration   2: 460.761 ops/ms
# Warmup Iteration   3: 464.876 ops/ms
Iteration   1: 465.016 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 464.857 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 464.881 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 464.776 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 465.237 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  464.954 ±(99.9%) 0.695 ops/ms [Average]
  (min, avg, max) = (464.776, 464.954, 465.237), stdev = 0.181
  CI (99.9%): [464.258, 465.649] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 32.00% complete, ETA 01:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.443 ops/ms
# Warmup Iteration   2: 0.444 ops/ms
# Warmup Iteration   3: 0.444 ops/ms
Iteration   1: 0.443 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.092 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.443 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.092 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.443 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.092 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.443 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.443 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.443 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.443, 0.443, 0.443), stdev = 0.001
  CI (99.9%): [0.443, 0.444] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.095 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.092, 0.095, 0.099), stdev = 0.004
  CI (99.9%): [0.080, 0.110] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 33.33% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.438 ops/ms
# Warmup Iteration   2: 0.439 ops/ms
# Warmup Iteration   3: 0.439 ops/ms
Iteration   1: 0.440 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.439 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.439, 0.439, 0.440), stdev = 0.001
  CI (99.9%): [0.438, 0.440] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.100 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (0.093, 0.100, 0.108), stdev = 0.007
  CI (99.9%): [0.072, 0.128] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 34.67% complete, ETA 01:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.471 ops/ms
# Warmup Iteration   2: 0.472 ops/ms
# Warmup Iteration   3: 0.473 ops/ms
Iteration   1: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.472 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.472, 0.472, 0.473), stdev = 0.001
  CI (99.9%): [0.471, 0.473] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.092 ±(99.9%) 0.022 B/op [Average]
  (min, avg, max) = (0.086, 0.092, 0.100), stdev = 0.006
  CI (99.9%): [0.070, 0.114] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 36.00% complete, ETA 01:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 9536.212 ops/ms
# Warmup Iteration   2: 9481.177 ops/ms
# Warmup Iteration   3: 9888.583 ops/ms
Iteration   1: 9891.278 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9887.955 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9888.907 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9885.226 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9891.728 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9889.019 ±(99.9%) 10.182 ops/ms [Average]
  (min, avg, max) = (9885.226, 9889.019, 9891.728), stdev = 2.644
  CI (99.9%): [9878.836, 9899.201] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 37.33% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 12422.355 ops/ms
# Warmup Iteration   2: 12152.953 ops/ms
# Warmup Iteration   3: 12476.426 ops/ms
Iteration   1: 12479.062 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12470.251 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12474.949 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12482.082 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12484.562 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12478.181 ±(99.9%) 21.954 ops/ms [Average]
  (min, avg, max) = (12470.251, 12478.181, 12484.562), stdev = 5.701
  CI (99.9%): [12456.227, 12500.136] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 38.67% complete, ETA 01:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 11843.761 ops/ms
# Warmup Iteration   2: 12023.916 ops/ms
# Warmup Iteration   3: 12270.101 ops/ms
Iteration   1: 12250.595 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12273.027 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12249.179 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12258.334 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12263.239 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12258.875 ±(99.9%) 37.639 ops/ms [Average]
  (min, avg, max) = (12249.179, 12258.875, 12273.027), stdev = 9.775
  CI (99.9%): [12221.235, 12296.514] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 40.00% complete, ETA 01:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 1139.910 ops/ms
# Warmup Iteration   2: 1141.448 ops/ms
# Warmup Iteration   3: 1143.980 ops/ms
Iteration   1: 1144.180 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1144.259 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1143.111 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1143.664 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1144.313 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1143.905 ±(99.9%) 1.979 ops/ms [Average]
  (min, avg, max) = (1143.111, 1143.905, 1144.313), stdev = 0.514
  CI (99.9%): [1141.927, 1145.884] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 41.33% complete, ETA 01:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 2419.815 ops/ms
# Warmup Iteration   2: 2415.945 ops/ms
# Warmup Iteration   3: 2433.941 ops/ms
Iteration   1: 2433.536 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2433.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2435.158 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2433.938 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2433.333 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2433.978 ±(99.9%) 2.728 ops/ms [Average]
  (min, avg, max) = (2433.333, 2433.978, 2435.158), stdev = 0.708
  CI (99.9%): [2431.250, 2436.706] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 42.67% complete, ETA 01:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 2286.438 ops/ms
# Warmup Iteration   2: 2288.530 ops/ms
# Warmup Iteration   3: 2301.936 ops/ms
Iteration   1: 2302.099 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2301.779 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2300.993 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2298.545 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2299.014 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2300.486 ±(99.9%) 6.228 ops/ms [Average]
  (min, avg, max) = (2298.545, 2300.486, 2302.099), stdev = 1.617
  CI (99.9%): [2294.258, 2306.714] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 44.00% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.922 ops/ms
# Warmup Iteration   2: 0.924 ops/ms
# Warmup Iteration   3: 0.924 ops/ms
Iteration   1: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.051 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.925 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.925 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  0.924 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (0.924, 0.924, 0.925), stdev = 0.001
  CI (99.9%): [0.922, 0.926] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.048 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.044, 0.048, 0.051), stdev = 0.002
  CI (99.9%): [0.038, 0.057] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 45.33% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.506 ops/ms
# Warmup Iteration   2: 1.509 ops/ms
# Warmup Iteration   3: 1.511 ops/ms
Iteration   1: 1.509 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.510 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.510 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.509 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.509 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.509 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.509, 1.509, 1.510), stdev = 0.001
  CI (99.9%): [1.507, 1.512] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.027, 0.029, 0.036), stdev = 0.004
  CI (99.9%): [0.014, 0.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 46.67% complete, ETA 00:56:09
# Fork: 1 of 1
# Warmup Iteration   1: 1.550 ops/ms
# Warmup Iteration   2: 1.555 ops/ms
# Warmup Iteration   3: 1.555 ops/ms
Iteration   1: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.556 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.555 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.555 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.554, 1.555, 1.556), stdev = 0.001
  CI (99.9%): [1.552, 1.557] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.017 B/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.037), stdev = 0.004
  CI (99.9%): [0.012, 0.047] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 48.00% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 10589.499 ops/ms
# Warmup Iteration   2: 10626.681 ops/ms
# Warmup Iteration   3: 10908.814 ops/ms
Iteration   1: 10908.982 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10914.278 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10916.484 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10914.257 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10914.052 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10913.610 ±(99.9%) 10.674 ops/ms [Average]
  (min, avg, max) = (10908.982, 10913.610, 10916.484), stdev = 2.772
  CI (99.9%): [10902.936, 10924.285] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 49.33% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 14035.090 ops/ms
# Warmup Iteration   2: 13806.848 ops/ms
# Warmup Iteration   3: 13884.727 ops/ms
Iteration   1: 13880.744 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13888.868 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13884.053 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13875.320 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13883.196 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13882.436 ±(99.9%) 19.066 ops/ms [Average]
  (min, avg, max) = (13875.320, 13882.436, 13888.868), stdev = 4.951
  CI (99.9%): [13863.370, 13901.502] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 50.67% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 13972.381 ops/ms
# Warmup Iteration   2: 14002.312 ops/ms
# Warmup Iteration   3: 14452.118 ops/ms
Iteration   1: 14445.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14450.672 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14456.656 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14457.313 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14455.728 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  14453.150 ±(99.9%) 19.514 ops/ms [Average]
  (min, avg, max) = (14445.384, 14453.150, 14457.313), stdev = 5.068
  CI (99.9%): [14433.636, 14472.665] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 52.00% complete, ETA 00:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 1166.614 ops/ms
# Warmup Iteration   2: 1169.228 ops/ms
# Warmup Iteration   3: 1169.010 ops/ms
Iteration   1: 1168.225 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1169.294 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1168.868 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1169.404 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1168.274 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1168.813 ±(99.9%) 2.127 ops/ms [Average]
  (min, avg, max) = (1168.225, 1168.813, 1169.404), stdev = 0.552
  CI (99.9%): [1166.686, 1170.940] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 53.33% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 2717.606 ops/ms
# Warmup Iteration   2: 2723.169 ops/ms
# Warmup Iteration   3: 2746.355 ops/ms
Iteration   1: 2746.348 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2746.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2743.574 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2743.553 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2744.392 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2744.858 ±(99.9%) 5.526 ops/ms [Average]
  (min, avg, max) = (2743.553, 2744.858, 2746.422), stdev = 1.435
  CI (99.9%): [2739.332, 2750.384] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 54.67% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 2719.976 ops/ms
# Warmup Iteration   2: 2767.836 ops/ms
# Warmup Iteration   3: 2771.726 ops/ms
Iteration   1: 2774.184 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2774.757 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2772.833 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2773.198 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2773.026 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2773.600 ±(99.9%) 3.198 ops/ms [Average]
  (min, avg, max) = (2772.833, 2773.600, 2774.757), stdev = 0.831
  CI (99.9%): [2770.402, 2776.798] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 56.00% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.088 ops/ms
# Warmup Iteration   2: 1.092 ops/ms
# Warmup Iteration   3: 1.092 ops/ms
Iteration   1: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.091 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.090 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.091 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.091 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.090, 1.091, 1.092), stdev = 0.001
  CI (99.9%): [1.088, 1.094] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.039 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.037, 0.039, 0.040), stdev = 0.002
  CI (99.9%): [0.032, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 57.33% complete, ETA 00:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.479 ops/ms
# Warmup Iteration   2: 1.484 ops/ms
# Warmup Iteration   3: 1.483 ops/ms
Iteration   1: 1.487 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.484 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.483 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.484 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.484 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.484 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.483, 1.484, 1.487), stdev = 0.002
  CI (99.9%): [1.478, 1.490] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (0.027, 0.030, 0.034), stdev = 0.003
  CI (99.9%): [0.020, 0.040] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 58.67% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.549 ops/ms
# Warmup Iteration   2: 1.553 ops/ms
# Warmup Iteration   3: 1.553 ops/ms
Iteration   1: 1.553 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.551 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.553 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (1.551, 1.553, 1.554), stdev = 0.001
  CI (99.9%): [1.549, 1.557] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.033), stdev = 0.003
  CI (99.9%): [0.020, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 60.00% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 10081.782 ops/ms
# Warmup Iteration   2: 9880.467 ops/ms
# Warmup Iteration   3: 10148.771 ops/ms
Iteration   1: 10143.594 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10149.978 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10144.617 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10145.877 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10146.465 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10146.106 ±(99.9%) 9.373 ops/ms [Average]
  (min, avg, max) = (10143.594, 10146.106, 10149.978), stdev = 2.434
  CI (99.9%): [10136.733, 10155.480] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 61.33% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 11417.255 ops/ms
# Warmup Iteration   2: 11634.128 ops/ms
# Warmup Iteration   3: 11915.641 ops/ms
Iteration   1: 11931.835 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11935.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11933.521 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11928.811 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11932.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11932.348 ±(99.9%) 8.890 ops/ms [Average]
  (min, avg, max) = (11928.811, 11932.348, 11935.019), stdev = 2.309
  CI (99.9%): [11923.458, 11941.239] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 62.67% complete, ETA 00:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 10276.369 ops/ms
# Warmup Iteration   2: 11117.568 ops/ms
# Warmup Iteration   3: 11115.928 ops/ms
Iteration   1: 11118.973 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11121.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11126.457 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11106.710 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11120.509 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11118.734 ±(99.9%) 28.076 ops/ms [Average]
  (min, avg, max) = (11106.710, 11118.734, 11126.457), stdev = 7.291
  CI (99.9%): [11090.658, 11146.810] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 64.00% complete, ETA 00:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 1575.452 ops/ms
# Warmup Iteration   2: 1578.833 ops/ms
# Warmup Iteration   3: 1548.087 ops/ms
Iteration   1: 1545.656 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1548.166 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1548.687 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1548.465 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1548.912 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1547.977 ±(99.9%) 5.108 ops/ms [Average]
  (min, avg, max) = (1545.656, 1547.977, 1548.912), stdev = 1.327
  CI (99.9%): [1542.869, 1553.085] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 65.33% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 2377.310 ops/ms
# Warmup Iteration   2: 2388.059 ops/ms
# Warmup Iteration   3: 2400.063 ops/ms
Iteration   1: 2403.137 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2402.203 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2401.348 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2402.602 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2400.975 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2402.053 ±(99.9%) 3.421 ops/ms [Average]
  (min, avg, max) = (2400.975, 2402.053, 2403.137), stdev = 0.888
  CI (99.9%): [2398.632, 2405.474] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 66.67% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 2200.843 ops/ms
# Warmup Iteration   2: 2201.150 ops/ms
# Warmup Iteration   3: 2207.117 ops/ms
Iteration   1: 2205.800 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2208.817 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2211.804 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2208.703 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2207.974 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2208.620 ±(99.9%) 8.293 ops/ms [Average]
  (min, avg, max) = (2205.800, 2208.620, 2211.804), stdev = 2.154
  CI (99.9%): [2200.327, 2216.913] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 68.00% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.607 ops/ms
# Warmup Iteration   2: 1.611 ops/ms
# Warmup Iteration   3: 1.610 ops/ms
Iteration   1: 1.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.611 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.611 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.610 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.610, 1.610, 1.611), stdev = 0.001
  CI (99.9%): [1.608, 1.613] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.028 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.025, 0.028, 0.032), stdev = 0.002
  CI (99.9%): [0.019, 0.037] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 69.33% complete, ETA 00:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 2.464 ops/ms
# Warmup Iteration   2: 2.473 ops/ms
# Warmup Iteration   3: 2.474 ops/ms
Iteration   1: 2.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.016 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.016 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.474 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (2.474, 2.474, 2.475), stdev = 0.001
  CI (99.9%): [2.472, 2.477] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.018 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.016, 0.018, 0.022), stdev = 0.002
  CI (99.9%): [0.009, 0.027] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 70.67% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.038 ops/ms
# Warmup Iteration   2: 2.045 ops/ms
# Warmup Iteration   3: 2.044 ops/ms
Iteration   1: 2.041 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.039 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.040 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.042 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.043 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.041 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (2.039, 2.041, 2.043), stdev = 0.002
  CI (99.9%): [2.035, 2.047] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.022 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.020, 0.022, 0.027), stdev = 0.003
  CI (99.9%): [0.012, 0.033] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 72.00% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 13004.741 ops/ms
# Warmup Iteration   2: 13155.002 ops/ms
# Warmup Iteration   3: 13276.937 ops/ms
Iteration   1: 13274.937 ops/ms
                 ·gc.alloc.rate:                   3279.348 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.705 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.210 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 13279.603 ops/ms
                 ·gc.alloc.rate:                   3280.478 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.093 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     275.793 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         31.000 ms

Iteration   3: 13261.514 ops/ms
                 ·gc.alloc.rate:                   3276.055 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.768 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.488 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         33.000 ms

Iteration   4: 13251.597 ops/ms
                 ·gc.alloc.rate:                   3273.543 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.681 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.689 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         29.000 ms

Iteration   5: 13242.052 ops/ms
                 ·gc.alloc.rate:                   3271.239 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.741 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.886 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         39.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13261.941 ±(99.9%) 60.384 ops/ms [Average]
  (min, avg, max) = (13242.052, 13261.941, 13279.603), stdev = 15.681
  CI (99.9%): [13201.557, 13322.324] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3276.133 ±(99.9%) 14.898 MB/sec [Average]
  (min, avg, max) = (3271.239, 3276.133, 3280.478), stdev = 3.869
  CI (99.9%): [3261.235, 3291.030] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3280.998 ±(99.9%) 97.071 MB/sec [Average]
  (min, avg, max) = (3269.681, 3280.998, 3326.093), stdev = 25.209
  CI (99.9%): [3183.927, 3378.068] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.413 ±(99.9%) 7.338 B/op [Average]
  (min, avg, max) = (271.210, 272.413, 275.793), stdev = 1.906
  CI (99.9%): [265.075, 279.751] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  291.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (58.000, 58.200, 59.000), stdev = 0.447
  CI (99.9%): [291.000, 291.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  162.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 32.400, 39.000), stdev = 3.975
  CI (99.9%): [162.000, 162.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 73.33% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 13011.627 ops/ms
# Warmup Iteration   2: 13156.678 ops/ms
# Warmup Iteration   3: 13259.583 ops/ms
Iteration   1: 13276.702 ops/ms
                 ·gc.alloc.rate:                   3279.783 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.703 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.174 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         30.000 ms

Iteration   2: 13258.750 ops/ms
                 ·gc.alloc.rate:                   3275.351 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.116 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     276.226 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         36.000 ms

Iteration   3: 13265.015 ops/ms
                 ·gc.alloc.rate:                   3276.889 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.707 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.414 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 13266.509 ops/ms
                 ·gc.alloc.rate:                   3277.276 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.726 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.383 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 13264.873 ops/ms
                 ·gc.alloc.rate:                   3276.818 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.672 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.417 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         34.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13266.370 ±(99.9%) 25.022 ops/ms [Average]
  (min, avg, max) = (13258.750, 13266.370, 13276.702), stdev = 6.498
  CI (99.9%): [13241.348, 13291.392] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3277.223 ±(99.9%) 6.190 MB/sec [Average]
  (min, avg, max) = (3275.351, 3277.223, 3279.783), stdev = 1.607
  CI (99.9%): [3271.034, 3283.413] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3280.985 ±(99.9%) 97.149 MB/sec [Average]
  (min, avg, max) = (3269.672, 3280.985, 3326.116), stdev = 25.229
  CI (99.9%): [3183.836, 3378.134] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.323 ±(99.9%) 8.411 B/op [Average]
  (min, avg, max) = (271.174, 272.323, 276.226), stdev = 2.184
  CI (99.9%): [263.912, 280.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  291.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (58.000, 58.200, 59.000), stdev = 0.447
  CI (99.9%): [291.000, 291.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  159.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 31.800, 36.000), stdev = 3.033
  CI (99.9%): [159.000, 159.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 74.67% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 13004.136 ops/ms
# Warmup Iteration   2: 13229.174 ops/ms
# Warmup Iteration   3: 13077.836 ops/ms
Iteration   1: 13078.155 ops/ms
                 ·gc.alloc.rate:                   3230.759 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.356 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.545 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         32.000 ms

Iteration   2: 13090.546 ops/ms
                 ·gc.alloc.rate:                   3233.853 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.436 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.293 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         29.000 ms

Iteration   3: 13099.724 ops/ms
                 ·gc.alloc.rate:                   3236.002 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.664 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.840 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         32.000 ms

Iteration   4: 13093.106 ops/ms
                 ·gc.alloc.rate:                   3234.325 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.247 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.237 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         32.000 ms

Iteration   5: 13096.782 ops/ms
                 ·gc.alloc.rate:                   3235.336 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.755 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.904 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         31.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13091.663 ±(99.9%) 32.042 ops/ms [Average]
  (min, avg, max) = (13078.155, 13091.663, 13099.724), stdev = 8.321
  CI (99.9%): [13059.620, 13123.705] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3234.055 ±(99.9%) 7.800 MB/sec [Average]
  (min, avg, max) = (3230.759, 3234.055, 3236.002), stdev = 2.026
  CI (99.9%): [3226.255, 3241.856] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3235.892 ±(99.9%) 118.875 MB/sec [Average]
  (min, avg, max) = (3213.247, 3235.892, 3269.755), stdev = 30.872
  CI (99.9%): [3117.016, 3354.767] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.164 ±(99.9%) 9.530 B/op [Average]
  (min, avg, max) = (270.237, 272.164, 274.904), stdev = 2.475
  CI (99.9%): [262.634, 281.694] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  287.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (57.000, 57.400, 58.000), stdev = 0.548
  CI (99.9%): [287.000, 287.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  156.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 31.200, 32.000), stdev = 1.304
  CI (99.9%): [156.000, 156.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 76.00% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 1797.035 ops/ms
# Warmup Iteration   2: 1825.110 ops/ms
# Warmup Iteration   3: 1823.618 ops/ms
Iteration   1: 1828.227 ops/ms
                 ·gc.alloc.rate:                   3427.094 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3382.451 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2037.190 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        60.000 counts
                 ·gc.time:                         33.000 ms

Iteration   2: 1825.702 ops/ms
                 ·gc.alloc.rate:                   3422.367 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3438.876 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2074.035 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         33.000 ms

Iteration   3: 1826.759 ops/ms
                 ·gc.alloc.rate:                   3424.284 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3438.777 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2072.814 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         32.000 ms

Iteration   4: 1826.954 ops/ms
                 ·gc.alloc.rate:                   3424.580 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3438.724 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2072.602 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 1829.316 ops/ms
                 ·gc.alloc.rate:                   3429.042 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3438.778 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2069.937 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        61.000 counts
                 ·gc.time:                         31.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  1827.392 ±(99.9%) 5.393 ops/ms [Average]
  (min, avg, max) = (1825.702, 1827.392, 1829.316), stdev = 1.401
  CI (99.9%): [1821.998, 1832.785] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3425.473 ±(99.9%) 10.045 MB/sec [Average]
  (min, avg, max) = (3422.367, 3425.473, 3429.042), stdev = 2.609
  CI (99.9%): [3415.428, 3435.518] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.077 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (2064.077, 2064.077, 2064.078), stdev = 0.001
  CI (99.9%): [2064.075, 2064.080] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3427.521 ±(99.9%) 97.017 MB/sec [Average]
  (min, avg, max) = (3382.451, 3427.521, 3438.876), stdev = 25.195
  CI (99.9%): [3330.505, 3524.538] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2065.316 ±(99.9%) 60.817 B/op [Average]
  (min, avg, max) = (2037.190, 2065.316, 2074.035), stdev = 15.794
  CI (99.9%): [2004.499, 2126.132] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.002 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  304.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (60.000, 60.800, 61.000), stdev = 0.447
  CI (99.9%): [304.000, 304.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  157.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 31.400, 33.000), stdev = 2.074
  CI (99.9%): [157.000, 157.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 77.33% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 3756.713 ops/ms
# Warmup Iteration   2: 3799.714 ops/ms
# Warmup Iteration   3: 3854.219 ops/ms
Iteration   1: 3856.300 ops/ms
                 ·gc.alloc.rate:                   7228.744 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7231.190 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2064.750 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         49.000 ms

Iteration   2: 3856.519 ops/ms
                 ·gc.alloc.rate:                   7229.113 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7231.211 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2064.649 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         51.000 ms

Iteration   3: 3862.990 ops/ms
                 ·gc.alloc.rate:                   7241.208 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7317.192 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2085.709 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         48.000 ms

Iteration   4: 3866.492 ops/ms
                 ·gc.alloc.rate:                   7247.753 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7231.082 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2059.303 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         41.000 ms

Iteration   5: 3850.641 ops/ms
                 ·gc.alloc.rate:                   7217.987 MB/sec
                 ·gc.alloc.rate.norm:              2064.050 B/op
                 ·gc.churn.G1_Eden_Space:          7231.033 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2067.781 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         42.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3858.588 ±(99.9%) 23.932 ops/ms [Average]
  (min, avg, max) = (3850.641, 3858.588, 3866.492), stdev = 6.215
  CI (99.9%): [3834.656, 3882.521] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7232.961 ±(99.9%) 44.891 MB/sec [Average]
  (min, avg, max) = (7217.987, 7232.961, 7247.753), stdev = 11.658
  CI (99.9%): [7188.070, 7277.852] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.050 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.050, 2064.050, 2064.051), stdev = 0.001
  CI (99.9%): [2064.049, 2064.052] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7248.342 ±(99.9%) 148.205 MB/sec [Average]
  (min, avg, max) = (7231.033, 7248.342, 7317.192), stdev = 38.488
  CI (99.9%): [7100.136, 7396.547] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2068.438 ±(99.9%) 38.992 B/op [Average]
  (min, avg, max) = (2059.303, 2068.438, 2085.709), stdev = 10.126
  CI (99.9%): [2029.447, 2107.430] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  421.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (84.000, 84.200, 85.000), stdev = 0.447
  CI (99.9%): [421.000, 421.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  231.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (41.000, 46.200, 51.000), stdev = 4.438
  CI (99.9%): [231.000, 231.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 78.67% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 3709.481 ops/ms
# Warmup Iteration   2: 3800.430 ops/ms
# Warmup Iteration   3: 3809.733 ops/ms
Iteration   1: 3816.837 ops/ms
                 ·gc.alloc.rate:                   7154.129 MB/sec
                 ·gc.alloc.rate.norm:              2064.052 B/op
                 ·gc.churn.G1_Eden_Space:          7187.111 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2073.568 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         46.000 ms

Iteration   2: 3819.198 ops/ms
                 ·gc.alloc.rate:                   7159.148 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7103.194 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2047.919 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         45.000 ms

Iteration   3: 3821.956 ops/ms
                 ·gc.alloc.rate:                   7164.287 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7187.678 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2070.790 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         47.000 ms

Iteration   4: 3822.614 ops/ms
                 ·gc.alloc.rate:                   7165.491 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7187.653 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2070.435 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         42.000 ms

Iteration   5: 3816.091 ops/ms
                 ·gc.alloc.rate:                   7153.181 MB/sec
                 ·gc.alloc.rate.norm:              2064.051 B/op
                 ·gc.churn.G1_Eden_Space:          7103.007 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2049.573 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        84.000 counts
                 ·gc.time:                         46.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3819.339 ±(99.9%) 11.292 ops/ms [Average]
  (min, avg, max) = (3816.091, 3819.339, 3822.614), stdev = 2.933
  CI (99.9%): [3808.047, 3830.631] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7159.247 ±(99.9%) 21.730 MB/sec [Average]
  (min, avg, max) = (7153.181, 7159.247, 7165.491), stdev = 5.643
  CI (99.9%): [7137.517, 7180.978] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.051 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (2064.051, 2064.051, 2064.052), stdev = 0.001
  CI (99.9%): [2064.049, 2064.053] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7153.728 ±(99.9%) 177.967 MB/sec [Average]
  (min, avg, max) = (7103.007, 7153.728, 7187.678), stdev = 46.218
  CI (99.9%): [6975.761, 7331.696] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2062.457 ±(99.9%) 48.475 B/op [Average]
  (min, avg, max) = (2047.919, 2062.457, 2073.568), stdev = 12.589
  CI (99.9%): [2013.982, 2110.932] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  423.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (84.000, 84.600, 85.000), stdev = 0.548
  CI (99.9%): [423.000, 423.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  226.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (42.000, 45.200, 47.000), stdev = 1.924
  CI (99.9%): [226.000, 226.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 80.00% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.251 ops/ms
# Warmup Iteration   2: 2.251 ops/ms
# Warmup Iteration   3: 2.260 ops/ms
Iteration   1: 2.265 ops/ms
                 ·gc.alloc.rate:                   33.740 MB/sec
                 ·gc.alloc.rate.norm:              16401.195 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     27402.860 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1.697 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   2: 2.264 ops/ms
                 ·gc.alloc.rate:      33.718 MB/sec
                 ·gc.alloc.rate.norm: 16400.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.274 ops/ms
                 ·gc.alloc.rate:               33.873 MB/sec
                 ·gc.alloc.rate.norm:          16401.188 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27294.420 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   4: 2.277 ops/ms
                 ·gc.alloc.rate:      33.920 MB/sec
                 ·gc.alloc.rate.norm: 16400.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.274 ops/ms
                 ·gc.alloc.rate:               33.865 MB/sec
                 ·gc.alloc.rate.norm:          16401.188 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27301.623 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  2.271 ±(99.9%) 0.023 ops/ms [Average]
  (min, avg, max) = (2.264, 2.271, 2.277), stdev = 0.006
  CI (99.9%): [2.248, 2.294] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  33.823 ±(99.9%) 0.342 MB/sec [Average]
  (min, avg, max) = (33.718, 33.823, 33.920), stdev = 0.089
  CI (99.9%): [33.481, 34.165] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.723 ±(99.9%) 2.464 B/op [Average]
  (min, avg, max) = (16400.019, 16400.723, 16401.195), stdev = 0.640
  CI (99.9%): [16398.258, 16403.187] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  33.823 ±(99.9%) 118.893 MB/sec [Average]
  (min, avg, max) = (≈ 0, 33.823, 56.373), stdev = 30.876
  CI (99.9%): [≈ 0, 152.716] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16399.781 ±(99.9%) 57647.776 B/op [Average]
  (min, avg, max) = (≈ 0, 16399.781, 27402.860), stdev = 14970.944
  CI (99.9%): [≈ 0, 74047.556] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.339 ±(99.9%) 2.922 B/op [Average]
  (min, avg, max) = (≈ 0, 0.339, 1.697), stdev = 0.759
  CI (99.9%): [≈ 0, 3.262] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  3.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 81.33% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 7.059 ops/ms
# Warmup Iteration   2: 7.145 ops/ms
# Warmup Iteration   3: 7.151 ops/ms
Iteration   1: 7.140 ops/ms
                 ·gc.alloc.rate:                   106.353 MB/sec
                 ·gc.alloc.rate.norm:              16400.747 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17386.690 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.228 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         4.000 ms

Iteration   2: 7.139 ops/ms
                 ·gc.alloc.rate:               106.340 MB/sec
                 ·gc.alloc.rate.norm:          16400.747 B/op
                 ·gc.churn.G1_Eden_Space:      112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 17389.125 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     3.000 ms

Iteration   3: 7.118 ops/ms
                 ·gc.alloc.rate:                   106.016 MB/sec
                 ·gc.alloc.rate.norm:              16400.749 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17441.894 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.072 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 7.148 ops/ms
                 ·gc.alloc.rate:                   106.467 MB/sec
                 ·gc.alloc.rate.norm:              16400.379 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     8683.738 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.016 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 7.146 ops/ms
                 ·gc.alloc.rate:                   106.445 MB/sec
                 ·gc.alloc.rate.norm:              16401.230 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17372.093 B/op
                 ·gc.churn.G1_Survivor_Space:      0.345 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 53.179 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  7.138 ±(99.9%) 0.047 ops/ms [Average]
  (min, avg, max) = (7.118, 7.138, 7.148), stdev = 0.012
  CI (99.9%): [7.092, 7.185] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  106.324 ±(99.9%) 0.697 MB/sec [Average]
  (min, avg, max) = (106.016, 106.324, 106.467), stdev = 0.181
  CI (99.9%): [105.627, 107.021] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.770 ±(99.9%) 1.165 B/op [Average]
  (min, avg, max) = (16400.379, 16400.770, 16401.230), stdev = 0.302
  CI (99.9%): [16399.605, 16401.935] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  101.472 ±(99.9%) 97.079 MB/sec [Average]
  (min, avg, max) = (56.373, 101.472, 112.748), stdev = 25.211
  CI (99.9%): [4.393, 198.551] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  15654.708 ±(99.9%) 15005.885 B/op [Average]
  (min, avg, max) = (8683.738, 15654.708, 17441.894), stdev = 3896.981
  CI (99.9%): [648.823, 30660.593] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.069 ±(99.9%) 0.593 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.069, 0.345), stdev = 0.154
  CI (99.9%): [≈ 0, 0.663] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  10.699 ±(99.9%) 91.443 B/op [Average]
  (min, avg, max) = (≈ 0, 10.699, 53.179), stdev = 23.747
  CI (99.9%): [≈ 0, 102.142] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  9.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 82.67% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 9.248 ops/ms
# Warmup Iteration   2: 9.394 ops/ms
# Warmup Iteration   3: 9.408 ops/ms
Iteration   1: 9.376 ops/ms
                 ·gc.alloc.rate:                   139.642 MB/sec
                 ·gc.alloc.rate.norm:              16400.569 B/op
                 ·gc.churn.G1_Eden_Space:          112.747 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13241.827 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.421 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 9.408 ops/ms
                 ·gc.alloc.rate:                   140.133 MB/sec
                 ·gc.alloc.rate.norm:              16400.847 B/op
                 ·gc.churn.G1_Eden_Space:          169.121 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19793.495 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         5.000 ms

Iteration   3: 9.384 ops/ms
                 ·gc.alloc.rate:                   139.772 MB/sec
                 ·gc.alloc.rate.norm:              16400.936 B/op
                 ·gc.churn.G1_Eden_Space:          112.744 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13229.551 B/op
                 ·gc.churn.G1_Survivor_Space:      0.342 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 40.077 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms

Iteration   4: 9.347 ops/ms
                 ·gc.alloc.rate:                   139.222 MB/sec
                 ·gc.alloc.rate.norm:              16400.852 B/op
                 ·gc.churn.G1_Eden_Space:          169.118 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19922.664 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.577 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 9.387 ops/ms
                 ·gc.alloc.rate:                   139.820 MB/sec
                 ·gc.alloc.rate.norm:              16400.568 B/op
                 ·gc.churn.G1_Eden_Space:          112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13225.182 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.679 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  9.381 ±(99.9%) 0.085 ops/ms [Average]
  (min, avg, max) = (9.347, 9.381, 9.408), stdev = 0.022
  CI (99.9%): [9.295, 9.466] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  139.718 ±(99.9%) 1.273 MB/sec [Average]
  (min, avg, max) = (139.222, 139.718, 140.133), stdev = 0.331
  CI (99.9%): [138.445, 140.991] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.755 ±(99.9%) 0.667 B/op [Average]
  (min, avg, max) = (16400.568, 16400.755, 16400.936), stdev = 0.173
  CI (99.9%): [16400.088, 16401.421] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  135.296 ±(99.9%) 118.894 MB/sec [Average]
  (min, avg, max) = (112.744, 135.296, 169.121), stdev = 30.876
  CI (99.9%): [16.401, 254.190] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  15882.544 ±(99.9%) 13975.694 B/op [Average]
  (min, avg, max) = (13225.182, 15882.544, 19922.664), stdev = 3629.443
  CI (99.9%): [1906.850, 29858.237] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.071 ±(99.9%) 0.582 MB/sec [Average]
  (min, avg, max) = (0.001, 0.071, 0.342), stdev = 0.151
  CI (99.9%): [≈ 0, 0.653] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  8.372 ±(99.9%) 68.253 B/op [Average]
  (min, avg, max) = (0.106, 8.372, 40.077), stdev = 17.725
  CI (99.9%): [≈ 0, 76.625] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  12.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 84.00% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 71886.748 ops/ms
# Warmup Iteration   2: 70403.843 ops/ms
# Warmup Iteration   3: 76587.242 ops/ms
Iteration   1: 76584.088 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76621.742 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76590.989 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76611.895 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76352.344 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76552.212 ±(99.9%) 434.217 ops/ms [Average]
  (min, avg, max) = (76352.344, 76552.212, 76621.742), stdev = 112.765
  CI (99.9%): [76117.995, 76986.429] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 85.33% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 71997.601 ops/ms
# Warmup Iteration   2: 70438.799 ops/ms
# Warmup Iteration   3: 76659.923 ops/ms
Iteration   1: 76703.428 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76685.030 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76649.180 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76671.449 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76450.403 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76631.898 ±(99.9%) 398.048 ops/ms [Average]
  (min, avg, max) = (76450.403, 76631.898, 76703.428), stdev = 103.372
  CI (99.9%): [76233.850, 77029.946] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 86.67% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 71874.650 ops/ms
# Warmup Iteration   2: 70397.320 ops/ms
# Warmup Iteration   3: 76625.898 ops/ms
Iteration   1: 76622.205 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76675.445 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76622.631 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76630.827 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76465.182 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76603.258 ±(99.9%) 309.075 ops/ms [Average]
  (min, avg, max) = (76465.182, 76603.258, 76675.445), stdev = 80.266
  CI (99.9%): [76294.183, 76912.333] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 88.00% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 9095.729 ops/ms
# Warmup Iteration   2: 8833.114 ops/ms
# Warmup Iteration   3: 9211.018 ops/ms
Iteration   1: 9221.192 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9221.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9225.177 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9228.292 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9222.998 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9223.842 ±(99.9%) 11.322 ops/ms [Average]
  (min, avg, max) = (9221.192, 9223.842, 9228.292), stdev = 2.940
  CI (99.9%): [9212.520, 9235.164] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 89.33% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 35836.516 ops/ms
# Warmup Iteration   2: 35761.597 ops/ms
# Warmup Iteration   3: 36511.313 ops/ms
Iteration   1: 36341.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 36358.159 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 36304.234 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 36343.375 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 36313.820 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  36332.302 ±(99.9%) 86.385 ops/ms [Average]
  (min, avg, max) = (36304.234, 36332.302, 36358.159), stdev = 22.434
  CI (99.9%): [36245.917, 36418.688] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 90.67% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 37388.734 ops/ms
# Warmup Iteration   2: 37155.735 ops/ms
# Warmup Iteration   3: 37275.220 ops/ms
Iteration   1: 37346.259 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 37397.490 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 37415.813 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 37403.959 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 37294.420 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  37371.588 ±(99.9%) 195.124 ops/ms [Average]
  (min, avg, max) = (37294.420, 37371.588, 37415.813), stdev = 50.673
  CI (99.9%): [37176.464, 37566.712] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 92.00% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9.407 ops/ms
# Warmup Iteration   2: 9.449 ops/ms
# Warmup Iteration   3: 9.550 ops/ms
Iteration   1: 9.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.550 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.548 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.550 ±(99.9%) 0.009 ops/ms [Average]
  (min, avg, max) = (9.548, 9.550, 9.554), stdev = 0.002
  CI (99.9%): [9.541, 9.559] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.005 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 93.33% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16.745 ops/ms
# Warmup Iteration   2: 16.783 ops/ms
# Warmup Iteration   3: 16.811 ops/ms
Iteration   1: 16.818 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.820 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.811 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.813 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.810 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.814 ±(99.9%) 0.018 ops/ms [Average]
  (min, avg, max) = (16.810, 16.814, 16.820), stdev = 0.005
  CI (99.9%): [16.797, 16.832] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 94.67% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: 18.949 ops/ms
# Warmup Iteration   2: 18.969 ops/ms
# Warmup Iteration   3: 18.929 ops/ms
Iteration   1: 18.961 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.972 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.977 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.971 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.938 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  18.964 ±(99.9%) 0.060 ops/ms [Average]
  (min, avg, max) = (18.938, 18.964, 18.977), stdev = 0.016
  CI (99.9%): [18.903, 19.024] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 128)

# Run progress: 96.00% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 4610.968 ops/ms
# Warmup Iteration   2: 4492.383 ops/ms
# Warmup Iteration   3: 4473.995 ops/ms
Iteration   1: 4479.843 ops/ms
                 ·gc.alloc.rate:                   1766.800 MB/sec
                 ·gc.alloc.rate.norm:              434.266 B/op
                 ·gc.churn.G1_Eden_Space:          1803.969 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     443.402 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   2: 4484.796 ops/ms
                 ·gc.alloc.rate:                   1768.756 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1747.625 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     429.077 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         19.000 ms

Iteration   3: 4479.502 ops/ms
                 ·gc.alloc.rate:                   1766.678 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1803.929 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     443.422 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         17.000 ms

Iteration   4: 4482.243 ops/ms
                 ·gc.alloc.rate:                   1767.743 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1747.609 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     429.318 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   5: 4485.401 ops/ms
                 ·gc.alloc.rate:                   1768.958 MB/sec
                 ·gc.alloc.rate.norm:              434.264 B/op
                 ·gc.churn.G1_Eden_Space:          1747.582 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     429.017 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         16.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4482.357 ±(99.9%) 10.492 ops/ms [Average]
  (min, avg, max) = (4479.502, 4482.357, 4485.401), stdev = 2.725
  CI (99.9%): [4471.865, 4492.849] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1767.787 ±(99.9%) 4.092 MB/sec [Average]
  (min, avg, max) = (1766.678, 1767.787, 1768.958), stdev = 1.063
  CI (99.9%): [1763.695, 1771.879] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  434.265 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (434.264, 434.265, 434.266), stdev = 0.001
  CI (99.9%): [434.262, 434.268] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1770.143 ±(99.9%) 118.833 MB/sec [Average]
  (min, avg, max) = (1747.582, 1770.143, 1803.969), stdev = 30.861
  CI (99.9%): [1651.310, 1888.976] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  434.847 ±(99.9%) 30.110 B/op [Average]
  (min, avg, max) = (429.017, 434.847, 443.422), stdev = 7.819
  CI (99.9%): [404.738, 464.957] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  157.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.400, 32.000), stdev = 0.548
  CI (99.9%): [157.000, 157.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  87.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 17.400, 19.000), stdev = 1.140
  CI (99.9%): [87.000, 87.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1024)

# Run progress: 97.33% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 4699.180 ops/ms
# Warmup Iteration   2: 4600.395 ops/ms
# Warmup Iteration   3: 4572.927 ops/ms
Iteration   1: 4562.888 ops/ms
                 ·gc.alloc.rate:                   1792.325 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1804.011 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.337 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   2: 4577.055 ops/ms
                 ·gc.alloc.rate:                   1797.889 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1804.014 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     433.990 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   3: 4576.747 ops/ms
                 ·gc.alloc.rate:                   1797.724 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1803.953 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.015 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 4576.543 ops/ms
                 ·gc.alloc.rate:                   1797.611 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1803.926 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.036 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         16.000 ms

Iteration   5: 4576.831 ops/ms
                 ·gc.alloc.rate:                   1797.768 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1747.611 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     420.449 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         20.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4574.013 ±(99.9%) 23.958 ops/ms [Average]
  (min, avg, max) = (4562.888, 4574.013, 4577.055), stdev = 6.222
  CI (99.9%): [4550.055, 4597.971] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1796.663 ±(99.9%) 9.346 MB/sec [Average]
  (min, avg, max) = (1792.325, 1796.663, 1797.889), stdev = 2.427
  CI (99.9%): [1787.317, 1806.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.517 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.516, 432.517, 432.517), stdev = 0.001
  CI (99.9%): [432.514, 432.519] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1792.703 ±(99.9%) 97.064 MB/sec [Average]
  (min, avg, max) = (1747.611, 1792.703, 1804.014), stdev = 25.207
  CI (99.9%): [1695.639, 1889.767] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  431.566 ±(99.9%) 24.031 B/op [Average]
  (min, avg, max) = (420.449, 431.566, 435.337), stdev = 6.241
  CI (99.9%): [407.534, 455.597] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  159.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.800, 32.000), stdev = 0.447
  CI (99.9%): [159.000, 159.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  93.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 18.600, 20.000), stdev = 1.673
  CI (99.9%): [93.000, 93.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/off-on-heap/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1048576)

# Run progress: 98.67% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 5259.347 ops/ms
# Warmup Iteration   2: 5162.887 ops/ms
# Warmup Iteration   3: 5131.051 ops/ms
Iteration   1: 5130.406 ops/ms
                 ·gc.alloc.rate:                   2014.196 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.086 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     423.475 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         20.000 ms

Iteration   2: 5128.530 ops/ms
                 ·gc.alloc.rate:                   2013.488 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          2029.506 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.738 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         26.000 ms

Iteration   3: 5128.531 ops/ms
                 ·gc.alloc.rate:                   2013.476 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          2029.486 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.735 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         23.000 ms

Iteration   4: 5130.141 ops/ms
                 ·gc.alloc.rate:                   2014.107 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          2029.494 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.600 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         20.000 ms

Iteration   5: 5132.694 ops/ms
                 ·gc.alloc.rate:                   2015.100 MB/sec
                 ·gc.alloc.rate.norm:              432.297 B/op
                 ·gc.churn.G1_Eden_Space:          1973.108 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     423.289 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         19.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5130.060 ±(99.9%) 6.598 ops/ms [Average]
  (min, avg, max) = (5128.530, 5130.060, 5132.694), stdev = 1.713
  CI (99.9%): [5123.463, 5136.658] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  2014.073 ±(99.9%) 2.561 MB/sec [Average]
  (min, avg, max) = (2013.476, 2014.073, 2015.100), stdev = 0.665
  CI (99.9%): [2011.512, 2016.635] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.298 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (432.297, 432.298, 432.298), stdev = 0.001
  CI (99.9%): [432.297, 432.299] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  2006.936 ±(99.9%) 118.948 MB/sec [Average]
  (min, avg, max) = (1973.086, 2006.936, 2029.506), stdev = 30.891
  CI (99.9%): [1887.987, 2125.884] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  430.767 ±(99.9%) 25.963 B/op [Average]
  (min, avg, max) = (423.289, 430.767, 435.738), stdev = 6.743
  CI (99.9%): [404.804, 456.730] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  178.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 35.600, 36.000), stdev = 0.548
  CI (99.9%): [178.000, 178.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  108.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (19.000, 21.600, 26.000), stdev = 2.881
  CI (99.9%): [108.000, 108.000] (assumes normal distribution)


# Run complete. Total time: 01:45:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (charsetName)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score       Error   Units
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128             128  thrpt    5   3026.018 ±     7.374  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128            1024  thrpt    5   3106.610 ±     3.134  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128         1048576  thrpt    5   2907.541 ±     5.113  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024             128  thrpt    5    384.779 ±     0.475  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024            1024  thrpt    5    424.942 ±     0.433  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024         1048576  thrpt    5    405.049 ±     0.431  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576             128  thrpt    5      0.384 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576             128  thrpt    5      0.110 ±     0.017    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576            1024  thrpt    5      0.418 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576            1024  thrpt    5      0.099 ±     0.013    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576         1048576  thrpt    5      0.373 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576         1048576  thrpt    5      0.118 ±     0.033    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128             128  thrpt    5   3104.264 ±     3.442  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128            1024  thrpt    5   3281.734 ±     5.232  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128         1048576  thrpt    5   3110.414 ±     4.324  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024             128  thrpt    5    403.568 ±     0.336  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024            1024  thrpt    5    430.125 ±     0.528  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024         1048576  thrpt    5    458.592 ±     0.697  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576             128  thrpt    5      0.397 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576             128  thrpt    5      0.109 ±     0.026    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576            1024  thrpt    5      0.421 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576            1024  thrpt    5      0.103 ±     0.013    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576         1048576  thrpt    5      0.435 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576         1048576  thrpt    5      0.098 ±     0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128             128  thrpt    5   3459.989 ±     3.433  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128            1024  thrpt    5   3387.350 ±     6.225  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128         1048576  thrpt    5   3484.980 ±     7.939  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024             128  thrpt    5    448.133 ±     0.248  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024            1024  thrpt    5    465.563 ±     0.772  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024         1048576  thrpt    5    464.954 ±     0.695  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576             128  thrpt    5      0.443 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576             128  thrpt    5      0.095 ±     0.015    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576            1024  thrpt    5      0.439 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576            1024  thrpt    5      0.100 ±     0.028    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576         1048576  thrpt    5      0.472 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576         1048576  thrpt    5      0.092 ±     0.022    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128             128  thrpt    5   9889.019 ±    10.182  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128            1024  thrpt    5  12478.181 ±    21.954  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128         1048576  thrpt    5  12258.875 ±    37.639  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024             128  thrpt    5   1143.905 ±     1.979  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024            1024  thrpt    5   2433.978 ±     2.728  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024         1048576  thrpt    5   2300.486 ±     6.228  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576             128  thrpt    5      0.924 ±     0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576             128  thrpt    5      0.048 ±     0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576            1024  thrpt    5      1.509 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576            1024  thrpt    5      0.029 ±     0.015    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576         1048576  thrpt    5      1.555 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576         1048576  thrpt    5      0.029 ±     0.017    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128             128  thrpt    5  10913.610 ±    10.674  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128            1024  thrpt    5  13882.436 ±    19.066  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128         1048576  thrpt    5  14453.150 ±    19.514  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024             128  thrpt    5   1168.813 ±     2.127  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024            1024  thrpt    5   2744.858 ±     5.526  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024         1048576  thrpt    5   2773.600 ±     3.198  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576             128  thrpt    5      1.091 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576             128  thrpt    5      0.039 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576            1024  thrpt    5      1.484 ±     0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576            1024  thrpt    5      0.030 ±     0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576         1048576  thrpt    5      1.553 ±     0.004  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576         1048576  thrpt    5      0.029 ±     0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128             128  thrpt    5  10146.106 ±     9.373  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128            1024  thrpt    5  11932.348 ±     8.890  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128         1048576  thrpt    5  11118.734 ±    28.076  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024             128  thrpt    5   1547.977 ±     5.108  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024            1024  thrpt    5   2402.053 ±     3.421  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024         1048576  thrpt    5   2208.620 ±     8.293  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576             128  thrpt    5      1.610 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576             128  thrpt    5      0.028 ±     0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576            1024  thrpt    5      2.474 ±     0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576            1024  thrpt    5      0.018 ±     0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576         1048576  thrpt    5      2.041 ±     0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576         1048576  thrpt    5      0.022 ±     0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                             N/A                 128             128  thrpt    5  13261.941 ±    60.384  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128             128  thrpt    5   3276.133 ±    14.898  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128             128  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128             128  thrpt    5   3280.998 ±    97.071  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128             128  thrpt    5    272.413 ±     7.338    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128             128  thrpt    5      0.004 ±     0.003  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128             128  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128             128  thrpt    5    291.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128             128  thrpt    5    162.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128            1024  thrpt    5  13266.370 ±    25.022  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128            1024  thrpt    5   3277.223 ±     6.190  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128            1024  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128            1024  thrpt    5   3280.985 ±    97.149  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128            1024  thrpt    5    272.323 ±     8.411    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128            1024  thrpt    5      0.004 ±     0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128            1024  thrpt    5     ≈ 10⁻³                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128            1024  thrpt    5    291.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128            1024  thrpt    5    159.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128         1048576  thrpt    5  13091.663 ±    32.042  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128         1048576  thrpt    5   3234.055 ±     7.800  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128         1048576  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128         1048576  thrpt    5   3235.892 ±   118.875  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128         1048576  thrpt    5    272.164 ±     9.530    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128         1048576  thrpt    5      0.004 ±     0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128         1048576  thrpt    5     ≈ 10⁻³                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128         1048576  thrpt    5    287.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128         1048576  thrpt    5    156.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024             128  thrpt    5   1827.392 ±     5.393  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024             128  thrpt    5   3425.473 ±    10.045  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024             128  thrpt    5   2064.077 ±     0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024             128  thrpt    5   3427.521 ±    97.017  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024             128  thrpt    5   2065.316 ±    60.817    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024             128  thrpt    5      0.004 ±     0.007  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024             128  thrpt    5      0.002 ±     0.004    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024             128  thrpt    5    304.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024             128  thrpt    5    157.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024            1024  thrpt    5   3858.588 ±    23.932  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024            1024  thrpt    5   7232.961 ±    44.891  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024            1024  thrpt    5   2064.050 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024            1024  thrpt    5   7248.342 ±   148.205  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024            1024  thrpt    5   2068.438 ±    38.992    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024            1024  thrpt    5      0.004 ±     0.009  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024            1024  thrpt    5      0.001 ±     0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024            1024  thrpt    5    421.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024            1024  thrpt    5    231.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024         1048576  thrpt    5   3819.339 ±    11.292  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024         1048576  thrpt    5   7159.247 ±    21.730  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024         1048576  thrpt    5   2064.051 ±     0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024         1048576  thrpt    5   7153.728 ±   177.967  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024         1048576  thrpt    5   2062.457 ±    48.475    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024         1048576  thrpt    5      0.005 ±     0.009  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024         1048576  thrpt    5      0.001 ±     0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024         1048576  thrpt    5    423.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024         1048576  thrpt    5    226.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576             128  thrpt    5      2.271 ±     0.023  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576             128  thrpt    5     33.823 ±     0.342  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576             128  thrpt    5  16400.723 ±     2.464    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576             128  thrpt    5     33.823 ±   118.893  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576             128  thrpt    5  16399.781 ± 57647.776    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576             128  thrpt    5      0.001 ±     0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576             128  thrpt    5      0.339 ±     2.922    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576             128  thrpt    5      3.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576             128  thrpt    5      5.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576            1024  thrpt    5      7.138 ±     0.047  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576            1024  thrpt    5    106.324 ±     0.697  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576            1024  thrpt    5  16400.770 ±     1.165    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576            1024  thrpt    5    101.472 ±    97.079  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576            1024  thrpt    5  15654.708 ± 15005.885    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576            1024  thrpt    5      0.069 ±     0.593  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576            1024  thrpt    5     10.699 ±    91.443    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576            1024  thrpt    5      9.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576            1024  thrpt    5     15.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576         1048576  thrpt    5      9.381 ±     0.085  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576         1048576  thrpt    5    139.718 ±     1.273  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576         1048576  thrpt    5  16400.755 ±     0.667    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576         1048576  thrpt    5    135.296 ±   118.894  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576         1048576  thrpt    5  15882.544 ± 13975.694    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576         1048576  thrpt    5      0.071 ±     0.582  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576         1048576  thrpt    5      8.372 ±    68.253    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576         1048576  thrpt    5     12.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576         1048576  thrpt    5     15.000                  ms
ReaderBenchmarks.readHeapBuffer                                               N/A                 128             128  thrpt    5  76552.212 ±   434.217  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128             128  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128            1024  thrpt    5  76631.898 ±   398.048  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128         1048576  thrpt    5  76603.258 ±   309.075  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024             128  thrpt    5   9223.842 ±    11.322  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024            1024  thrpt    5  36332.302 ±    86.385  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024         1048576  thrpt    5  37371.588 ±   195.124  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576             128  thrpt    5      9.550 ±     0.009  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576             128  thrpt    5      0.005 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576            1024  thrpt    5     16.814 ±     0.018  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576            1024  thrpt    5      0.003 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576         1048576  thrpt    5     18.964 ±     0.060  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576         1048576  thrpt    5      0.002 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576         1048576  thrpt    5        ≈ 0              counts
ScannerBenchmarks.scan                                                        N/A                 N/A             128  thrpt    5   4482.357 ±    10.492  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A             128  thrpt    5   1767.787 ±     4.092  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A             128  thrpt    5    434.265 ±     0.003    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A             128  thrpt    5   1770.143 ±   118.833  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A             128  thrpt    5    434.847 ±    30.110    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A             128  thrpt    5      0.002 ±     0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A             128  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A             128  thrpt    5    157.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A             128  thrpt    5     87.000                  ms
ScannerBenchmarks.scan                                                        N/A                 N/A            1024  thrpt    5   4574.013 ±    23.958  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A            1024  thrpt    5   1796.663 ±     9.346  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A            1024  thrpt    5    432.517 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A            1024  thrpt    5   1792.703 ±    97.064  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A            1024  thrpt    5    431.566 ±    24.031    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A            1024  thrpt    5      0.003 ±     0.004  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A            1024  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A            1024  thrpt    5    159.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A            1024  thrpt    5     93.000                  ms
ScannerBenchmarks.scan                                                        N/A                 N/A         1048576  thrpt    5   5130.060 ±     6.598  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A         1048576  thrpt    5   2014.073 ±     2.561  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A         1048576  thrpt    5    432.298 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A         1048576  thrpt    5   2006.936 ±   118.948  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A         1048576  thrpt    5    430.767 ±    25.963    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A         1048576  thrpt    5      0.003 ±     0.005  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A         1048576  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A         1048576  thrpt    5    178.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A         1048576  thrpt    5    108.000                  ms

Benchmark result is saved to jmh-result.csv
