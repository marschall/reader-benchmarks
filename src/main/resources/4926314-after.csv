# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = true, onHeap = true, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:50:40
# Fork: 1 of 1
# Warmup Iteration   1: 22.633 ops/us
# Warmup Iteration   2: 22.647 ops/us
# Warmup Iteration   3: 23.783 ops/us
Iteration   1: 23.780 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.787 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.790 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.795 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.775 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  23.785 ±(99.9%) 0.030 ops/us [Average]
  (min, avg, max) = (23.775, 23.785, 23.795), stdev = 0.008
  CI (99.9%): [23.755, 23.815] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = true, onHeap = true, transferSize = 1024)

# Run progress: 1.20% complete, ETA 01:55:08
# Fork: 1 of 1
# Warmup Iteration   1: 15.543 ops/us
# Warmup Iteration   2: 15.540 ops/us
# Warmup Iteration   3: 15.892 ops/us
Iteration   1: 15.901 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.889 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.877 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.905 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.916 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  15.898 ±(99.9%) 0.059 ops/us [Average]
  (min, avg, max) = (15.877, 15.898, 15.916), stdev = 0.015
  CI (99.9%): [15.839, 15.956] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = true, onHeap = false, transferSize = 128)

# Run progress: 2.41% complete, ETA 01:53:44
# Fork: 1 of 1
# Warmup Iteration   1: 13.546 ops/us
# Warmup Iteration   2: 13.539 ops/us
# Warmup Iteration   3: 13.349 ops/us
Iteration   1: 13.354 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.341 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.352 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.344 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.355 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  13.349 ±(99.9%) 0.025 ops/us [Average]
  (min, avg, max) = (13.341, 13.349, 13.355), stdev = 0.006
  CI (99.9%): [13.325, 13.374] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = true, onHeap = false, transferSize = 1024)

# Run progress: 3.61% complete, ETA 01:52:20
# Fork: 1 of 1
# Warmup Iteration   1: 9.495 ops/us
# Warmup Iteration   2: 9.473 ops/us
# Warmup Iteration   3: 9.411 ops/us
Iteration   1: 9.406 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.403 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.408 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.407 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.401 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  9.405 ±(99.9%) 0.011 ops/us [Average]
  (min, avg, max) = (9.401, 9.405, 9.408), stdev = 0.003
  CI (99.9%): [9.393, 9.416] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = false, onHeap = true, transferSize = 128)

# Run progress: 4.82% complete, ETA 01:50:55
# Fork: 1 of 1
# Warmup Iteration   1: 22.629 ops/us
# Warmup Iteration   2: 22.667 ops/us
# Warmup Iteration   3: 23.762 ops/us
Iteration   1: 23.739 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 23.758 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 23.754 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 23.756 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 23.766 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  23.755 ±(99.9%) 0.037 ops/us [Average]
  (min, avg, max) = (23.739, 23.755, 23.766), stdev = 0.010
  CI (99.9%): [23.717, 23.792] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = false, onHeap = true, transferSize = 1024)

# Run progress: 6.02% complete, ETA 01:49:31
# Fork: 1 of 1
# Warmup Iteration   1: 15.591 ops/us
# Warmup Iteration   2: 15.448 ops/us
# Warmup Iteration   3: 15.745 ops/us
Iteration   1: 15.818 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15.814 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15.800 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15.824 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15.803 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  15.812 ±(99.9%) 0.039 ops/us [Average]
  (min, avg, max) = (15.800, 15.812, 15.824), stdev = 0.010
  CI (99.9%): [15.773, 15.851] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = false, onHeap = false, transferSize = 128)

# Run progress: 7.23% complete, ETA 01:48:06
# Fork: 1 of 1
# Warmup Iteration   1: 13.483 ops/us
# Warmup Iteration   2: 13.533 ops/us
# Warmup Iteration   3: 13.354 ops/us
Iteration   1: 13.363 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13.366 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13.350 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13.328 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13.378 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  13.357 ±(99.9%) 0.074 ops/us [Average]
  (min, avg, max) = (13.328, 13.357, 13.378), stdev = 0.019
  CI (99.9%): [13.284, 13.431] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read
# Parameters: (latin1 = false, onHeap = false, transferSize = 1024)

# Run progress: 8.43% complete, ETA 01:46:42
# Fork: 1 of 1
# Warmup Iteration   1: 9.417 ops/us
# Warmup Iteration   2: 9.461 ops/us
# Warmup Iteration   3: 9.389 ops/us
Iteration   1: 9.393 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.386 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.392 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.402 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.390 ops/us
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read":
  9.393 ±(99.9%) 0.023 ops/us [Average]
  (min, avg, max) = (9.386, 9.393, 9.402), stdev = 0.006
  CI (99.9%): [9.370, 9.415] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.CharArrayReaderBenchmarks.read:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 9.64% complete, ETA 01:45:17
# Fork: 1 of 1
# Warmup Iteration   1: 5734.078 ops/ms
# Warmup Iteration   2: 6260.541 ops/ms
# Warmup Iteration   3: 6459.959 ops/ms
Iteration   1: 6459.305 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6460.775 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6457.966 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6450.558 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6460.814 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6457.884 ±(99.9%) 16.409 ops/ms [Average]
  (min, avg, max) = (6450.558, 6457.884, 6460.814), stdev = 4.261
  CI (99.9%): [6441.474, 6474.293] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 10.84% complete, ETA 01:43:53
# Fork: 1 of 1
# Warmup Iteration   1: 6927.400 ops/ms
# Warmup Iteration   2: 7048.401 ops/ms
# Warmup Iteration   3: 7062.307 ops/ms
Iteration   1: 7059.621 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7066.960 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7064.900 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7062.015 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7068.809 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  7064.461 ±(99.9%) 14.247 ops/ms [Average]
  (min, avg, max) = (7059.621, 7064.461, 7068.809), stdev = 3.700
  CI (99.9%): [7050.214, 7078.708] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 12.05% complete, ETA 01:42:29
# Fork: 1 of 1
# Warmup Iteration   1: 6730.541 ops/ms
# Warmup Iteration   2: 6841.115 ops/ms
# Warmup Iteration   3: 6931.257 ops/ms
Iteration   1: 6907.104 ops/ms
                 ·gc.alloc.rate:                   351.288 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.239 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.922 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         6.000 ms

Iteration   2: 6904.730 ops/ms
                 ·gc.alloc.rate:                   351.169 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.244 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.941 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 6905.742 ops/ms
                 ·gc.alloc.rate:                   351.219 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          394.611 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     62.922 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        7.000 counts
                 ·gc.time:                         5.000 ms

Iteration   4: 6904.272 ops/ms
                 ·gc.alloc.rate:                   351.145 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.242 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.944 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         6.000 ms

Iteration   5: 6898.562 ops/ms
                 ·gc.alloc.rate:                   350.847 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.236 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.989 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         4.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6904.082 ±(99.9%) 12.597 ops/ms [Average]
  (min, avg, max) = (6898.562, 6904.082, 6907.104), stdev = 3.272
  CI (99.9%): [6891.484, 6916.679] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  351.134 ±(99.9%) 0.652 MB/sec [Average]
  (min, avg, max) = (350.847, 351.134, 351.288), stdev = 0.169
  CI (99.9%): [350.481, 351.786] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [56.002, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  349.514 ±(99.9%) 97.074 MB/sec [Average]
  (min, avg, max) = (338.236, 349.514, 394.611), stdev = 25.210
  CI (99.9%): [252.441, 446.588] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  55.744 ±(99.9%) 15.451 B/op [Average]
  (min, avg, max) = (53.922, 55.744, 62.922), stdev = 4.013
  CI (99.9%): [40.292, 71.195] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  31.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
  CI (99.9%): [31.000, 31.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  24.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
  CI (99.9%): [24.000, 24.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 13.25% complete, ETA 01:41:05
# Fork: 1 of 1
# Warmup Iteration   1: 971.742 ops/ms
# Warmup Iteration   2: 986.463 ops/ms
# Warmup Iteration   3: 992.094 ops/ms
Iteration   1: 990.766 ops/ms
                 ·gc.alloc.rate:               50.389 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 62.653 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   2: 991.650 ops/ms
                 ·gc.alloc.rate:                   50.435 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     62.597 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.008 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   3: 993.175 ops/ms
                 ·gc.alloc.rate:               50.512 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 62.501 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 989.473 ops/ms
                 ·gc.alloc.rate:                   50.324 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     62.735 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 991.248 ops/ms
                 ·gc.alloc.rate:               50.414 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 62.622 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  991.262 ±(99.9%) 5.187 ops/ms [Average]
  (min, avg, max) = (989.473, 991.262, 993.175), stdev = 1.347
  CI (99.9%): [986.075, 996.450] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  50.415 ±(99.9%) 0.263 MB/sec [Average]
  (min, avg, max) = (50.324, 50.415, 50.512), stdev = 0.068
  CI (99.9%): [50.151, 50.678] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.003, 56.003, 56.003), stdev = 0.001
  CI (99.9%): [56.003, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  56.373 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (56.373, 56.373, 56.374), stdev = 0.001
  CI (99.9%): [56.372, 56.375] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  62.622 ±(99.9%) 0.327 B/op [Average]
  (min, avg, max) = (62.501, 62.622, 62.735), stdev = 0.085
  CI (99.9%): [62.295, 62.948] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.013 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
  CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.002 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.004
  CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  5.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  8.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
  CI (99.9%): [8.000, 8.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 14.46% complete, ETA 01:39:41
# Fork: 1 of 1
# Warmup Iteration   1: 1783.996 ops/ms
# Warmup Iteration   2: 1789.430 ops/ms
# Warmup Iteration   3: 1790.854 ops/ms
Iteration   1: 1791.499 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1792.244 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1791.710 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1791.209 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1792.056 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1791.744 ±(99.9%) 1.605 ops/ms [Average]
  (min, avg, max) = (1791.209, 1791.744, 1792.244), stdev = 0.417
  CI (99.9%): [1790.138, 1793.349] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 15.66% complete, ETA 01:38:16
# Fork: 1 of 1
# Warmup Iteration   1: 1717.084 ops/ms
# Warmup Iteration   2: 1617.082 ops/ms
# Warmup Iteration   3: 1750.949 ops/ms
Iteration   1: 1766.166 ops/ms
                 ·gc.alloc.rate:               89.828 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 70.293 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     3.000 ms

Iteration   2: 1755.663 ops/ms
                 ·gc.alloc.rate:                   89.289 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     35.357 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   3: 1764.830 ops/ms
                 ·gc.alloc.rate:                   89.760 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.750 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     70.347 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 1764.772 ops/ms
                 ·gc.alloc.rate:               89.750 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 35.174 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   5: 1764.479 ops/ms
                 ·gc.alloc.rate:                   89.741 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     70.360 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1763.182 ±(99.9%) 16.379 ops/ms [Average]
  (min, avg, max) = (1755.663, 1763.182, 1766.166), stdev = 4.254
  CI (99.9%): [1746.803, 1779.561] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  89.673 ±(99.9%) 0.837 MB/sec [Average]
  (min, avg, max) = (89.289, 89.673, 89.828), stdev = 0.217
  CI (99.9%): [88.836, 90.511] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [55.999, 56.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  90.198 ±(99.9%) 118.901 MB/sec [Average]
  (min, avg, max) = (56.371, 90.198, 112.750), stdev = 30.878
  CI (99.9%): [≈ 0, 209.099] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  56.306 ±(99.9%) 73.961 B/op [Average]
  (min, avg, max) = (35.174, 56.306, 70.360), stdev = 19.208
  CI (99.9%): [≈ 0, 130.268] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  8.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
  CI (99.9%): [8.000, 8.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 16.87% complete, ETA 01:36:52
# Fork: 1 of 1
# Warmup Iteration   1: 1.008 ops/ms
# Warmup Iteration   2: 1.008 ops/ms
# Warmup Iteration   3: 1.007 ops/ms
Iteration   1: 1.012 ops/ms
                 ·gc.alloc.rate:      6.586 MB/sec
                 ·gc.alloc.rate.norm: 7168.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.011 ops/ms
                 ·gc.alloc.rate:      6.578 MB/sec
                 ·gc.alloc.rate.norm: 7168.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.009 ops/ms
                 ·gc.alloc.rate:      6.566 MB/sec
                 ·gc.alloc.rate.norm: 7168.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.010 ops/ms
                 ·gc.alloc.rate:      6.572 MB/sec
                 ·gc.alloc.rate.norm: 7168.047 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.010 ops/ms
                 ·gc.alloc.rate:      6.577 MB/sec
                 ·gc.alloc.rate.norm: 7168.044 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.010 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (1.009, 1.010, 1.012), stdev = 0.001
  CI (99.9%): [1.006, 1.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6.576 ±(99.9%) 0.028 MB/sec [Average]
  (min, avg, max) = (6.566, 6.576, 6.586), stdev = 0.007
  CI (99.9%): [6.548, 6.604] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  7168.043 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (7168.040, 7168.043, 7168.047), stdev = 0.003
  CI (99.9%): [7168.033, 7168.053] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 18.07% complete, ETA 01:35:28
# Fork: 1 of 1
# Warmup Iteration   1: 1.079 ops/ms
# Warmup Iteration   2: 1.080 ops/ms
# Warmup Iteration   3: 1.079 ops/ms
Iteration   1: 1.079 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.080 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.081 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.081 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.080 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.080 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.079, 1.080, 1.081), stdev = 0.001
  CI (99.9%): [1.077, 1.084] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.040 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.038, 0.040, 0.041), stdev = 0.002
  CI (99.9%): [0.033, 0.046] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 19.28% complete, ETA 01:34:04
# Fork: 1 of 1
# Warmup Iteration   1: 1.915 ops/ms
# Warmup Iteration   2: 1.920 ops/ms
# Warmup Iteration   3: 1.914 ops/ms
Iteration   1: 1.910 ops/ms
                 ·gc.alloc.rate:      12.434 MB/sec
                 ·gc.alloc.rate.norm: 7168.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.909 ops/ms
                 ·gc.alloc.rate:      12.429 MB/sec
                 ·gc.alloc.rate.norm: 7168.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.909 ops/ms
                 ·gc.alloc.rate:               12.431 MB/sec
                 ·gc.alloc.rate.norm:          7169.422 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 32512.282 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 1.916 ops/ms
                 ·gc.alloc.rate:      12.471 MB/sec
                 ·gc.alloc.rate.norm: 7168.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.918 ops/ms
                 ·gc.alloc.rate:      12.487 MB/sec
                 ·gc.alloc.rate.norm: 7168.023 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.913 ±(99.9%) 0.016 ops/ms [Average]
  (min, avg, max) = (1.909, 1.913, 1.918), stdev = 0.004
  CI (99.9%): [1.896, 1.929] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  12.451 ±(99.9%) 0.103 MB/sec [Average]
  (min, avg, max) = (12.429, 12.451, 12.487), stdev = 0.027
  CI (99.9%): [12.347, 12.554] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  7168.303 ±(99.9%) 2.409 B/op [Average]
  (min, avg, max) = (7168.023, 7168.303, 7169.422), stdev = 0.626
  CI (99.9%): [7165.894, 7170.711] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  11.274 ±(99.9%) 97.074 MB/sec [Average]
  (min, avg, max) = (≈ 0, 11.274, 56.371), stdev = 25.210
  CI (99.9%): [≈ 0, 108.348] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  6502.456 ±(99.9%) 55988.110 B/op [Average]
  (min, avg, max) = (≈ 0, 6502.456, 32512.282), stdev = 14539.934
  CI (99.9%): [≈ 0, 62490.566] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  2.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 20.48% complete, ETA 01:32:40
# Fork: 1 of 1
# Warmup Iteration   1: 6209.619 ops/ms
# Warmup Iteration   2: 6178.463 ops/ms
# Warmup Iteration   3: 6322.804 ops/ms
Iteration   1: 6326.359 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6328.469 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6328.756 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6329.918 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6329.693 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6328.639 ±(99.9%) 5.442 ops/ms [Average]
  (min, avg, max) = (6326.359, 6328.639, 6329.918), stdev = 1.413
  CI (99.9%): [6323.197, 6334.081] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 21.69% complete, ETA 01:31:15
# Fork: 1 of 1
# Warmup Iteration   1: 7112.272 ops/ms
# Warmup Iteration   2: 7798.636 ops/ms
# Warmup Iteration   3: 7899.638 ops/ms
Iteration   1: 7904.578 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7904.222 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7896.428 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7913.187 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7894.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  7902.557 ±(99.9%) 28.841 ops/ms [Average]
  (min, avg, max) = (7894.373, 7902.557, 7913.187), stdev = 7.490
  CI (99.9%): [7873.716, 7931.398] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 22.89% complete, ETA 01:29:51
# Fork: 1 of 1
# Warmup Iteration   1: 7366.217 ops/ms
# Warmup Iteration   2: 7097.301 ops/ms
# Warmup Iteration   3: 7329.355 ops/ms
Iteration   1: 7328.071 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7334.274 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7328.666 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7331.235 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7332.748 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  7330.999 ±(99.9%) 10.162 ops/ms [Average]
  (min, avg, max) = (7328.071, 7330.999, 7334.274), stdev = 2.639
  CI (99.9%): [7320.837, 7341.160] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 24.10% complete, ETA 01:28:27
# Fork: 1 of 1
# Warmup Iteration   1: 967.398 ops/ms
# Warmup Iteration   2: 963.073 ops/ms
# Warmup Iteration   3: 967.320 ops/ms
Iteration   1: 967.279 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 967.712 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 967.595 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 966.728 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 967.508 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  967.364 ±(99.9%) 1.499 ops/ms [Average]
  (min, avg, max) = (966.728, 967.364, 967.712), stdev = 0.389
  CI (99.9%): [965.865, 968.864] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 25.30% complete, ETA 01:27:02
# Fork: 1 of 1
# Warmup Iteration   1: 1953.872 ops/ms
# Warmup Iteration   2: 1950.923 ops/ms
# Warmup Iteration   3: 1964.238 ops/ms
Iteration   1: 1964.123 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1963.643 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1963.112 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1963.010 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1963.659 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1963.510 ±(99.9%) 1.747 ops/ms [Average]
  (min, avg, max) = (1963.010, 1963.510, 1964.123), stdev = 0.454
  CI (99.9%): [1961.762, 1965.257] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 26.51% complete, ETA 01:25:38
# Fork: 1 of 1
# Warmup Iteration   1: 1992.943 ops/ms
# Warmup Iteration   2: 2002.378 ops/ms
# Warmup Iteration   3: 2008.823 ops/ms
Iteration   1: 2007.293 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2008.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2010.232 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2010.734 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2010.120 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2009.371 ±(99.9%) 5.541 ops/ms [Average]
  (min, avg, max) = (2007.293, 2009.371, 2010.734), stdev = 1.439
  CI (99.9%): [2003.830, 2014.912] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 27.71% complete, ETA 01:24:14
# Fork: 1 of 1
# Warmup Iteration   1: 0.998 ops/ms
# Warmup Iteration   2: 1.008 ops/ms
# Warmup Iteration   3: 1.006 ops/ms
Iteration   1: 0.996 ops/ms
                 ·gc.alloc.rate:      6.483 MB/sec
                 ·gc.alloc.rate.norm: 7168.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.995 ops/ms
                 ·gc.alloc.rate:      6.476 MB/sec
                 ·gc.alloc.rate.norm: 7168.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.992 ops/ms
                 ·gc.alloc.rate:      6.456 MB/sec
                 ·gc.alloc.rate.norm: 7168.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.991 ops/ms
                 ·gc.alloc.rate:      6.451 MB/sec
                 ·gc.alloc.rate.norm: 7168.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.993 ops/ms
                 ·gc.alloc.rate:      6.465 MB/sec
                 ·gc.alloc.rate.norm: 7168.044 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.993 ±(99.9%) 0.008 ops/ms [Average]
  (min, avg, max) = (0.991, 0.993, 0.996), stdev = 0.002
  CI (99.9%): [0.985, 1.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6.466 ±(99.9%) 0.052 MB/sec [Average]
  (min, avg, max) = (6.451, 6.466, 6.483), stdev = 0.013
  CI (99.9%): [6.414, 6.518] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  7168.043 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (7168.041, 7168.043, 7168.044), stdev = 0.002
  CI (99.9%): [7168.037, 7168.050] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 28.92% complete, ETA 01:22:50
# Fork: 1 of 1
# Warmup Iteration   1: 1.475 ops/ms
# Warmup Iteration   2: 1.476 ops/ms
# Warmup Iteration   3: 1.476 ops/ms
Iteration   1: 1.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.479 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.478 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.479 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.478 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.478 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.475, 1.478, 1.479), stdev = 0.002
  CI (99.9%): [1.472, 1.484] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.031 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (0.030, 0.031, 0.035), stdev = 0.002
  CI (99.9%): [0.022, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 30.12% complete, ETA 01:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 2.164 ops/ms
# Warmup Iteration   2: 2.171 ops/ms
# Warmup Iteration   3: 2.172 ops/ms
Iteration   1: 2.173 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.173 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.170 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.169 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.169 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2.171 ±(99.9%) 0.008 ops/ms [Average]
  (min, avg, max) = (2.169, 2.171, 2.173), stdev = 0.002
  CI (99.9%): [2.163, 2.179] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.021 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (0.019, 0.021, 0.024), stdev = 0.002
  CI (99.9%): [0.014, 0.028] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 31.33% complete, ETA 01:20:01
# Fork: 1 of 1
# Warmup Iteration   1: 6227.406 ops/ms
# Warmup Iteration   2: 6348.205 ops/ms
# Warmup Iteration   3: 6336.058 ops/ms
Iteration   1: 6336.568 ops/ms
                 ·gc.alloc.rate:                   322.274 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          338.241 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.777 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         4.000 ms

Iteration   2: 6331.593 ops/ms
                 ·gc.alloc.rate:                   322.021 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          338.244 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.824 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         6.000 ms

Iteration   3: 6338.300 ops/ms
                 ·gc.alloc.rate:                   322.361 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          338.240 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.761 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         5.000 ms

Iteration   4: 6338.437 ops/ms
                 ·gc.alloc.rate:                   322.364 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          281.867 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     48.967 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        5.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 6339.475 ops/ms
                 ·gc.alloc.rate:                   322.413 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          338.233 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.751 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6336.875 ±(99.9%) 12.057 ops/ms [Average]
  (min, avg, max) = (6331.593, 6336.875, 6339.475), stdev = 3.131
  CI (99.9%): [6324.817, 6348.932] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  322.287 ±(99.9%) 0.603 MB/sec [Average]
  (min, avg, max) = (322.021, 322.287, 322.413), stdev = 0.157
  CI (99.9%): [321.684, 322.889] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [56.002, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  326.965 ±(99.9%) 97.078 MB/sec [Average]
  (min, avg, max) = (281.867, 326.965, 338.244), stdev = 25.211
  CI (99.9%): [229.887, 424.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  56.816 ±(99.9%) 16.896 B/op [Average]
  (min, avg, max) = (48.967, 56.816, 58.824), stdev = 4.388
  CI (99.9%): [39.920, 73.712] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.010 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻³, 0.002, 0.007), stdev = 0.003
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  29.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
  CI (99.9%): [29.000, 29.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.304
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 32.53% complete, ETA 01:18:37
# Fork: 1 of 1
# Warmup Iteration   1: 6884.424 ops/ms
# Warmup Iteration   2: 7010.330 ops/ms
# Warmup Iteration   3: 6982.715 ops/ms
Iteration   1: 6952.223 ops/ms
                 ·gc.alloc.rate:                   353.586 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          394.615 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     62.501 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        7.000 counts
                 ·gc.time:                         5.000 ms

Iteration   2: 6960.005 ops/ms
                 ·gc.alloc.rate:                   353.975 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.240 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.513 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         7.000 ms

Iteration   3: 6948.142 ops/ms
                 ·gc.alloc.rate:                   353.380 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.249 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.604 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         7.000 ms

Iteration   4: 6919.114 ops/ms
                 ·gc.alloc.rate:                   351.899 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.240 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     53.829 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         4.000 ms

Iteration   5: 6909.741 ops/ms
                 ·gc.alloc.rate:                   351.423 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          394.612 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     62.885 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        7.000 counts
                 ·gc.time:                         4.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6937.845 ±(99.9%) 84.901 ops/ms [Average]
  (min, avg, max) = (6909.741, 6937.845, 6960.005), stdev = 22.048
  CI (99.9%): [6852.945, 7022.746] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  352.853 ±(99.9%) 4.317 MB/sec [Average]
  (min, avg, max) = (351.423, 352.853, 353.975), stdev = 1.121
  CI (99.9%): [348.535, 357.170] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [56.002, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  360.791 ±(99.9%) 118.890 MB/sec [Average]
  (min, avg, max) = (338.240, 360.791, 394.615), stdev = 30.875
  CI (99.9%): [241.901, 479.681] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  57.266 ±(99.9%) 19.088 B/op [Average]
  (min, avg, max) = (53.513, 57.266, 62.885), stdev = 4.957
  CI (99.9%): [38.178, 76.354] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.010 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.003
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  32.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
  CI (99.9%): [32.000, 32.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 33.73% complete, ETA 01:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 6433.948 ops/ms
# Warmup Iteration   2: 6553.548 ops/ms
# Warmup Iteration   3: 6596.648 ops/ms
Iteration   1: 6572.608 ops/ms
                 ·gc.alloc.rate:                   334.279 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.241 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.666 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         5.000 ms

Iteration   2: 6592.922 ops/ms
                 ·gc.alloc.rate:                   335.313 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.245 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.492 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         4.000 ms

Iteration   3: 6561.257 ops/ms
                 ·gc.alloc.rate:                   333.700 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.241 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.764 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         5.000 ms

Iteration   4: 6588.215 ops/ms
                 ·gc.alloc.rate:                   335.059 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.228 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.532 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         4.000 ms

Iteration   5: 6606.465 ops/ms
                 ·gc.alloc.rate:                   335.992 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          338.234 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.376 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        6.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  6584.293 ±(99.9%) 68.033 ops/ms [Average]
  (min, avg, max) = (6561.257, 6584.293, 6606.465), stdev = 17.668
  CI (99.9%): [6516.260, 6652.326] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  334.869 ±(99.9%) 3.449 MB/sec [Average]
  (min, avg, max) = (333.700, 334.869, 335.992), stdev = 0.896
  CI (99.9%): [331.419, 338.318] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.002), stdev = 0.001
  CI (99.9%): [56.002, 56.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  338.238 ±(99.9%) 0.026 MB/sec [Average]
  (min, avg, max) = (338.228, 338.238, 338.245), stdev = 0.007
  CI (99.9%): [338.211, 338.264] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  56.566 ±(99.9%) 0.584 B/op [Average]
  (min, avg, max) = (56.376, 56.566, 56.764), stdev = 0.152
  CI (99.9%): [55.982, 57.151] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.010 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.003
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  30.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
  CI (99.9%): [30.000, 30.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  21.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
  CI (99.9%): [21.000, 21.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 34.94% complete, ETA 01:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 1254.498 ops/ms
# Warmup Iteration   2: 1279.109 ops/ms
# Warmup Iteration   3: 1282.881 ops/ms
Iteration   1: 1288.060 ops/ms
                 ·gc.alloc.rate:                   65.510 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     48.192 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   2: 1282.786 ops/ms
                 ·gc.alloc.rate:               65.242 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.375 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 48.391 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   3: 1275.574 ops/ms
                 ·gc.alloc.rate:                   64.874 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     48.664 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   4: 1283.448 ops/ms
                 ·gc.alloc.rate:               65.274 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 48.365 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   5: 1282.779 ops/ms
                 ·gc.alloc.rate:                   65.243 MB/sec
                 ·gc.alloc.rate.norm:              56.004 B/op
                 ·gc.churn.G1_Eden_Space:          112.747 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     96.781 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1282.530 ±(99.9%) 17.214 ops/ms [Average]
  (min, avg, max) = (1275.574, 1282.530, 1288.060), stdev = 4.470
  CI (99.9%): [1265.316, 1299.743] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  65.229 ±(99.9%) 0.876 MB/sec [Average]
  (min, avg, max) = (64.874, 65.229, 65.510), stdev = 0.228
  CI (99.9%): [64.353, 66.105] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.003 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (56.002, 56.003, 56.004), stdev = 0.001
  CI (99.9%): [55.999, 56.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  67.648 ±(99.9%) 97.078 MB/sec [Average]
  (min, avg, max) = (56.373, 67.648, 112.747), stdev = 25.211
  CI (99.9%): [≈ 0, 164.727] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  58.079 ±(99.9%) 83.312 B/op [Average]
  (min, avg, max) = (48.192, 58.079, 96.781), stdev = 21.636
  CI (99.9%): [≈ 0, 141.391] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  6.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
  CI (99.9%): [6.000, 6.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  9.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 36.14% complete, ETA 01:14:24
# Fork: 1 of 1
# Warmup Iteration   1: 1758.426 ops/ms
# Warmup Iteration   2: 1782.213 ops/ms
# Warmup Iteration   3: 1784.400 ops/ms
Iteration   1: 1783.239 ops/ms
                 ·gc.alloc.rate:                   90.695 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     69.620 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 1787.007 ops/ms
                 ·gc.alloc.rate:               90.885 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 34.737 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   3: 1760.433 ops/ms
                 ·gc.alloc.rate:                   89.533 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.744 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     70.522 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 1786.313 ops/ms
                 ·gc.alloc.rate:                   90.853 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.750 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     69.501 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 1783.646 ops/ms
                 ·gc.alloc.rate:                   90.714 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     34.802 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1780.128 ±(99.9%) 42.858 ops/ms [Average]
  (min, avg, max) = (1760.433, 1780.128, 1787.007), stdev = 11.130
  CI (99.9%): [1737.270, 1822.986] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  90.536 ±(99.9%) 2.183 MB/sec [Average]
  (min, avg, max) = (89.533, 90.536, 90.885), stdev = 0.567
  CI (99.9%): [88.353, 92.719] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [55.999, 56.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  90.198 ±(99.9%) 118.896 MB/sec [Average]
  (min, avg, max) = (56.374, 90.198, 112.750), stdev = 30.877
  CI (99.9%): [≈ 0, 209.094] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  55.836 ±(99.9%) 74.069 B/op [Average]
  (min, avg, max) = (34.737, 55.836, 70.522), stdev = 19.235
  CI (99.9%): [≈ 0, 129.905] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  8.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
  CI (99.9%): [8.000, 8.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 37.35% complete, ETA 01:13:00
# Fork: 1 of 1
# Warmup Iteration   1: 1670.521 ops/ms
# Warmup Iteration   2: 1705.088 ops/ms
# Warmup Iteration   3: 1702.152 ops/ms
Iteration   1: 1701.186 ops/ms
                 ·gc.alloc.rate:               86.524 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      112.750 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 72.978 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     4.000 ms

Iteration   2: 1696.920 ops/ms
                 ·gc.alloc.rate:               86.304 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 36.581 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   3: 1697.752 ops/ms
                 ·gc.alloc.rate:                   86.347 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.747 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     73.126 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 1699.994 ops/ms
                 ·gc.alloc.rate:               86.459 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 36.515 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   5: 1700.707 ops/ms
                 ·gc.alloc.rate:                   86.498 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     72.999 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1699.312 ±(99.9%) 7.223 ops/ms [Average]
  (min, avg, max) = (1696.920, 1699.312, 1701.186), stdev = 1.876
  CI (99.9%): [1692.089, 1706.535] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  86.426 ±(99.9%) 0.370 MB/sec [Average]
  (min, avg, max) = (86.304, 86.426, 86.524), stdev = 0.096
  CI (99.9%): [86.056, 86.797] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  56.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (56.002, 56.003, 56.003), stdev = 0.001
  CI (99.9%): [55.999, 56.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  90.199 ±(99.9%) 118.899 MB/sec [Average]
  (min, avg, max) = (56.374, 90.199, 112.750), stdev = 30.878
  CI (99.9%): [≈ 0, 209.098] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  58.440 ±(99.9%) 76.953 B/op [Average]
  (min, avg, max) = (36.515, 58.440, 73.126), stdev = 19.985
  CI (99.9%): [≈ 0, 135.393] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.013 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
  CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
  CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  8.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
  CI (99.9%): [8.000, 8.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  13.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 38.55% complete, ETA 01:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 1.394 ops/ms
# Warmup Iteration   2: 1.395 ops/ms
# Warmup Iteration   3: 1.401 ops/ms
Iteration   1: 1.401 ops/ms
                 ·gc.alloc.rate:      9.122 MB/sec
                 ·gc.alloc.rate.norm: 7168.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.400 ops/ms
                 ·gc.alloc.rate:      9.116 MB/sec
                 ·gc.alloc.rate.norm: 7168.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.401 ops/ms
                 ·gc.alloc.rate:      9.121 MB/sec
                 ·gc.alloc.rate.norm: 7168.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.401 ops/ms
                 ·gc.alloc.rate:      9.120 MB/sec
                 ·gc.alloc.rate.norm: 7168.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.400 ops/ms
                 ·gc.alloc.rate:      9.112 MB/sec
                 ·gc.alloc.rate.norm: 7168.039 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.401 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.400, 1.401, 1.401), stdev = 0.001
  CI (99.9%): [1.398, 1.403] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  9.118 ±(99.9%) 0.015 MB/sec [Average]
  (min, avg, max) = (9.112, 9.118, 9.122), stdev = 0.004
  CI (99.9%): [9.103, 9.133] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  7168.033 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (7168.031, 7168.033, 7168.039), stdev = 0.003
  CI (99.9%): [7168.020, 7168.046] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 39.76% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 1.978 ops/ms
# Warmup Iteration   2: 1.981 ops/ms
# Warmup Iteration   3: 1.977 ops/ms
Iteration   1: 1.974 ops/ms
                 ·gc.alloc.rate:      12.853 MB/sec
                 ·gc.alloc.rate.norm: 7168.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.975 ops/ms
                 ·gc.alloc.rate:      12.856 MB/sec
                 ·gc.alloc.rate.norm: 7168.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.972 ops/ms
                 ·gc.alloc.rate:                   12.841 MB/sec
                 ·gc.alloc.rate.norm:              7169.377 B/op
                 ·gc.churn.G1_Eden_Space:          56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     31473.761 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.982 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   4: 1.968 ops/ms
                 ·gc.alloc.rate:      12.810 MB/sec
                 ·gc.alloc.rate.norm: 7168.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.969 ops/ms
                 ·gc.alloc.rate:      12.815 MB/sec
                 ·gc.alloc.rate.norm: 7168.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.972 ±(99.9%) 0.012 ops/ms [Average]
  (min, avg, max) = (1.968, 1.972, 1.975), stdev = 0.003
  CI (99.9%): [1.959, 1.984] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  12.835 ±(99.9%) 0.082 MB/sec [Average]
  (min, avg, max) = (12.810, 12.835, 12.856), stdev = 0.021
  CI (99.9%): [12.753, 12.917] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  7168.293 ±(99.9%) 2.334 B/op [Average]
  (min, avg, max) = (7168.022, 7168.293, 7169.377), stdev = 0.606
  CI (99.9%): [7165.960, 7170.627] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  11.274 ±(99.9%) 97.074 MB/sec [Average]
  (min, avg, max) = (≈ 0, 11.274, 56.371), stdev = 25.210
  CI (99.9%): [≈ 0, 108.348] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  6294.752 ±(99.9%) 54199.715 B/op [Average]
  (min, avg, max) = (≈ 0, 6294.752, 31473.761), stdev = 14075.494
  CI (99.9%): [≈ 0, 60494.467] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻³ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.196 ±(99.9%) 1.692 B/op [Average]
  (min, avg, max) = (≈ 0, 0.196, 0.982), stdev = 0.439
  CI (99.9%): [≈ 0, 1.888] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  2.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 40.96% complete, ETA 01:08:47
# Fork: 1 of 1
# Warmup Iteration   1: 1.900 ops/ms
# Warmup Iteration   2: 1.906 ops/ms
# Warmup Iteration   3: 1.912 ops/ms
Iteration   1: 1.913 ops/ms
                 ·gc.alloc.rate:      12.454 MB/sec
                 ·gc.alloc.rate.norm: 7168.021 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.911 ops/ms
                 ·gc.alloc.rate:      12.439 MB/sec
                 ·gc.alloc.rate.norm: 7168.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.912 ops/ms
                 ·gc.alloc.rate:               12.447 MB/sec
                 ·gc.alloc.rate.norm:          7169.420 B/op
                 ·gc.churn.G1_Eden_Space:      56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 32468.068 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 1.916 ops/ms
                 ·gc.alloc.rate:      12.472 MB/sec
                 ·gc.alloc.rate.norm: 7168.021 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.914 ops/ms
                 ·gc.alloc.rate:      12.462 MB/sec
                 ·gc.alloc.rate.norm: 7168.023 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  1.913 ±(99.9%) 0.008 ops/ms [Average]
  (min, avg, max) = (1.911, 1.913, 1.916), stdev = 0.002
  CI (99.9%): [1.906, 1.921] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  12.455 ±(99.9%) 0.049 MB/sec [Average]
  (min, avg, max) = (12.439, 12.455, 12.472), stdev = 0.013
  CI (99.9%): [12.406, 12.503] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  7168.302 ±(99.9%) 2.407 B/op [Average]
  (min, avg, max) = (7168.021, 7168.302, 7169.420), stdev = 0.625
  CI (99.9%): [7165.895, 7170.708] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  11.274 ±(99.9%) 97.073 MB/sec [Average]
  (min, avg, max) = (≈ 0, 11.274, 56.371), stdev = 25.210
  CI (99.9%): [≈ 0, 108.348] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  6493.614 ±(99.9%) 55911.971 B/op [Average]
  (min, avg, max) = (≈ 0, 6493.614, 32468.068), stdev = 14520.161
  CI (99.9%): [≈ 0, 62405.585] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  1.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
  CI (99.9%): [1.000, 1.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.time":
  2.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
  CI (99.9%): [2.000, 2.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 42.17% complete, ETA 01:07:23
# Fork: 1 of 1
# Warmup Iteration   1: 9157.758 ops/ms
# Warmup Iteration   2: 8651.305 ops/ms
# Warmup Iteration   3: 8701.506 ops/ms
Iteration   1: 8703.162 ops/ms
                 ·gc.alloc.rate:                   442.636 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          450.987 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.059 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        8.000 counts
                 ·gc.time:                         6.000 ms

Iteration   2: 8700.178 ops/ms
                 ·gc.alloc.rate:                   442.491 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          450.999 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.079 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        8.000 counts
                 ·gc.time:                         5.000 ms

Iteration   3: 8701.508 ops/ms
                 ·gc.alloc.rate:                   442.552 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          450.990 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.070 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        8.000 counts
                 ·gc.time:                         7.000 ms

Iteration   4: 8702.002 ops/ms
                 ·gc.alloc.rate:                   442.574 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          450.984 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.067 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        8.000 counts
                 ·gc.time:                         5.000 ms

Iteration   5: 8701.787 ops/ms
                 ·gc.alloc.rate:                   442.561 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          450.983 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.068 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        8.000 counts
                 ·gc.time:                         4.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  8701.728 ±(99.9%) 4.123 ops/ms [Average]
  (min, avg, max) = (8700.178, 8701.728, 8703.162), stdev = 1.071
  CI (99.9%): [8697.605, 8705.850] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  442.563 ±(99.9%) 0.200 MB/sec [Average]
  (min, avg, max) = (442.491, 442.563, 442.636), stdev = 0.052
  CI (99.9%): [442.363, 442.762] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.002), stdev = 0.001
  CI (99.9%): [56.002, 56.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  450.989 ±(99.9%) 0.024 MB/sec [Average]
  (min, avg, max) = (450.983, 450.989, 450.999), stdev = 0.006
  CI (99.9%): [450.964, 451.013] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  57.069 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (57.059, 57.069, 57.079), stdev = 0.007
  CI (99.9%): [57.041, 57.097] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.011 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.007), stdev = 0.003
  CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  40.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
  CI (99.9%): [40.000, 40.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  27.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
  CI (99.9%): [27.000, 27.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 43.37% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 10525.890 ops/ms
# Warmup Iteration   2: 10571.488 ops/ms
# Warmup Iteration   3: 11019.846 ops/ms
Iteration   1: 11019.454 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11008.604 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11021.727 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11021.573 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11022.230 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11018.718 ±(99.9%) 22.150 ops/ms [Average]
  (min, avg, max) = (11008.604, 11018.718, 11022.230), stdev = 5.752
  CI (99.9%): [10996.567, 11040.868] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 44.58% complete, ETA 01:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 11003.504 ops/ms
# Warmup Iteration   2: 11731.348 ops/ms
# Warmup Iteration   3: 12645.256 ops/ms
Iteration   1: 12632.691 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12652.144 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12633.004 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12634.969 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12629.686 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12636.498 ±(99.9%) 34.454 ops/ms [Average]
  (min, avg, max) = (12629.686, 12636.498, 12652.144), stdev = 8.948
  CI (99.9%): [12602.044, 12670.953] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 45.78% complete, ETA 01:03:10
# Fork: 1 of 1
# Warmup Iteration   1: 914.059 ops/ms
# Warmup Iteration   2: 920.767 ops/ms
# Warmup Iteration   3: 938.080 ops/ms
Iteration   1: 951.710 ops/ms
                 ·gc.alloc.rate:                   48.404 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          56.375 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     65.225 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   2: 940.250 ops/ms
                 ·gc.alloc.rate:                   47.821 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     66.019 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   3: 949.133 ops/ms
                 ·gc.alloc.rate:      48.270 MB/sec
                 ·gc.alloc.rate.norm: 56.000 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 937.212 ops/ms
                 ·gc.alloc.rate:               47.666 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 66.233 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   5: 950.321 ops/ms
                 ·gc.alloc.rate:               48.333 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 65.319 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  945.725 ±(99.9%) 25.177 ops/ms [Average]
  (min, avg, max) = (937.212, 945.725, 951.710), stdev = 6.538
  CI (99.9%): [920.548, 970.902] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  48.099 ±(99.9%) 1.280 MB/sec [Average]
  (min, avg, max) = (47.666, 48.099, 48.404), stdev = 0.332
  CI (99.9%): [46.819, 49.379] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (56.000, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [55.997, 56.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  45.099 ±(99.9%) 97.079 MB/sec [Average]
  (min, avg, max) = (≈ 0, 45.099, 56.375), stdev = 25.211
  CI (99.9%): [≈ 0, 142.178] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  52.559 ±(99.9%) 113.150 B/op [Average]
  (min, avg, max) = (≈ 0, 52.559, 66.233), stdev = 29.385
  CI (99.9%): [≈ 0, 165.709] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻³ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  4.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
  CI (99.9%): [4.000, 4.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  6.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
  CI (99.9%): [6.000, 6.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 46.99% complete, ETA 01:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 1862.968 ops/ms
# Warmup Iteration   2: 1898.540 ops/ms
# Warmup Iteration   3: 1892.124 ops/ms
Iteration   1: 1713.217 ops/ms
                 ·gc.alloc.rate:                   87.133 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     72.465 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 1900.298 ops/ms
                 ·gc.alloc.rate:                   96.650 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     65.332 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.003 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 1901.231 ops/ms
                 ·gc.alloc.rate:               96.692 MB/sec
                 ·gc.alloc.rate.norm:          56.001 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 32.650 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 1789.067 ops/ms
                 ·gc.alloc.rate:                   90.990 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     69.393 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 1830.608 ops/ms
                 ·gc.alloc.rate:                   93.105 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     67.819 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1826.884 ±(99.9%) 306.127 ops/ms [Average]
  (min, avg, max) = (1713.217, 1826.884, 1901.231), stdev = 79.500
  CI (99.9%): [1520.757, 2133.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  92.914 ±(99.9%) 15.569 MB/sec [Average]
  (min, avg, max) = (87.133, 92.914, 96.692), stdev = 4.043
  CI (99.9%): [77.345, 108.483] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (56.001, 56.003, 56.003), stdev = 0.001
  CI (99.9%): [56.000, 56.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  101.472 ±(99.9%) 97.080 MB/sec [Average]
  (min, avg, max) = (56.373, 101.472, 112.749), stdev = 25.211
  CI (99.9%): [4.393, 198.552] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  61.532 ±(99.9%) 62.964 B/op [Average]
  (min, avg, max) = (32.650, 61.532, 72.465), stdev = 16.351
  CI (99.9%): [≈ 0, 124.495] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.003, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.002 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  9.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 48.19% complete, ETA 01:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 2207.594 ops/ms
# Warmup Iteration   2: 2267.409 ops/ms
# Warmup Iteration   3: 2262.273 ops/ms
Iteration   1: 2263.223 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2265.130 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2265.224 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2262.009 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2263.256 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2263.768 ±(99.9%) 5.318 ops/ms [Average]
  (min, avg, max) = (2262.009, 2263.768, 2265.224), stdev = 1.381
  CI (99.9%): [2258.450, 2269.087] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 49.40% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 1.120 ops/ms
# Warmup Iteration   2: 1.123 ops/ms
# Warmup Iteration   3: 1.123 ops/ms
Iteration   1: 1.123 ops/ms
                 ·gc.alloc.rate:      0.057 MB/sec
                 ·gc.alloc.rate.norm: 56.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.123 ops/ms
                 ·gc.alloc.rate:      0.057 MB/sec
                 ·gc.alloc.rate.norm: 56.039 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.123 ops/ms
                 ·gc.alloc.rate:      0.057 MB/sec
                 ·gc.alloc.rate.norm: 56.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.123 ops/ms
                 ·gc.alloc.rate:      0.057 MB/sec
                 ·gc.alloc.rate.norm: 56.039 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.123 ops/ms
                 ·gc.alloc.rate:      0.057 MB/sec
                 ·gc.alloc.rate.norm: 56.039 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.123 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (1.123, 1.123, 1.123), stdev = 0.001
  CI (99.9%): [1.122, 1.124] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.057 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.057, 0.057, 0.057), stdev = 0.001
  CI (99.9%): [0.057, 0.057] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.038 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (56.036, 56.038, 56.039), stdev = 0.002
  CI (99.9%): [56.032, 56.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 50.60% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.148 ops/ms
# Warmup Iteration   2: 1.147 ops/ms
# Warmup Iteration   3: 1.146 ops/ms
Iteration   1: 1.147 ops/ms
                 ·gc.alloc.rate:      0.058 MB/sec
                 ·gc.alloc.rate.norm: 56.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.150 ops/ms
                 ·gc.alloc.rate:      0.059 MB/sec
                 ·gc.alloc.rate.norm: 56.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.147 ops/ms
                 ·gc.alloc.rate:      0.058 MB/sec
                 ·gc.alloc.rate.norm: 56.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.148 ops/ms
                 ·gc.alloc.rate:      0.058 MB/sec
                 ·gc.alloc.rate.norm: 56.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.149 ops/ms
                 ·gc.alloc.rate:      0.058 MB/sec
                 ·gc.alloc.rate.norm: 56.038 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.148 ±(99.9%) 0.005 ops/ms [Average]
  (min, avg, max) = (1.147, 1.148, 1.150), stdev = 0.001
  CI (99.9%): [1.143, 1.153] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.058 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.058, 0.058, 0.059), stdev = 0.001
  CI (99.9%): [0.058, 0.059] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.037 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (56.035, 56.037, 56.038), stdev = 0.002
  CI (99.9%): [56.031, 56.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 51.81% complete, ETA 00:56:09
# Fork: 1 of 1
# Warmup Iteration   1: 1.551 ops/ms
# Warmup Iteration   2: 1.557 ops/ms
# Warmup Iteration   3: 1.556 ops/ms
Iteration   1: 1.556 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.557 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.556 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.557 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.556 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.556 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.556, 1.556, 1.557), stdev = 0.001
  CI (99.9%): [1.555, 1.558] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.079 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.079, 0.079, 0.079), stdev = 0.001
  CI (99.9%): [0.079, 0.079] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.030 ±(99.9%) 0.012 B/op [Average]
  (min, avg, max) = (56.028, 56.030, 56.035), stdev = 0.003
  CI (99.9%): [56.018, 56.041] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 53.01% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 9209.037 ops/ms
# Warmup Iteration   2: 9625.011 ops/ms
# Warmup Iteration   3: 9877.832 ops/ms
Iteration   1: 10017.883 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10023.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10021.309 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10017.827 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10016.794 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10019.485 ±(99.9%) 11.043 ops/ms [Average]
  (min, avg, max) = (10016.794, 10019.485, 10023.610), stdev = 2.868
  CI (99.9%): [10008.442, 10030.527] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 54.22% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 11969.632 ops/ms
# Warmup Iteration   2: 13040.545 ops/ms
# Warmup Iteration   3: 12698.896 ops/ms
Iteration   1: 12702.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12706.665 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12702.796 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12701.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12697.465 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12702.079 ±(99.9%) 12.673 ops/ms [Average]
  (min, avg, max) = (12697.465, 12702.079, 12706.665), stdev = 3.291
  CI (99.9%): [12689.406, 12714.751] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 55.42% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 11218.620 ops/ms
# Warmup Iteration   2: 12080.518 ops/ms
# Warmup Iteration   3: 12640.949 ops/ms
Iteration   1: 12637.097 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12638.795 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12635.990 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12644.263 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12617.640 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12634.757 ±(99.9%) 38.825 ops/ms [Average]
  (min, avg, max) = (12617.640, 12634.757, 12644.263), stdev = 10.083
  CI (99.9%): [12595.932, 12673.582] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 56.63% complete, ETA 00:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 1064.991 ops/ms
# Warmup Iteration   2: 1062.623 ops/ms
# Warmup Iteration   3: 1072.625 ops/ms
Iteration   1: 1082.610 ops/ms
                 ·gc.alloc.rate:               55.060 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 57.338 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   2: 1090.656 ops/ms
                 ·gc.alloc.rate:                   55.470 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.915 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   3: 1088.834 ops/ms
                 ·gc.alloc.rate:                   55.377 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.010 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻⁴ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   4: 1085.377 ops/ms
                 ·gc.alloc.rate:               55.201 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 57.191 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms

Iteration   5: 1086.215 ops/ms
                 ·gc.alloc.rate:                   55.244 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.147 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1086.739 ±(99.9%) 12.011 ops/ms [Average]
  (min, avg, max) = (1082.610, 1086.739, 1090.656), stdev = 3.119
  CI (99.9%): [1074.728, 1098.749] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  55.270 ±(99.9%) 0.611 MB/sec [Average]
  (min, avg, max) = (55.060, 55.270, 55.470), stdev = 0.159
  CI (99.9%): [54.659, 55.882] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.002), stdev = 0.001
  CI (99.9%): [56.002, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  56.373 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (56.373, 56.373, 56.374), stdev = 0.001
  CI (99.9%): [56.371, 56.375] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  57.120 ±(99.9%) 0.631 B/op [Average]
  (min, avg, max) = (56.915, 57.120, 57.338), stdev = 0.164
  CI (99.9%): [56.489, 57.752] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻³ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  5.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  8.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
  CI (99.9%): [8.000, 8.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 57.83% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 2583.545 ops/ms
# Warmup Iteration   2: 2575.485 ops/ms
# Warmup Iteration   3: 2612.719 ops/ms
Iteration   1: 2613.189 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2615.165 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2612.033 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2615.776 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2616.543 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2614.541 ±(99.9%) 7.215 ops/ms [Average]
  (min, avg, max) = (2612.033, 2614.541, 2616.543), stdev = 1.874
  CI (99.9%): [2607.326, 2621.756] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 59.04% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 2653.215 ops/ms
# Warmup Iteration   2: 2652.271 ops/ms
# Warmup Iteration   3: 2672.583 ops/ms
Iteration   1: 2674.027 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2675.121 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2674.074 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2675.269 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2675.427 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2674.784 ±(99.9%) 2.612 ops/ms [Average]
  (min, avg, max) = (2674.027, 2674.784, 2675.427), stdev = 0.678
  CI (99.9%): [2672.172, 2677.396] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 60.24% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.198 ops/ms
# Warmup Iteration   2: 1.204 ops/ms
# Warmup Iteration   3: 1.201 ops/ms
Iteration   1: 1.203 ops/ms
                 ·gc.alloc.rate:      0.061 MB/sec
                 ·gc.alloc.rate.norm: 56.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.201 ops/ms
                 ·gc.alloc.rate:      0.061 MB/sec
                 ·gc.alloc.rate.norm: 56.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.201 ops/ms
                 ·gc.alloc.rate:      0.061 MB/sec
                 ·gc.alloc.rate.norm: 56.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.203 ops/ms
                 ·gc.alloc.rate:      0.061 MB/sec
                 ·gc.alloc.rate.norm: 56.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.201 ops/ms
                 ·gc.alloc.rate:      0.061 MB/sec
                 ·gc.alloc.rate.norm: 56.037 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.202 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (1.201, 1.202, 1.203), stdev = 0.001
  CI (99.9%): [1.198, 1.206] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.061 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.061, 0.061, 0.061), stdev = 0.001
  CI (99.9%): [0.061, 0.061] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.035 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (56.034, 56.035, 56.037), stdev = 0.001
  CI (99.9%): [56.029, 56.041] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 61.45% complete, ETA 00:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.492 ops/ms
# Warmup Iteration   2: 1.498 ops/ms
# Warmup Iteration   3: 1.495 ops/ms
Iteration   1: 1.495 ops/ms
                 ·gc.alloc.rate:      0.076 MB/sec
                 ·gc.alloc.rate.norm: 56.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.496 ops/ms
                 ·gc.alloc.rate:      0.076 MB/sec
                 ·gc.alloc.rate.norm: 56.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.496 ops/ms
                 ·gc.alloc.rate:      0.076 MB/sec
                 ·gc.alloc.rate.norm: 56.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.496 ops/ms
                 ·gc.alloc.rate:      0.076 MB/sec
                 ·gc.alloc.rate.norm: 56.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.497 ops/ms
                 ·gc.alloc.rate:      0.076 MB/sec
                 ·gc.alloc.rate.norm: 56.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.496 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.495, 1.496, 1.497), stdev = 0.001
  CI (99.9%): [1.493, 1.499] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.076 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.076, 0.076, 0.076), stdev = 0.001
  CI (99.9%): [0.076, 0.076] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.030 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (56.027, 56.030, 56.036), stdev = 0.004
  CI (99.9%): [56.016, 56.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 62.65% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.543 ops/ms
# Warmup Iteration   2: 1.548 ops/ms
# Warmup Iteration   3: 1.548 ops/ms
Iteration   1: 1.549 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.551 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.550 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.550 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.549 ops/ms
                 ·gc.alloc.rate:      0.079 MB/sec
                 ·gc.alloc.rate.norm: 56.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.550 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.549, 1.550, 1.551), stdev = 0.001
  CI (99.9%): [1.547, 1.552] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.079 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.079, 0.079, 0.079), stdev = 0.001
  CI (99.9%): [0.079, 0.079] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.030 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (56.026, 56.030, 56.035), stdev = 0.003
  CI (99.9%): [56.018, 56.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 63.86% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 9171.545 ops/ms
# Warmup Iteration   2: 9535.998 ops/ms
# Warmup Iteration   3: 9653.351 ops/ms
Iteration   1: 9647.646 ops/ms
                 ·gc.alloc.rate:                   490.675 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          507.362 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.907 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        9.000 counts
                 ·gc.time:                         8.000 ms

Iteration   2: 9646.776 ops/ms
                 ·gc.alloc.rate:                   490.624 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          450.990 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     51.478 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        8.000 counts
                 ·gc.time:                         4.000 ms

Iteration   3: 9627.916 ops/ms
                 ·gc.alloc.rate:                   489.666 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          507.359 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.026 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        9.000 counts
                 ·gc.time:                         6.000 ms

Iteration   4: 9641.404 ops/ms
                 ·gc.alloc.rate:                   490.351 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          507.358 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.945 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        9.000 counts
                 ·gc.time:                         5.000 ms

Iteration   5: 9649.411 ops/ms
                 ·gc.alloc.rate:                   490.749 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          507.349 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     57.897 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        9.000 counts
                 ·gc.time:                         5.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9642.630 ±(99.9%) 33.698 ops/ms [Average]
  (min, avg, max) = (9627.916, 9642.630, 9649.411), stdev = 8.751
  CI (99.9%): [9608.932, 9676.328] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  490.413 ±(99.9%) 1.710 MB/sec [Average]
  (min, avg, max) = (489.666, 490.413, 490.749), stdev = 0.444
  CI (99.9%): [488.703, 492.123] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.002), stdev = 0.001
  CI (99.9%): [56.002, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  496.084 ±(99.9%) 97.067 MB/sec [Average]
  (min, avg, max) = (450.990, 496.084, 507.362), stdev = 25.208
  CI (99.9%): [399.016, 593.151] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  56.651 ±(99.9%) 11.136 B/op [Average]
  (min, avg, max) = (51.478, 56.651, 58.026), stdev = 2.892
  CI (99.9%): [45.515, 67.786] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  44.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
  CI (99.9%): [44.000, 44.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  28.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
  CI (99.9%): [28.000, 28.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 65.06% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 10822.807 ops/ms
# Warmup Iteration   2: 11015.429 ops/ms
# Warmup Iteration   3: 11100.005 ops/ms
Iteration   1: 11111.511 ops/ms
                 ·gc.alloc.rate:                   565.115 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.725 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     55.865 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         7.000 ms

Iteration   2: 11114.747 ops/ms
                 ·gc.alloc.rate:                   565.289 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.740 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     55.849 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         7.000 ms

Iteration   3: 11107.474 ops/ms
                 ·gc.alloc.rate:                   564.914 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.731 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     55.885 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         8.000 ms

Iteration   4: 11106.224 ops/ms
                 ·gc.alloc.rate:                   564.844 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.727 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     55.892 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         6.000 ms

Iteration   5: 11107.234 ops/ms
                 ·gc.alloc.rate:                   564.906 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.739 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     55.887 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         10.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11109.438 ±(99.9%) 13.821 ops/ms [Average]
  (min, avg, max) = (11106.224, 11109.438, 11114.747), stdev = 3.589
  CI (99.9%): [11095.617, 11123.258] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  565.014 ±(99.9%) 0.711 MB/sec [Average]
  (min, avg, max) = (564.844, 565.014, 565.289), stdev = 0.185
  CI (99.9%): [564.302, 565.725] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.002), stdev = 0.001
  CI (99.9%): [56.002, 56.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  563.732 ±(99.9%) 0.027 MB/sec [Average]
  (min, avg, max) = (563.725, 563.732, 563.740), stdev = 0.007
  CI (99.9%): [563.706, 563.759] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  55.875 ±(99.9%) 0.069 B/op [Average]
  (min, avg, max) = (55.849, 55.875, 55.892), stdev = 0.018
  CI (99.9%): [55.806, 55.945] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  50.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
  CI (99.9%): [50.000, 50.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  38.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (6.000, 7.600, 10.000), stdev = 1.517
  CI (99.9%): [38.000, 38.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 66.27% complete, ETA 00:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 10384.373 ops/ms
# Warmup Iteration   2: 10554.974 ops/ms
# Warmup Iteration   3: 10627.398 ops/ms
Iteration   1: 10625.791 ops/ms
                 ·gc.alloc.rate:                   540.414 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          507.356 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     52.577 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        9.000 counts
                 ·gc.time:                         6.000 ms

Iteration   2: 10628.019 ops/ms
                 ·gc.alloc.rate:                   540.529 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.733 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.407 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         6.000 ms

Iteration   3: 10625.504 ops/ms
                 ·gc.alloc.rate:                   540.402 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.736 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.421 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         6.000 ms

Iteration   4: 10629.272 ops/ms
                 ·gc.alloc.rate:                   540.597 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          507.368 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     52.560 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        9.000 counts
                 ·gc.time:                         5.000 ms

Iteration   5: 10624.232 ops/ms
                 ·gc.alloc.rate:                   540.332 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          563.727 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     58.427 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        10.000 counts
                 ·gc.time:                         11.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10626.563 ±(99.9%) 7.848 ops/ms [Average]
  (min, avg, max) = (10624.232, 10626.563, 10629.272), stdev = 2.038
  CI (99.9%): [10618.716, 10634.411] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  540.455 ±(99.9%) 0.410 MB/sec [Average]
  (min, avg, max) = (540.332, 540.455, 540.597), stdev = 0.106
  CI (99.9%): [540.045, 540.865] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.002), stdev = 0.001
  CI (99.9%): [56.002, 56.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  541.184 ±(99.9%) 118.890 MB/sec [Average]
  (min, avg, max) = (507.356, 541.184, 563.736), stdev = 30.875
  CI (99.9%): [422.294, 660.075] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  56.078 ±(99.9%) 12.338 B/op [Average]
  (min, avg, max) = (52.560, 56.078, 58.427), stdev = 3.204
  CI (99.9%): [43.740, 68.416] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  48.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
  CI (99.9%): [48.000, 48.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  34.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.387
  CI (99.9%): [34.000, 34.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 67.47% complete, ETA 00:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 1538.746 ops/ms
# Warmup Iteration   2: 1560.932 ops/ms
# Warmup Iteration   3: 1565.566 ops/ms
Iteration   1: 1571.909 ops/ms
                 ·gc.alloc.rate:               79.945 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 39.490 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   2: 1569.368 ops/ms
                 ·gc.alloc.rate:                   79.816 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     39.554 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   3: 1571.521 ops/ms
                 ·gc.alloc.rate:                   79.926 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     79.000 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.004 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 1564.468 ops/ms
                 ·gc.alloc.rate:                   79.565 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     39.678 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 1566.612 ops/ms
                 ·gc.alloc.rate:               79.678 MB/sec
                 ·gc.alloc.rate.norm:          56.003 B/op
                 ·gc.churn.G1_Eden_Space:      112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 79.247 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1568.776 ±(99.9%) 12.319 ops/ms [Average]
  (min, avg, max) = (1564.468, 1568.776, 1571.909), stdev = 3.199
  CI (99.9%): [1556.457, 1581.094] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  79.786 ±(99.9%) 0.628 MB/sec [Average]
  (min, avg, max) = (79.565, 79.786, 79.945), stdev = 0.163
  CI (99.9%): [79.158, 80.414] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.002 ±(99.9%) 0.004 B/op [Average]
  (min, avg, max) = (56.002, 56.002, 56.003), stdev = 0.001
  CI (99.9%): [55.999, 56.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  78.923 ±(99.9%) 118.897 MB/sec [Average]
  (min, avg, max) = (56.373, 78.923, 112.748), stdev = 30.877
  CI (99.9%): [≈ 0, 197.820] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  55.394 ±(99.9%) 83.414 B/op [Average]
  (min, avg, max) = (39.490, 55.394, 79.247), stdev = 21.662
  CI (99.9%): [≈ 0, 138.808] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
  CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  7.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
  CI (99.9%): [7.000, 7.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  11.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 68.67% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 2343.651 ops/ms
# Warmup Iteration   2: 2369.540 ops/ms
# Warmup Iteration   3: 2383.213 ops/ms
Iteration   1: 2383.132 ops/ms
                 ·gc.alloc.rate:               121.204 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 52.095 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     3.000 ms

Iteration   2: 2360.249 ops/ms
                 ·gc.alloc.rate:                   120.041 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     52.600 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 2383.066 ops/ms
                 ·gc.alloc.rate:                   121.200 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     52.096 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 2365.524 ops/ms
                 ·gc.alloc.rate:                   120.310 MB/sec
                 ·gc.alloc.rate.norm:              56.004 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     52.483 B/op
                 ·gc.churn.G1_Survivor_Space:      0.138 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.064 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         4.000 ms

Iteration   5: 2358.436 ops/ms
                 ·gc.alloc.rate:                   119.956 MB/sec
                 ·gc.alloc.rate.norm:              56.003 B/op
                 ·gc.churn.G1_Eden_Space:          169.130 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     78.961 B/op
                 ·gc.churn.G1_Survivor_Space:      0.023 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.011 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         2.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2370.081 ±(99.9%) 46.845 ops/ms [Average]
  (min, avg, max) = (2358.436, 2370.081, 2383.132), stdev = 12.165
  CI (99.9%): [2323.237, 2416.926] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  120.542 ±(99.9%) 2.373 MB/sec [Average]
  (min, avg, max) = (119.956, 120.542, 121.204), stdev = 0.616
  CI (99.9%): [118.169, 122.915] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (56.002, 56.003, 56.004), stdev = 0.001
  CI (99.9%): [56.000, 56.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  124.024 ±(99.9%) 97.094 MB/sec [Average]
  (min, avg, max) = (112.746, 124.024, 169.130), stdev = 25.215
  CI (99.9%): [26.930, 221.118] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  57.647 ±(99.9%) 45.888 B/op [Average]
  (min, avg, max) = (52.095, 57.647, 78.961), stdev = 11.917
  CI (99.9%): [11.759, 103.536] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.034 ±(99.9%) 0.227 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.034, 0.138), stdev = 0.059
  CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.016 ±(99.9%) 0.106 B/op [Average]
  (min, avg, max) = (≈ 0, 0.016, 0.064), stdev = 0.027
  CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  11.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
  CI (99.9%): [11.000, 11.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 69.88% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 2142.204 ops/ms
# Warmup Iteration   2: 2180.076 ops/ms
# Warmup Iteration   3: 2187.022 ops/ms
Iteration   1: 2191.829 ops/ms
                 ·gc.alloc.rate:                   111.475 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.642 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 2184.953 ops/ms
                 ·gc.alloc.rate:               111.127 MB/sec
                 ·gc.alloc.rate.norm:          56.002 B/op
                 ·gc.churn.G1_Eden_Space:      112.750 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 56.820 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     3.000 ms

Iteration   3: 2185.993 ops/ms
                 ·gc.alloc.rate:                   111.177 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.793 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 2185.475 ops/ms
                 ·gc.alloc.rate:                   111.151 MB/sec
                 ·gc.alloc.rate.norm:              56.002 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.806 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 2187.908 ops/ms
                 ·gc.alloc.rate:                   111.279 MB/sec
                 ·gc.alloc.rate.norm:              56.004 B/op
                 ·gc.churn.G1_Eden_Space:          112.747 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     56.743 B/op
                 ·gc.churn.G1_Survivor_Space:      0.151 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.076 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2187.232 ±(99.9%) 10.790 ops/ms [Average]
  (min, avg, max) = (2184.953, 2187.232, 2191.829), stdev = 2.802
  CI (99.9%): [2176.441, 2198.022] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  111.242 ±(99.9%) 0.550 MB/sec [Average]
  (min, avg, max) = (111.127, 111.242, 111.475), stdev = 0.143
  CI (99.9%): [110.692, 111.792] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.003 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (56.002, 56.003, 56.004), stdev = 0.001
  CI (99.9%): [56.000, 56.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space":
  112.747 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (112.746, 112.747, 112.750), stdev = 0.002
  CI (99.9%): [112.741, 112.754] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm":
  56.761 ±(99.9%) 0.280 B/op [Average]
  (min, avg, max) = (56.642, 56.761, 56.820), stdev = 0.073
  CI (99.9%): [56.481, 57.040] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space":
  0.032 ±(99.9%) 0.257 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.032, 0.151), stdev = 0.067
  CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.016 ±(99.9%) 0.129 B/op [Average]
  (min, avg, max) = (≈ 0, 0.016, 0.076), stdev = 0.034
  CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  10.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
  CI (99.9%): [10.000, 10.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 71.08% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.620 ops/ms
# Warmup Iteration   2: 1.624 ops/ms
# Warmup Iteration   3: 1.622 ops/ms
Iteration   1: 1.622 ops/ms
                 ·gc.alloc.rate:      0.083 MB/sec
                 ·gc.alloc.rate.norm: 56.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.623 ops/ms
                 ·gc.alloc.rate:      0.083 MB/sec
                 ·gc.alloc.rate.norm: 56.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.624 ops/ms
                 ·gc.alloc.rate:      0.083 MB/sec
                 ·gc.alloc.rate.norm: 56.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.625 ops/ms
                 ·gc.alloc.rate:      0.083 MB/sec
                 ·gc.alloc.rate.norm: 56.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.621 ops/ms
                 ·gc.alloc.rate:      0.082 MB/sec
                 ·gc.alloc.rate.norm: 56.027 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.623 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.621, 1.623, 1.625), stdev = 0.002
  CI (99.9%): [1.617, 1.629] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.083 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.082, 0.083, 0.083), stdev = 0.001
  CI (99.9%): [0.082, 0.083] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.028 ±(99.9%) 0.012 B/op [Average]
  (min, avg, max) = (56.025, 56.028, 56.033), stdev = 0.003
  CI (99.9%): [56.016, 56.041] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 72.29% complete, ETA 00:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 2.452 ops/ms
# Warmup Iteration   2: 2.463 ops/ms
# Warmup Iteration   3: 2.463 ops/ms
Iteration   1: 2.465 ops/ms
                 ·gc.alloc.rate:      0.125 MB/sec
                 ·gc.alloc.rate.norm: 56.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.462 ops/ms
                 ·gc.alloc.rate:      0.125 MB/sec
                 ·gc.alloc.rate.norm: 56.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.465 ops/ms
                 ·gc.alloc.rate:      0.125 MB/sec
                 ·gc.alloc.rate.norm: 56.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.463 ops/ms
                 ·gc.alloc.rate:      0.125 MB/sec
                 ·gc.alloc.rate.norm: 56.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.466 ops/ms
                 ·gc.alloc.rate:      0.125 MB/sec
                 ·gc.alloc.rate.norm: 56.018 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.464 ±(99.9%) 0.007 ops/ms [Average]
  (min, avg, max) = (2.462, 2.464, 2.466), stdev = 0.002
  CI (99.9%): [2.457, 2.471] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.125 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.125, 0.125, 0.125), stdev = 0.001
  CI (99.9%): [0.125, 0.126] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.019 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (56.017, 56.019, 56.022), stdev = 0.002
  CI (99.9%): [56.011, 56.027] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 73.49% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.036 ops/ms
# Warmup Iteration   2: 2.040 ops/ms
# Warmup Iteration   3: 2.039 ops/ms
Iteration   1: 2.039 ops/ms
                 ·gc.alloc.rate:      0.104 MB/sec
                 ·gc.alloc.rate.norm: 56.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.041 ops/ms
                 ·gc.alloc.rate:      0.104 MB/sec
                 ·gc.alloc.rate.norm: 56.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.040 ops/ms
                 ·gc.alloc.rate:      0.104 MB/sec
                 ·gc.alloc.rate.norm: 56.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.044 ops/ms
                 ·gc.alloc.rate:      0.104 MB/sec
                 ·gc.alloc.rate.norm: 56.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.044 ops/ms
                 ·gc.alloc.rate:      0.104 MB/sec
                 ·gc.alloc.rate.norm: 56.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.042 ±(99.9%) 0.009 ops/ms [Average]
  (min, avg, max) = (2.039, 2.042, 2.044), stdev = 0.002
  CI (99.9%): [2.033, 2.050] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  0.104 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.104, 0.104, 0.104), stdev = 0.001
  CI (99.9%): [0.103, 0.104] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  56.022 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (56.020, 56.022, 56.027), stdev = 0.003
  CI (99.9%): [56.012, 56.032] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 74.70% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 14599.576 ops/ms
# Warmup Iteration   2: 14666.355 ops/ms
# Warmup Iteration   3: 14521.583 ops/ms
Iteration   1: 14522.491 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14522.218 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14518.691 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14521.621 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14514.304 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  14519.865 ±(99.9%) 13.314 ops/ms [Average]
  (min, avg, max) = (14514.304, 14519.865, 14522.491), stdev = 3.458
  CI (99.9%): [14506.551, 14533.179] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 75.90% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 14624.328 ops/ms
# Warmup Iteration   2: 14681.948 ops/ms
# Warmup Iteration   3: 14509.867 ops/ms
Iteration   1: 14507.028 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14497.718 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14507.858 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14505.249 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14509.161 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  14505.403 ±(99.9%) 17.421 ops/ms [Average]
  (min, avg, max) = (14497.718, 14505.403, 14509.161), stdev = 4.524
  CI (99.9%): [14487.982, 14522.824] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 77.11% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 14564.698 ops/ms
# Warmup Iteration   2: 14306.004 ops/ms
# Warmup Iteration   3: 14396.025 ops/ms
Iteration   1: 14408.219 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14412.694 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14407.294 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14413.901 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14402.676 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  14408.956 ±(99.9%) 17.346 ops/ms [Average]
  (min, avg, max) = (14402.676, 14408.956, 14413.901), stdev = 4.505
  CI (99.9%): [14391.611, 14426.302] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 78.31% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 2241.550 ops/ms
# Warmup Iteration   2: 2251.679 ops/ms
# Warmup Iteration   3: 2239.443 ops/ms
Iteration   1: 2240.585 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2240.616 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2238.695 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2240.108 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2239.980 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  2239.997 ±(99.9%) 3.006 ops/ms [Average]
  (min, avg, max) = (2238.695, 2239.997, 2240.616), stdev = 0.781
  CI (99.9%): [2236.991, 2243.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 79.52% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 6816.851 ops/ms
# Warmup Iteration   2: 6828.490 ops/ms
# Warmup Iteration   3: 6831.036 ops/ms
Iteration   1: 6826.491 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6833.161 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6834.633 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6834.796 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6835.829 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  6832.982 ±(99.9%) 14.444 ops/ms [Average]
  (min, avg, max) = (6826.491, 6832.982, 6835.829), stdev = 3.751
  CI (99.9%): [6818.538, 6847.426] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 80.72% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 6806.181 ops/ms
# Warmup Iteration   2: 6826.914 ops/ms
# Warmup Iteration   3: 6829.507 ops/ms
Iteration   1: 6825.316 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 6827.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 6827.226 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 6825.997 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 6830.381 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  6827.259 ±(99.9%) 7.490 ops/ms [Average]
  (min, avg, max) = (6825.316, 6827.259, 6830.381), stdev = 1.945
  CI (99.9%): [6819.769, 6834.749] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 81.93% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.260 ops/ms
# Warmup Iteration   2: 2.265 ops/ms
# Warmup Iteration   3: 2.263 ops/ms
Iteration   1: 2.264 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.266 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.267 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.266 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.021 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.266 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  2.266 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (2.264, 2.266, 2.267), stdev = 0.001
  CI (99.9%): [2.261, 2.270] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.021 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (0.019, 0.021, 0.024), stdev = 0.002
  CI (99.9%): [0.013, 0.028] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 83.13% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 7.265 ops/ms
# Warmup Iteration   2: 7.283 ops/ms
# Warmup Iteration   3: 7.252 ops/ms
Iteration   1: 7.252 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.006 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 7.257 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.006 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 7.254 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.006 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 7.257 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.006 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 7.254 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.006 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  7.255 ±(99.9%) 0.009 ops/ms [Average]
  (min, avg, max) = (7.252, 7.255, 7.257), stdev = 0.002
  CI (99.9%): [7.246, 7.264] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.006 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.006, 0.006, 0.006), stdev = 0.001
  CI (99.9%): [0.005, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 84.34% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 8.332 ops/ms
# Warmup Iteration   2: 8.340 ops/ms
# Warmup Iteration   3: 8.370 ops/ms
Iteration   1: 8.354 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8.369 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8.360 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8.374 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8.368 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  8.365 ±(99.9%) 0.029 ops/ms [Average]
  (min, avg, max) = (8.354, 8.365, 8.374), stdev = 0.008
  CI (99.9%): [8.335, 8.394] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.005 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 85.54% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 68769.420 ops/ms
# Warmup Iteration   2: 73115.933 ops/ms
# Warmup Iteration   3: 79098.269 ops/ms
Iteration   1: 79017.869 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 79078.203 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 79112.763 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 79099.996 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 79097.050 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  79081.176 ±(99.9%) 144.342 ops/ms [Average]
  (min, avg, max) = (79017.869, 79081.176, 79112.763), stdev = 37.485
  CI (99.9%): [78936.834, 79225.518] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 86.75% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 69108.115 ops/ms
# Warmup Iteration   2: 73150.349 ops/ms
# Warmup Iteration   3: 79189.974 ops/ms
Iteration   1: 79180.860 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 79226.121 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 79187.428 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 79143.486 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 79240.264 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  79195.632 ±(99.9%) 148.216 ops/ms [Average]
  (min, avg, max) = (79143.486, 79195.632, 79240.264), stdev = 38.491
  CI (99.9%): [79047.416, 79343.848] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 87.95% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 69064.363 ops/ms
# Warmup Iteration   2: 73133.567 ops/ms
# Warmup Iteration   3: 79097.421 ops/ms
Iteration   1: 79068.848 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 78994.122 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 79037.682 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 79036.682 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 79030.792 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  79033.625 ±(99.9%) 102.513 ops/ms [Average]
  (min, avg, max) = (78994.122, 79033.625, 79068.848), stdev = 26.622
  CI (99.9%): [78931.112, 79136.138] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 89.16% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 9133.490 ops/ms
# Warmup Iteration   2: 9037.211 ops/ms
# Warmup Iteration   3: 8004.843 ops/ms
Iteration   1: 8008.895 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 8015.269 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 8011.793 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 8012.089 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 8006.106 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  8010.831 ±(99.9%) 13.378 ops/ms [Average]
  (min, avg, max) = (8006.106, 8010.831, 8015.269), stdev = 3.474
  CI (99.9%): [7997.453, 8024.208] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 90.36% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 33404.826 ops/ms
# Warmup Iteration   2: 33133.148 ops/ms
# Warmup Iteration   3: 32824.793 ops/ms
Iteration   1: 32894.738 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32830.658 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32813.974 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32866.114 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32816.059 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  32844.308 ±(99.9%) 135.090 ops/ms [Average]
  (min, avg, max) = (32813.974, 32844.308, 32894.738), stdev = 35.082
  CI (99.9%): [32709.218, 32979.398] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 91.57% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 31654.688 ops/ms
# Warmup Iteration   2: 31708.191 ops/ms
# Warmup Iteration   3: 32450.218 ops/ms
Iteration   1: 31642.837 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32518.174 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32421.717 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31738.714 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32389.574 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  32142.203 ±(99.9%) 1602.586 ops/ms [Average]
  (min, avg, max) = (31642.837, 32142.203, 32518.174), stdev = 416.186
  CI (99.9%): [30539.618, 33744.789] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 92.77% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9.904 ops/ms
# Warmup Iteration   2: 9.361 ops/ms
# Warmup Iteration   3: 9.460 ops/ms
Iteration   1: 9.468 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.465 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.467 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.460 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.461 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.464 ±(99.9%) 0.014 ops/ms [Average]
  (min, avg, max) = (9.460, 9.464, 9.468), stdev = 0.004
  CI (99.9%): [9.450, 9.479] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.005 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 93.98% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16.679 ops/ms
# Warmup Iteration   2: 16.690 ops/ms
# Warmup Iteration   3: 16.615 ops/ms
Iteration   1: 16.608 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.601 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.616 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.608 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.609 ±(99.9%) 0.021 ops/ms [Average]
  (min, avg, max) = (16.601, 16.609, 16.616), stdev = 0.006
  CI (99.9%): [16.587, 16.630] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 95.18% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: 18.971 ops/ms
# Warmup Iteration   2: 19.010 ops/ms
# Warmup Iteration   3: 19.011 ops/ms
Iteration   1: 19.012 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.025 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.013 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.991 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  19.012 ±(99.9%) 0.049 ops/ms [Average]
  (min, avg, max) = (18.991, 19.012, 19.025), stdev = 0.013
  CI (99.9%): [18.963, 19.061] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 128)

# Run progress: 96.39% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 4688.271 ops/ms
# Warmup Iteration   2: 4619.817 ops/ms
# Warmup Iteration   3: 4577.762 ops/ms
Iteration   1: 4561.313 ops/ms
                 ·gc.alloc.rate:                   1807.067 MB/sec
                 ·gc.alloc.rate.norm:              436.233 B/op
                 ·gc.churn.G1_Eden_Space:          1803.956 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.481 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   2: 4572.357 ops/ms
                 ·gc.alloc.rate:                   1811.460 MB/sec
                 ·gc.alloc.rate.norm:              436.232 B/op
                 ·gc.churn.G1_Eden_Space:          1804.003 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.436 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   3: 4568.917 ops/ms
                 ·gc.alloc.rate:                   1810.068 MB/sec
                 ·gc.alloc.rate.norm:              436.232 B/op
                 ·gc.churn.G1_Eden_Space:          1803.962 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.760 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 4572.297 ops/ms
                 ·gc.alloc.rate:                   1811.412 MB/sec
                 ·gc.alloc.rate.norm:              436.231 B/op
                 ·gc.churn.G1_Eden_Space:          1803.972 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.440 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         17.000 ms

Iteration   5: 4571.313 ops/ms
                 ·gc.alloc.rate:                   1811.035 MB/sec
                 ·gc.alloc.rate.norm:              436.232 B/op
                 ·gc.churn.G1_Eden_Space:          1860.351 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     448.111 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         19.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4569.240 ±(99.9%) 17.885 ops/ms [Average]
  (min, avg, max) = (4561.313, 4569.240, 4572.357), stdev = 4.645
  CI (99.9%): [4551.354, 4587.125] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1810.209 ±(99.9%) 7.097 MB/sec [Average]
  (min, avg, max) = (1807.067, 1810.209, 1811.460), stdev = 1.843
  CI (99.9%): [1803.112, 1817.305] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  436.232 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (436.231, 436.232, 436.233), stdev = 0.001
  CI (99.9%): [436.230, 436.233] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1815.249 ±(99.9%) 97.086 MB/sec [Average]
  (min, avg, max) = (1803.956, 1815.249, 1860.351), stdev = 25.213
  CI (99.9%): [1718.163, 1912.335] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  437.446 ±(99.9%) 23.016 B/op [Average]
  (min, avg, max) = (434.436, 437.446, 448.111), stdev = 5.977
  CI (99.9%): [414.429, 460.462] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [0.001, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  161.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.200, 33.000), stdev = 0.447
  CI (99.9%): [161.000, 161.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  94.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 18.800, 20.000), stdev = 1.304
  CI (99.9%): [94.000, 94.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1024)

# Run progress: 97.59% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 4624.964 ops/ms
# Warmup Iteration   2: 4564.014 ops/ms
# Warmup Iteration   3: 4505.302 ops/ms
Iteration   1: 4500.394 ops/ms
                 ·gc.alloc.rate:                   1769.532 MB/sec
                 ·gc.alloc.rate.norm:              432.955 B/op
                 ·gc.churn.G1_Eden_Space:          1747.582 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     427.584 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         16.000 ms

Iteration   2: 4505.070 ops/ms
                 ·gc.alloc.rate:                   1771.407 MB/sec
                 ·gc.alloc.rate.norm:              432.955 B/op
                 ·gc.churn.G1_Eden_Space:          1804.018 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     440.925 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   3: 4507.820 ops/ms
                 ·gc.alloc.rate:                   1772.462 MB/sec
                 ·gc.alloc.rate.norm:              432.954 B/op
                 ·gc.churn.G1_Eden_Space:          1747.614 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     426.885 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         18.000 ms

Iteration   4: 4503.796 ops/ms
                 ·gc.alloc.rate:                   1770.869 MB/sec
                 ·gc.alloc.rate.norm:              432.954 B/op
                 ·gc.churn.G1_Eden_Space:          1803.972 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     441.047 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         23.000 ms

Iteration   5: 4505.763 ops/ms
                 ·gc.alloc.rate:                   1771.632 MB/sec
                 ·gc.alloc.rate.norm:              432.954 B/op
                 ·gc.churn.G1_Eden_Space:          1747.584 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     427.077 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4504.568 ±(99.9%) 10.593 ops/ms [Average]
  (min, avg, max) = (4500.394, 4504.568, 4507.820), stdev = 2.751
  CI (99.9%): [4493.975, 4515.162] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1771.180 ±(99.9%) 4.179 MB/sec [Average]
  (min, avg, max) = (1769.532, 1771.180, 1772.462), stdev = 1.085
  CI (99.9%): [1767.001, 1775.360] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.954 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.954, 432.954, 432.955), stdev = 0.001
  CI (99.9%): [432.952, 432.956] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1770.154 ±(99.9%) 118.955 MB/sec [Average]
  (min, avg, max) = (1747.582, 1770.154, 1804.018), stdev = 30.892
  CI (99.9%): [1651.199, 1889.109] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  432.704 ±(99.9%) 29.132 B/op [Average]
  (min, avg, max) = (426.885, 432.704, 441.047), stdev = 7.565
  CI (99.9%): [403.572, 461.835] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  157.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.400, 32.000), stdev = 0.548
  CI (99.9%): [157.000, 157.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  94.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 18.800, 23.000), stdev = 2.588
  CI (99.9%): [94.000, 94.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1048576)

# Run progress: 98.80% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 5226.129 ops/ms
# Warmup Iteration   2: 5152.406 ops/ms
# Warmup Iteration   3: 5102.687 ops/ms
Iteration   1: 5104.397 ops/ms
                 ·gc.alloc.rate:                   2005.146 MB/sec
                 ·gc.alloc.rate.norm:              432.545 B/op
                 ·gc.churn.G1_Eden_Space:          2029.485 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     437.795 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         21.000 ms

Iteration   2: 5107.925 ops/ms
                 ·gc.alloc.rate:                   2006.526 MB/sec
                 ·gc.alloc.rate.norm:              432.544 B/op
                 ·gc.churn.G1_Eden_Space:          1973.117 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     425.342 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         21.000 ms

Iteration   3: 5100.141 ops/ms
                 ·gc.alloc.rate:                   2003.446 MB/sec
                 ·gc.alloc.rate.norm:              432.544 B/op
                 ·gc.churn.G1_Eden_Space:          2029.456 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.160 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 5099.712 ops/ms
                 ·gc.alloc.rate:                   2003.264 MB/sec
                 ·gc.alloc.rate.norm:              432.544 B/op
                 ·gc.churn.G1_Eden_Space:          2029.441 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.196 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         21.000 ms

Iteration   5: 5100.312 ops/ms
                 ·gc.alloc.rate:                   2003.523 MB/sec
                 ·gc.alloc.rate.norm:              432.544 B/op
                 ·gc.churn.G1_Eden_Space:          1973.094 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     425.974 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         25.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5102.497 ±(99.9%) 13.770 ops/ms [Average]
  (min, avg, max) = (5099.712, 5102.497, 5107.925), stdev = 3.576
  CI (99.9%): [5088.727, 5116.268] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  2004.381 ±(99.9%) 5.461 MB/sec [Average]
  (min, avg, max) = (2003.264, 2004.381, 2006.526), stdev = 1.418
  CI (99.9%): [1998.920, 2009.842] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.544 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.544, 432.544, 432.545), stdev = 0.001
  CI (99.9%): [432.543, 432.546] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  2006.918 ±(99.9%) 118.858 MB/sec [Average]
  (min, avg, max) = (1973.094, 2006.918, 2029.485), stdev = 30.867
  CI (99.9%): [1888.060, 2125.776] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  433.094 ±(99.9%) 26.157 B/op [Average]
  (min, avg, max) = (425.342, 433.094, 438.196), stdev = 6.793
  CI (99.9%): [406.936, 459.251] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  178.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 35.600, 36.000), stdev = 0.548
  CI (99.9%): [178.000, 178.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  108.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (20.000, 21.600, 25.000), stdev = 1.949
  CI (99.9%): [108.000, 108.000] (assumes normal distribution)


# Run complete. Total time: 01:56:32

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      (charsetName)  (latin1)  (onHeap)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score       Error   Units
CharArrayReaderBenchmarks.read                                                           N/A      true      true                 N/A             128  thrpt    5     23.785 ±     0.030  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A      true      true                 N/A             128  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A      true      true                 N/A             128  thrpt    5     ≈ 10⁻⁶                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A      true      true                 N/A             128  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A      true      true                 N/A            1024  thrpt    5     15.898 ±     0.059  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A      true      true                 N/A            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A      true      true                 N/A            1024  thrpt    5     ≈ 10⁻⁶                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A      true      true                 N/A            1024  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A      true     false                 N/A             128  thrpt    5     13.349 ±     0.025  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A      true     false                 N/A             128  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A      true     false                 N/A             128  thrpt    5     ≈ 10⁻⁵                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A      true     false                 N/A             128  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A      true     false                 N/A            1024  thrpt    5      9.405 ±     0.011  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A      true     false                 N/A            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A      true     false                 N/A            1024  thrpt    5     ≈ 10⁻⁵                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A      true     false                 N/A            1024  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A     false      true                 N/A             128  thrpt    5     23.755 ±     0.037  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A     false      true                 N/A             128  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A     false      true                 N/A             128  thrpt    5     ≈ 10⁻⁶                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A     false      true                 N/A             128  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A     false      true                 N/A            1024  thrpt    5     15.812 ±     0.039  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A     false      true                 N/A            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A     false      true                 N/A            1024  thrpt    5     ≈ 10⁻⁶                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A     false      true                 N/A            1024  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A     false     false                 N/A             128  thrpt    5     13.357 ±     0.074  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A     false     false                 N/A             128  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A     false     false                 N/A             128  thrpt    5     ≈ 10⁻⁵                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A     false     false                 N/A             128  thrpt    5        ≈ 0              counts
CharArrayReaderBenchmarks.read                                                           N/A     false     false                 N/A            1024  thrpt    5      9.393 ±     0.023  ops/us
CharArrayReaderBenchmarks.read:·gc.alloc.rate                                            N/A     false     false                 N/A            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
CharArrayReaderBenchmarks.read:·gc.alloc.rate.norm                                       N/A     false     false                 N/A            1024  thrpt    5     ≈ 10⁻⁵                B/op
CharArrayReaderBenchmarks.read:·gc.count                                                 N/A     false     false                 N/A            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A                 128             128  thrpt    5   6457.884 ±    16.409  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A                 128            1024  thrpt    5   7064.461 ±    14.247  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A                 128         1048576  thrpt    5   6904.082 ±    12.597  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A                 128         1048576  thrpt    5    351.134 ±     0.652  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A                 128         1048576  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII       N/A       N/A                 128         1048576  thrpt    5    349.514 ±    97.074  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII       N/A       N/A                 128         1048576  thrpt    5     55.744 ±    15.451    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII       N/A       N/A                 128         1048576  thrpt    5      0.002 ±     0.009  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻³                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A                 128         1048576  thrpt    5     31.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII       N/A       N/A                 128         1048576  thrpt    5     24.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A                1024             128  thrpt    5    991.262 ±     5.187  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A                1024             128  thrpt    5     50.415 ±     0.263  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A                1024             128  thrpt    5     56.003 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII       N/A       N/A                1024             128  thrpt    5     56.373 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII       N/A       N/A                1024             128  thrpt    5     62.622 ±     0.327    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII       N/A       N/A                1024             128  thrpt    5      0.002 ±     0.013  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII       N/A       N/A                1024             128  thrpt    5      0.002 ±     0.014    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A                1024             128  thrpt    5      5.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII       N/A       N/A                1024             128  thrpt    5      8.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A                1024            1024  thrpt    5   1791.744 ±     1.605  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A                1024         1048576  thrpt    5   1763.182 ±    16.379  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A                1024         1048576  thrpt    5     89.673 ±     0.837  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A                1024         1048576  thrpt    5     56.002 ±     0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII       N/A       N/A                1024         1048576  thrpt    5     90.198 ±   118.901  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII       N/A       N/A                1024         1048576  thrpt    5     56.306 ±    73.961    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space            US-ASCII       N/A       N/A                1024         1048576  thrpt    5      0.002 ±     0.009  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm       US-ASCII       N/A       N/A                1024         1048576  thrpt    5      0.001 ±     0.006    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A                1024         1048576  thrpt    5      8.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII       N/A       N/A                1024         1048576  thrpt    5     13.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A             1048576             128  thrpt    5      1.010 ±     0.004  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A             1048576             128  thrpt    5      6.576 ±     0.028  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A             1048576             128  thrpt    5   7168.043 ±     0.010    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A             1048576            1024  thrpt    5      1.080 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A             1048576            1024  thrpt    5      0.040 ±     0.006    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                        US-ASCII       N/A       N/A             1048576         1048576  thrpt    5      1.913 ±     0.016  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                         US-ASCII       N/A       N/A             1048576         1048576  thrpt    5     12.451 ±     0.103  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                    US-ASCII       N/A       N/A             1048576         1048576  thrpt    5   7168.303 ±     2.409    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                US-ASCII       N/A       N/A             1048576         1048576  thrpt    5     11.274 ±    97.074  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm           US-ASCII       N/A       N/A             1048576         1048576  thrpt    5   6502.456 ± 55988.110    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                              US-ASCII       N/A       N/A             1048576         1048576  thrpt    5      1.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                               US-ASCII       N/A       N/A             1048576         1048576  thrpt    5      2.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A                 128             128  thrpt    5   6328.639 ±     5.442  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A                 128            1024  thrpt    5   7902.557 ±    28.841  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5   7330.999 ±    10.162  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A                1024             128  thrpt    5    967.364 ±     1.499  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A                1024            1024  thrpt    5   1963.510 ±     1.747  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5   2009.371 ±     5.541  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A             1048576             128  thrpt    5      0.993 ±     0.008  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A             1048576             128  thrpt    5      6.466 ±     0.052  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A             1048576             128  thrpt    5   7168.043 ±     0.007    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5      1.478 ±     0.006  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5      0.031 ±     0.008    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                      ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5      2.171 ±     0.008  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                       ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                  ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5      0.021 ±     0.007    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                            ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A                 128             128  thrpt    5   6336.875 ±    12.057  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A                 128             128  thrpt    5    322.287 ±     0.603  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A                 128             128  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A                 128             128  thrpt    5    326.965 ±    97.078  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A                 128             128  thrpt    5     56.816 ±    16.896    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A                 128             128  thrpt    5      0.002 ±     0.010  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻³                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A                 128             128  thrpt    5     29.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A                 128             128  thrpt    5     21.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A                 128            1024  thrpt    5   6937.845 ±    84.901  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A                 128            1024  thrpt    5    352.853 ±     4.317  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A                 128            1024  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A                 128            1024  thrpt    5    360.791 ±   118.890  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A                 128            1024  thrpt    5     57.266 ±    19.088    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A                 128            1024  thrpt    5      0.002 ±     0.010  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻³                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A                 128            1024  thrpt    5     32.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A                 128            1024  thrpt    5     27.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A                 128         1048576  thrpt    5   6584.293 ±    68.033  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A                 128         1048576  thrpt    5    334.869 ±     3.449  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A                 128         1048576  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A                 128         1048576  thrpt    5    338.238 ±     0.026  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A                 128         1048576  thrpt    5     56.566 ±     0.584    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A                 128         1048576  thrpt    5      0.002 ±     0.010  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻³                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A                 128         1048576  thrpt    5     30.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A                 128         1048576  thrpt    5     21.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A                1024             128  thrpt    5   1282.530 ±    17.214  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A                1024             128  thrpt    5     65.229 ±     0.876  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A                1024             128  thrpt    5     56.003 ±     0.004    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A                1024             128  thrpt    5     67.648 ±    97.078  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A                1024             128  thrpt    5     58.079 ±    83.312    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A                1024             128  thrpt    5      0.002 ±     0.007  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A                1024             128  thrpt    5      0.001 ±     0.006    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A                1024             128  thrpt    5      6.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A                1024             128  thrpt    5      9.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A                1024            1024  thrpt    5   1780.128 ±    42.858  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A                1024            1024  thrpt    5     90.536 ±     2.183  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A                1024            1024  thrpt    5     56.002 ±     0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A                1024            1024  thrpt    5     90.198 ±   118.896  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A                1024            1024  thrpt    5     55.836 ±    74.069    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A                1024            1024  thrpt    5      0.001 ±     0.005  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A                1024            1024  thrpt    5      0.001 ±     0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A                1024            1024  thrpt    5      8.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A                1024            1024  thrpt    5     13.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A                1024         1048576  thrpt    5   1699.312 ±     7.223  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A                1024         1048576  thrpt    5     86.426 ±     0.370  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A                1024         1048576  thrpt    5     56.003 ±     0.003    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A                1024         1048576  thrpt    5     90.199 ±   118.899  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A                1024         1048576  thrpt    5     58.440 ±    76.953    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A                1024         1048576  thrpt    5      0.002 ±     0.013  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A                1024         1048576  thrpt    5      0.001 ±     0.008    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A                1024         1048576  thrpt    5      8.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A                1024         1048576  thrpt    5     13.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A             1048576             128  thrpt    5      1.401 ±     0.002  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A             1048576             128  thrpt    5      9.118 ±     0.015  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A             1048576             128  thrpt    5   7168.033 ±     0.013    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A             1048576            1024  thrpt    5      1.972 ±     0.012  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A             1048576            1024  thrpt    5     12.835 ±     0.082  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A             1048576            1024  thrpt    5   7168.293 ±     2.334    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A             1048576            1024  thrpt    5     11.274 ±    97.074  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A             1048576            1024  thrpt    5   6294.752 ± 54199.715    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space               UTF-8       N/A       N/A             1048576            1024  thrpt    5     ≈ 10⁻³              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm          UTF-8       N/A       N/A             1048576            1024  thrpt    5      0.196 ±     1.692    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A             1048576            1024  thrpt    5      1.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A             1048576            1024  thrpt    5      2.000                  ms
InputStreamReaderBenchmarks.readDirectBuffer                                           UTF-8       N/A       N/A             1048576         1048576  thrpt    5      1.913 ±     0.008  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                            UTF-8       N/A       N/A             1048576         1048576  thrpt    5     12.455 ±     0.049  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                       UTF-8       N/A       N/A             1048576         1048576  thrpt    5   7168.302 ±     2.407    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                   UTF-8       N/A       N/A             1048576         1048576  thrpt    5     11.274 ±    97.073  MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm              UTF-8       N/A       N/A             1048576         1048576  thrpt    5   6493.614 ± 55911.971    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                                 UTF-8       N/A       N/A             1048576         1048576  thrpt    5      1.000              counts
InputStreamReaderBenchmarks.readDirectBuffer:·gc.time                                  UTF-8       N/A       N/A             1048576         1048576  thrpt    5      2.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A                 128             128  thrpt    5   8701.728 ±     4.123  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A                 128             128  thrpt    5    442.563 ±     0.200  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A                 128             128  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                  US-ASCII       N/A       N/A                 128             128  thrpt    5    450.989 ±     0.024  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm             US-ASCII       N/A       N/A                 128             128  thrpt    5     57.069 ±     0.028    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space              US-ASCII       N/A       N/A                 128             128  thrpt    5      0.002 ±     0.011  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm         US-ASCII       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A                 128             128  thrpt    5     40.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                 US-ASCII       N/A       N/A                 128             128  thrpt    5     27.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A                 128            1024  thrpt    5  11018.718 ±    22.150  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A                 128         1048576  thrpt    5  12636.498 ±    34.454  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A                1024             128  thrpt    5    945.725 ±    25.177  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A                1024             128  thrpt    5     48.099 ±     1.280  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A                1024             128  thrpt    5     56.002 ±     0.005    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                  US-ASCII       N/A       N/A                1024             128  thrpt    5     45.099 ±    97.079  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm             US-ASCII       N/A       N/A                1024             128  thrpt    5     52.559 ±   113.150    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space              US-ASCII       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻³              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm         US-ASCII       N/A       N/A                1024             128  thrpt    5      0.001 ±     0.003    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A                1024             128  thrpt    5      4.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                 US-ASCII       N/A       N/A                1024             128  thrpt    5      6.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A                1024            1024  thrpt    5   1826.884 ±   306.127  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A                1024            1024  thrpt    5     92.914 ±    15.569  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A                1024            1024  thrpt    5     56.003 ±     0.003    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                  US-ASCII       N/A       N/A                1024            1024  thrpt    5    101.472 ±    97.080  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm             US-ASCII       N/A       N/A                1024            1024  thrpt    5     61.532 ±    62.964    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space              US-ASCII       N/A       N/A                1024            1024  thrpt    5      0.003 ±     0.009  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm         US-ASCII       N/A       N/A                1024            1024  thrpt    5      0.002 ±     0.005    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A                1024            1024  thrpt    5      9.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                 US-ASCII       N/A       N/A                1024            1024  thrpt    5     14.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A                1024         1048576  thrpt    5   2263.768 ±     5.318  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A             1048576             128  thrpt    5      1.123 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A             1048576             128  thrpt    5      0.057 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A             1048576             128  thrpt    5     56.038 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A             1048576            1024  thrpt    5      1.148 ±     0.005  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A             1048576            1024  thrpt    5      0.058 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A             1048576            1024  thrpt    5     56.037 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                          US-ASCII       N/A       N/A             1048576         1048576  thrpt    5      1.556 ±     0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                           US-ASCII       N/A       N/A             1048576         1048576  thrpt    5      0.079 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                      US-ASCII       N/A       N/A             1048576         1048576  thrpt    5     56.030 ±     0.012    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                US-ASCII       N/A       N/A             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A                 128             128  thrpt    5  10019.485 ±    11.043  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A                 128            1024  thrpt    5  12702.079 ±    12.673  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5  12634.757 ±    38.825  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A                1024             128  thrpt    5   1086.739 ±    12.011  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A                1024             128  thrpt    5     55.270 ±     0.611  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A                1024             128  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                ISO-8859-1       N/A       N/A                1024             128  thrpt    5     56.373 ±     0.002  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm           ISO-8859-1       N/A       N/A                1024             128  thrpt    5     57.120 ±     0.631    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space            ISO-8859-1       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻³              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm       ISO-8859-1       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻³                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A                1024             128  thrpt    5      5.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                               ISO-8859-1       N/A       N/A                1024             128  thrpt    5      8.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A                1024            1024  thrpt    5   2614.541 ±     7.215  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5   2674.784 ±     2.612  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A             1048576             128  thrpt    5      1.202 ±     0.004  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A             1048576             128  thrpt    5      0.061 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A             1048576             128  thrpt    5     56.035 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5      1.496 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5      0.076 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5     56.030 ±     0.014    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                        ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5      1.550 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                         ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5      0.079 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                    ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5     56.030 ±     0.013    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                              ISO-8859-1       N/A       N/A             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A                 128             128  thrpt    5   9642.630 ±    33.698  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A                 128             128  thrpt    5    490.413 ±     1.710  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A                 128             128  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                     UTF-8       N/A       N/A                 128             128  thrpt    5    496.084 ±    97.067  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm                UTF-8       N/A       N/A                 128             128  thrpt    5     56.651 ±    11.136    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space                 UTF-8       N/A       N/A                 128             128  thrpt    5      0.001 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm            UTF-8       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A                 128             128  thrpt    5     44.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                    UTF-8       N/A       N/A                 128             128  thrpt    5     28.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A                 128            1024  thrpt    5  11109.438 ±    13.821  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A                 128            1024  thrpt    5    565.014 ±     0.711  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A                 128            1024  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                     UTF-8       N/A       N/A                 128            1024  thrpt    5    563.732 ±     0.027  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm                UTF-8       N/A       N/A                 128            1024  thrpt    5     55.875 ±     0.069    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space                 UTF-8       N/A       N/A                 128            1024  thrpt    5      0.001 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm            UTF-8       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A                 128            1024  thrpt    5     50.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                    UTF-8       N/A       N/A                 128            1024  thrpt    5     38.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A                 128         1048576  thrpt    5  10626.563 ±     7.848  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A                 128         1048576  thrpt    5    540.455 ±     0.410  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A                 128         1048576  thrpt    5     56.002 ±     0.001    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                     UTF-8       N/A       N/A                 128         1048576  thrpt    5    541.184 ±   118.890  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm                UTF-8       N/A       N/A                 128         1048576  thrpt    5     56.078 ±    12.338    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space                 UTF-8       N/A       N/A                 128         1048576  thrpt    5      0.001 ±     0.002  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm            UTF-8       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A                 128         1048576  thrpt    5     48.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                    UTF-8       N/A       N/A                 128         1048576  thrpt    5     34.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A                1024             128  thrpt    5   1568.776 ±    12.319  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A                1024             128  thrpt    5     79.786 ±     0.628  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A                1024             128  thrpt    5     56.002 ±     0.004    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                     UTF-8       N/A       N/A                1024             128  thrpt    5     78.923 ±   118.897  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm                UTF-8       N/A       N/A                1024             128  thrpt    5     55.394 ±    83.414    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space                 UTF-8       N/A       N/A                1024             128  thrpt    5      0.002 ±     0.009  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm            UTF-8       N/A       N/A                1024             128  thrpt    5      0.001 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A                1024             128  thrpt    5      7.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                    UTF-8       N/A       N/A                1024             128  thrpt    5     11.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A                1024            1024  thrpt    5   2370.081 ±    46.845  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A                1024            1024  thrpt    5    120.542 ±     2.373  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A                1024            1024  thrpt    5     56.003 ±     0.003    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                     UTF-8       N/A       N/A                1024            1024  thrpt    5    124.024 ±    97.094  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm                UTF-8       N/A       N/A                1024            1024  thrpt    5     57.647 ±    45.888    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space                 UTF-8       N/A       N/A                1024            1024  thrpt    5      0.034 ±     0.227  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm            UTF-8       N/A       N/A                1024            1024  thrpt    5      0.016 ±     0.106    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A                1024            1024  thrpt    5     11.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                    UTF-8       N/A       N/A                1024            1024  thrpt    5     15.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A                1024         1048576  thrpt    5   2187.232 ±    10.790  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A                1024         1048576  thrpt    5    111.242 ±     0.550  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A                1024         1048576  thrpt    5     56.003 ±     0.003    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space                     UTF-8       N/A       N/A                1024         1048576  thrpt    5    112.747 ±     0.006  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Eden_Space.norm                UTF-8       N/A       N/A                1024         1048576  thrpt    5     56.761 ±     0.280    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space                 UTF-8       N/A       N/A                1024         1048576  thrpt    5      0.032 ±     0.257  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.churn.G1_Survivor_Space.norm            UTF-8       N/A       N/A                1024         1048576  thrpt    5      0.016 ±     0.129    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A                1024         1048576  thrpt    5     10.000              counts
InputStreamReaderBenchmarks.readHeapBuffer:·gc.time                                    UTF-8       N/A       N/A                1024         1048576  thrpt    5     15.000                  ms
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A             1048576             128  thrpt    5      1.623 ±     0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A             1048576             128  thrpt    5      0.083 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A             1048576             128  thrpt    5     56.028 ±     0.012    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A             1048576            1024  thrpt    5      2.464 ±     0.007  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A             1048576            1024  thrpt    5      0.125 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A             1048576            1024  thrpt    5     56.019 ±     0.008    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                             UTF-8       N/A       N/A             1048576         1048576  thrpt    5      2.042 ±     0.009  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                              UTF-8       N/A       N/A             1048576         1048576  thrpt    5      0.104 ±     0.001  MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                         UTF-8       N/A       N/A             1048576         1048576  thrpt    5     56.022 ±     0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                                   UTF-8       N/A       N/A             1048576         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A                 128             128  thrpt    5  14519.865 ±    13.314  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A                 128             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A                 128            1024  thrpt    5  14505.403 ±    17.421  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A                 128            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A                 128         1048576  thrpt    5  14408.956 ±    17.346  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A                 128         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A                1024             128  thrpt    5   2239.997 ±     3.006  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A                1024             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A                1024            1024  thrpt    5   6832.982 ±    14.444  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A                1024            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A                1024         1048576  thrpt    5   6827.259 ±     7.490  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A                1024         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A             1048576             128  thrpt    5      2.266 ±     0.004  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A             1048576             128  thrpt    5      0.021 ±     0.008    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A             1048576            1024  thrpt    5      7.255 ±     0.009  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A             1048576            1024  thrpt    5      0.006 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                                        N/A       N/A       N/A             1048576         1048576  thrpt    5      8.365 ±     0.029  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                                         N/A       N/A       N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                                    N/A       N/A       N/A             1048576         1048576  thrpt    5      0.005 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                              N/A       N/A       N/A             1048576         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A                 128             128  thrpt    5  79081.176 ±   144.342  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A                 128             128  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A                 128             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A                 128            1024  thrpt    5  79195.632 ±   148.216  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A                 128            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A                 128            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A                 128         1048576  thrpt    5  79033.625 ±   102.513  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A                 128         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A                1024             128  thrpt    5   8010.831 ±    13.378  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A                1024             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A                1024            1024  thrpt    5  32844.308 ±   135.090  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A                1024            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A                1024            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A                1024         1048576  thrpt    5  32142.203 ±  1602.586  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A                1024         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A             1048576             128  thrpt    5      9.464 ±     0.014  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A             1048576             128  thrpt    5      0.005 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A             1048576             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A             1048576            1024  thrpt    5     16.609 ±     0.021  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A             1048576            1024  thrpt    5      0.003 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A             1048576            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                                          N/A       N/A       N/A             1048576         1048576  thrpt    5     19.012 ±     0.049  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                           N/A       N/A       N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                                      N/A       N/A       N/A             1048576         1048576  thrpt    5      0.002 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                                N/A       N/A       N/A             1048576         1048576  thrpt    5        ≈ 0              counts
ScannerBenchmarks.scan                                                                   N/A       N/A       N/A                 N/A             128  thrpt    5   4569.240 ±    17.885  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                                    N/A       N/A       N/A                 N/A             128  thrpt    5   1810.209 ±     7.097  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                               N/A       N/A       N/A                 N/A             128  thrpt    5    436.232 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                           N/A       N/A       N/A                 N/A             128  thrpt    5   1815.249 ±    97.086  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                                      N/A       N/A       N/A                 N/A             128  thrpt    5    437.446 ±    23.016    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                                       N/A       N/A       N/A                 N/A             128  thrpt    5      0.003 ±     0.001  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                                  N/A       N/A       N/A                 N/A             128  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                                         N/A       N/A       N/A                 N/A             128  thrpt    5    161.000              counts
ScannerBenchmarks.scan:·gc.time                                                          N/A       N/A       N/A                 N/A             128  thrpt    5     94.000                  ms
ScannerBenchmarks.scan                                                                   N/A       N/A       N/A                 N/A            1024  thrpt    5   4504.568 ±    10.593  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                                    N/A       N/A       N/A                 N/A            1024  thrpt    5   1771.180 ±     4.179  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                               N/A       N/A       N/A                 N/A            1024  thrpt    5    432.954 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                           N/A       N/A       N/A                 N/A            1024  thrpt    5   1770.154 ±   118.955  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                                      N/A       N/A       N/A                 N/A            1024  thrpt    5    432.704 ±    29.132    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                                       N/A       N/A       N/A                 N/A            1024  thrpt    5      0.003 ±     0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                                  N/A       N/A       N/A                 N/A            1024  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                                         N/A       N/A       N/A                 N/A            1024  thrpt    5    157.000              counts
ScannerBenchmarks.scan:·gc.time                                                          N/A       N/A       N/A                 N/A            1024  thrpt    5     94.000                  ms
ScannerBenchmarks.scan                                                                   N/A       N/A       N/A                 N/A         1048576  thrpt    5   5102.497 ±    13.770  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                                    N/A       N/A       N/A                 N/A         1048576  thrpt    5   2004.381 ±     5.461  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                               N/A       N/A       N/A                 N/A         1048576  thrpt    5    432.544 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                           N/A       N/A       N/A                 N/A         1048576  thrpt    5   2006.918 ±   118.858  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                                      N/A       N/A       N/A                 N/A         1048576  thrpt    5    433.094 ±    26.157    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                                       N/A       N/A       N/A                 N/A         1048576  thrpt    5      0.003 ±     0.004  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                                  N/A       N/A       N/A                 N/A         1048576  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                                         N/A       N/A       N/A                 N/A         1048576  thrpt    5    178.000              counts
ScannerBenchmarks.scan:·gc.time                                                          N/A       N/A       N/A                 N/A         1048576  thrpt    5    108.000                  ms

Benchmark result is saved to jmh-result.csv
