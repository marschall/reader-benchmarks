# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 2969.859 ops/ms
# Warmup Iteration   2: 2990.741 ops/ms
# Warmup Iteration   3: 2984.988 ops/ms
Iteration   1: 2995.441 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2996.934 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2998.665 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3002.082 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2973.053 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2993.235 ±(99.9%) 44.475 ops/ms [Average]
  (min, avg, max) = (2973.053, 2993.235, 3002.082), stdev = 11.550
  CI (99.9%): [2948.759, 3037.710] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 1.33% complete, ETA 01:43:54
# Fork: 1 of 1
# Warmup Iteration   1: 3055.923 ops/ms
# Warmup Iteration   2: 3096.044 ops/ms
# Warmup Iteration   3: 3096.482 ops/ms
Iteration   1: 3087.871 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3096.102 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3085.099 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3090.074 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3091.301 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3090.089 ±(99.9%) 15.811 ops/ms [Average]
  (min, avg, max) = (3085.099, 3090.089, 3096.102), stdev = 4.106
  CI (99.9%): [3074.278, 3105.901] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 2.67% complete, ETA 01:42:30
# Fork: 1 of 1
# Warmup Iteration   1: 2908.222 ops/ms
# Warmup Iteration   2: 2915.950 ops/ms
# Warmup Iteration   3: 2926.923 ops/ms
Iteration   1: 2937.295 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2939.103 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2940.189 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2940.632 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2947.053 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2940.854 ±(99.9%) 14.232 ops/ms [Average]
  (min, avg, max) = (2937.295, 2940.854, 2947.053), stdev = 3.696
  CI (99.9%): [2926.622, 2955.087] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 4.00% complete, ETA 01:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 389.042 ops/ms
# Warmup Iteration   2: 388.429 ops/ms
# Warmup Iteration   3: 389.705 ops/ms
Iteration   1: 389.795 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 388.103 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 386.893 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 389.731 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 388.850 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  388.674 ±(99.9%) 4.677 ops/ms [Average]
  (min, avg, max) = (386.893, 388.674, 389.795), stdev = 1.215
  CI (99.9%): [383.997, 393.351] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 5.33% complete, ETA 01:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 408.738 ops/ms
# Warmup Iteration   2: 406.910 ops/ms
# Warmup Iteration   3: 411.799 ops/ms
Iteration   1: 412.063 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 408.989 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 410.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 411.112 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 407.797 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  409.996 ±(99.9%) 6.491 ops/ms [Average]
  (min, avg, max) = (407.797, 409.996, 412.063), stdev = 1.686
  CI (99.9%): [403.505, 416.487] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 6.67% complete, ETA 01:38:18
# Fork: 1 of 1
# Warmup Iteration   1: 390.957 ops/ms
# Warmup Iteration   2: 391.370 ops/ms
# Warmup Iteration   3: 389.166 ops/ms
Iteration   1: 390.988 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 392.243 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 392.074 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 389.228 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 390.339 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  390.974 ±(99.9%) 4.822 ops/ms [Average]
  (min, avg, max) = (389.228, 390.974, 392.243), stdev = 1.252
  CI (99.9%): [386.153, 395.796] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 8.00% complete, ETA 01:36:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.371 ops/ms
# Warmup Iteration   2: 0.373 ops/ms
# Warmup Iteration   3: 0.373 ops/ms
Iteration   1: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.374 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.372 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.110 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.372 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.374 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.373 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (0.372, 0.373, 0.374), stdev = 0.001
  CI (99.9%): [0.369, 0.377] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.113 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (0.109, 0.113, 0.118), stdev = 0.005
  CI (99.9%): [0.094, 0.131] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 9.33% complete, ETA 01:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.409 ops/ms
# Warmup Iteration   2: 0.409 ops/ms
# Warmup Iteration   3: 0.411 ops/ms
Iteration   1: 0.410 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.107 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.411 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.107 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.409 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.410 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.107 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.411 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.107 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.410 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (0.409, 0.410, 0.411), stdev = 0.001
  CI (99.9%): [0.407, 0.413] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.106 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.100, 0.106, 0.107), stdev = 0.003
  CI (99.9%): [0.093, 0.119] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 10.67% complete, ETA 01:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.414 ops/ms
# Warmup Iteration   2: 0.409 ops/ms
# Warmup Iteration   3: 0.409 ops/ms
Iteration   1: 0.409 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.409 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.409 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.409 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.107 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.408 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.409 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (0.408, 0.409, 0.409), stdev = 0.001
  CI (99.9%): [0.406, 0.411] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.108 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.107, 0.108, 0.108), stdev = 0.001
  CI (99.9%): [0.107, 0.108] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 12.00% complete, ETA 01:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 3089.652 ops/ms
# Warmup Iteration   2: 3077.234 ops/ms
# Warmup Iteration   3: 3081.377 ops/ms
Iteration   1: 3053.058 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3097.594 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3081.521 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3079.852 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3078.867 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3078.178 ±(99.9%) 61.564 ops/ms [Average]
  (min, avg, max) = (3053.058, 3078.178, 3097.594), stdev = 15.988
  CI (99.9%): [3016.615, 3139.742] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 13.33% complete, ETA 01:31:17
# Fork: 1 of 1
# Warmup Iteration   1: 3299.677 ops/ms
# Warmup Iteration   2: 3290.384 ops/ms
# Warmup Iteration   3: 3295.930 ops/ms
Iteration   1: 3282.646 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3315.854 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3290.660 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3294.912 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3315.052 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3299.825 ±(99.9%) 57.503 ops/ms [Average]
  (min, avg, max) = (3282.646, 3299.825, 3315.854), stdev = 14.933
  CI (99.9%): [3242.321, 3357.328] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 14.67% complete, ETA 01:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 3447.403 ops/ms
# Warmup Iteration   2: 3424.717 ops/ms
# Warmup Iteration   3: 3470.772 ops/ms
Iteration   1: 3464.819 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3454.191 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3439.626 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3450.941 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3469.745 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3455.864 ±(99.9%) 45.706 ops/ms [Average]
  (min, avg, max) = (3439.626, 3455.864, 3469.745), stdev = 11.870
  CI (99.9%): [3410.158, 3501.571] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 16.00% complete, ETA 01:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 398.777 ops/ms
# Warmup Iteration   2: 400.076 ops/ms
# Warmup Iteration   3: 398.285 ops/ms
Iteration   1: 399.321 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 398.574 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 400.812 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 399.980 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 401.308 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  399.999 ±(99.9%) 4.246 ops/ms [Average]
  (min, avg, max) = (398.574, 399.999, 401.308), stdev = 1.103
  CI (99.9%): [395.753, 404.245] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 17.33% complete, ETA 01:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 431.502 ops/ms
# Warmup Iteration   2: 432.163 ops/ms
# Warmup Iteration   3: 427.254 ops/ms
Iteration   1: 429.470 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 432.314 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 433.696 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 429.826 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 433.032 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  431.668 ±(99.9%) 7.360 ops/ms [Average]
  (min, avg, max) = (429.470, 431.668, 433.696), stdev = 1.911
  CI (99.9%): [424.308, 439.028] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 18.67% complete, ETA 01:25:40
# Fork: 1 of 1
# Warmup Iteration   1: 431.768 ops/ms
# Warmup Iteration   2: 433.497 ops/ms
# Warmup Iteration   3: 431.952 ops/ms
Iteration   1: 432.853 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 433.030 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 433.332 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 433.377 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 433.114 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  433.141 ±(99.9%) 0.835 ops/ms [Average]
  (min, avg, max) = (432.853, 433.141, 433.377), stdev = 0.217
  CI (99.9%): [432.307, 433.976] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 20.00% complete, ETA 01:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.388 ops/ms
# Warmup Iteration   2: 0.391 ops/ms
# Warmup Iteration   3: 0.392 ops/ms
Iteration   1: 0.389 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.113 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.392 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.112 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.390 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.113 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.388 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.113 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.390 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.113 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.390 ±(99.9%) 0.005 ops/ms [Average]
  (min, avg, max) = (0.388, 0.390, 0.392), stdev = 0.001
  CI (99.9%): [0.385, 0.395] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.113 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.112, 0.113, 0.113), stdev = 0.001
  CI (99.9%): [0.111, 0.114] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 21.33% complete, ETA 01:22:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.413 ops/ms
# Warmup Iteration   2: 0.415 ops/ms
# Warmup Iteration   3: 0.414 ops/ms
Iteration   1: 0.411 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.414 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.416 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.415 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.415 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.414 ±(99.9%) 0.007 ops/ms [Average]
  (min, avg, max) = (0.411, 0.414, 0.416), stdev = 0.002
  CI (99.9%): [0.407, 0.422] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.103 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.098, 0.103, 0.106), stdev = 0.004
  CI (99.9%): [0.087, 0.119] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 22.67% complete, ETA 01:21:27
# Fork: 1 of 1
# Warmup Iteration   1: 0.385 ops/ms
# Warmup Iteration   2: 0.377 ops/ms
# Warmup Iteration   3: 0.376 ops/ms
Iteration   1: 0.378 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.375 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.378 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.116 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.377 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.117 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.377 ±(99.9%) 0.005 ops/ms [Average]
  (min, avg, max) = (0.375, 0.377, 0.378), stdev = 0.001
  CI (99.9%): [0.372, 0.382] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.115 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (0.109, 0.115, 0.117), stdev = 0.004
  CI (99.9%): [0.101, 0.129] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 24.00% complete, ETA 01:20:03
# Fork: 1 of 1
# Warmup Iteration   1: 3382.437 ops/ms
# Warmup Iteration   2: 3372.289 ops/ms
# Warmup Iteration   3: 3386.542 ops/ms
Iteration   1: 3384.147 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3385.598 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3370.053 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3372.776 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3384.023 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3379.319 ±(99.9%) 28.134 ops/ms [Average]
  (min, avg, max) = (3370.053, 3379.319, 3385.598), stdev = 7.306
  CI (99.9%): [3351.185, 3407.453] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 25.33% complete, ETA 01:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 3348.185 ops/ms
# Warmup Iteration   2: 3339.981 ops/ms
# Warmup Iteration   3: 3355.996 ops/ms
Iteration   1: 3340.014 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3357.267 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3331.780 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3357.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3369.945 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3351.219 ±(99.9%) 58.562 ops/ms [Average]
  (min, avg, max) = (3331.780, 3351.219, 3369.945), stdev = 15.208
  CI (99.9%): [3292.658, 3409.781] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 26.67% complete, ETA 01:17:14
# Fork: 1 of 1
# Warmup Iteration   1: 3387.129 ops/ms
# Warmup Iteration   2: 3413.159 ops/ms
# Warmup Iteration   3: 3482.352 ops/ms
Iteration   1: 3475.828 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3493.741 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3493.489 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3473.984 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3478.886 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3483.185 ±(99.9%) 37.277 ops/ms [Average]
  (min, avg, max) = (3473.984, 3483.185, 3493.741), stdev = 9.681
  CI (99.9%): [3445.909, 3520.462] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 28.00% complete, ETA 01:15:50
# Fork: 1 of 1
# Warmup Iteration   1: 438.477 ops/ms
# Warmup Iteration   2: 439.439 ops/ms
# Warmup Iteration   3: 438.740 ops/ms
Iteration   1: 437.522 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 439.722 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 439.010 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 440.109 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 439.297 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  439.132 ±(99.9%) 3.820 ops/ms [Average]
  (min, avg, max) = (437.522, 439.132, 440.109), stdev = 0.992
  CI (99.9%): [435.312, 442.952] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 29.33% complete, ETA 01:14:26
# Fork: 1 of 1
# Warmup Iteration   1: 455.398 ops/ms
# Warmup Iteration   2: 453.866 ops/ms
# Warmup Iteration   3: 454.501 ops/ms
Iteration   1: 453.928 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 457.183 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 456.747 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 457.433 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 457.515 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  456.561 ±(99.9%) 5.784 ops/ms [Average]
  (min, avg, max) = (453.928, 456.561, 457.515), stdev = 1.502
  CI (99.9%): [450.778, 462.345] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 30.67% complete, ETA 01:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 441.711 ops/ms
# Warmup Iteration   2: 438.413 ops/ms
# Warmup Iteration   3: 444.962 ops/ms
Iteration   1: 445.902 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 445.427 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 445.510 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 444.723 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 444.622 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  445.237 ±(99.9%) 2.106 ops/ms [Average]
  (min, avg, max) = (444.622, 445.237, 445.902), stdev = 0.547
  CI (99.9%): [443.131, 447.343] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 32.00% complete, ETA 01:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.435 ops/ms
# Warmup Iteration   2: 0.436 ops/ms
# Warmup Iteration   3: 0.436 ops/ms
Iteration   1: 0.434 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.436 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.431 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.102 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.436 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.434 ±(99.9%) 0.007 ops/ms [Average]
  (min, avg, max) = (0.431, 0.434, 0.436), stdev = 0.002
  CI (99.9%): [0.427, 0.441] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.098 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.094, 0.098, 0.102), stdev = 0.004
  CI (99.9%): [0.082, 0.115] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 33.33% complete, ETA 01:10:13
# Fork: 1 of 1
# Warmup Iteration   1: 0.431 ops/ms
# Warmup Iteration   2: 0.432 ops/ms
# Warmup Iteration   3: 0.428 ops/ms
Iteration   1: 0.433 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.102 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.431 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.102 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.432 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.102 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.432 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.102 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.432 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.102 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.432 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (0.431, 0.432, 0.433), stdev = 0.001
  CI (99.9%): [0.429, 0.435] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.102 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.102, 0.102, 0.102), stdev = 0.001
  CI (99.9%): [0.101, 0.103] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 34.67% complete, ETA 01:08:49
# Fork: 1 of 1
# Warmup Iteration   1: 0.463 ops/ms
# Warmup Iteration   2: 0.460 ops/ms
# Warmup Iteration   3: 0.462 ops/ms
Iteration   1: 0.464 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.088 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.462 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.088 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.462 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.088 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.463 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.088 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.466 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.464 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (0.462, 0.464, 0.466), stdev = 0.002
  CI (99.9%): [0.457, 0.470] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.089 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.088, 0.089, 0.094), stdev = 0.003
  CI (99.9%): [0.079, 0.100] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 36.00% complete, ETA 01:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 9568.352 ops/ms
# Warmup Iteration   2: 9636.582 ops/ms
# Warmup Iteration   3: 9717.546 ops/ms
Iteration   1: 9688.099 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9680.774 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9713.482 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9720.442 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9721.367 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9704.833 ±(99.9%) 73.331 ops/ms [Average]
  (min, avg, max) = (9680.774, 9704.833, 9721.367), stdev = 19.044
  CI (99.9%): [9631.501, 9778.164] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 37.33% complete, ETA 01:06:00
# Fork: 1 of 1
# Warmup Iteration   1: 12195.787 ops/ms
# Warmup Iteration   2: 10972.968 ops/ms
# Warmup Iteration   3: 11026.552 ops/ms
Iteration   1: 11052.893 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10979.485 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11055.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11027.630 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11032.105 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11029.532 ±(99.9%) 117.707 ops/ms [Average]
  (min, avg, max) = (10979.485, 11029.532, 11055.549), stdev = 30.568
  CI (99.9%): [10911.826, 11147.239] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 38.67% complete, ETA 01:04:36
# Fork: 1 of 1
# Warmup Iteration   1: 13839.528 ops/ms
# Warmup Iteration   2: 13059.472 ops/ms
# Warmup Iteration   3: 13259.903 ops/ms
Iteration   1: 13333.867 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13384.551 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13341.202 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13389.486 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13342.571 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13358.335 ±(99.9%) 101.849 ops/ms [Average]
  (min, avg, max) = (13333.867, 13358.335, 13389.486), stdev = 26.450
  CI (99.9%): [13256.487, 13460.184] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 40.00% complete, ETA 01:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 1114.324 ops/ms
# Warmup Iteration   2: 1110.518 ops/ms
# Warmup Iteration   3: 1114.709 ops/ms
Iteration   1: 1109.956 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1116.057 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1112.596 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1118.012 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1113.221 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1113.968 ±(99.9%) 12.062 ops/ms [Average]
  (min, avg, max) = (1109.956, 1113.968, 1118.012), stdev = 3.133
  CI (99.9%): [1101.906, 1126.031] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 41.33% complete, ETA 01:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 2180.099 ops/ms
# Warmup Iteration   2: 2196.843 ops/ms
# Warmup Iteration   3: 2197.168 ops/ms
Iteration   1: 2209.050 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2202.053 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2207.666 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2198.853 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2196.524 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2202.829 ±(99.9%) 20.937 ops/ms [Average]
  (min, avg, max) = (2196.524, 2202.829, 2209.050), stdev = 5.437
  CI (99.9%): [2181.892, 2223.766] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 42.67% complete, ETA 01:00:23
# Fork: 1 of 1
# Warmup Iteration   1: 2426.618 ops/ms
# Warmup Iteration   2: 2413.956 ops/ms
# Warmup Iteration   3: 2422.885 ops/ms
Iteration   1: 2432.029 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2416.410 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2430.260 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2436.329 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2436.424 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2430.290 ±(99.9%) 31.624 ops/ms [Average]
  (min, avg, max) = (2416.410, 2430.290, 2436.424), stdev = 8.213
  CI (99.9%): [2398.667, 2461.914] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 44.00% complete, ETA 00:58:59
# Fork: 1 of 1
# Warmup Iteration   1: 1.104 ops/ms
# Warmup Iteration   2: 1.098 ops/ms
# Warmup Iteration   3: 1.092 ops/ms
Iteration   1: 1.104 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.100 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.101 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.096 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.102 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.100 ±(99.9%) 0.012 ops/ms [Average]
  (min, avg, max) = (1.096, 1.100, 1.104), stdev = 0.003
  CI (99.9%): [1.089, 1.112] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.039 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.037, 0.039, 0.040), stdev = 0.002
  CI (99.9%): [0.033, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 45.33% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.138 ops/ms
# Warmup Iteration   2: 1.136 ops/ms
# Warmup Iteration   3: 1.136 ops/ms
Iteration   1: 1.136 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.129 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.039 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.129 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.128 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.039 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.125 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.039 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.129 ±(99.9%) 0.017 ops/ms [Average]
  (min, avg, max) = (1.125, 1.129, 1.136), stdev = 0.004
  CI (99.9%): [1.113, 1.146] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.038 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.036, 0.038, 0.039), stdev = 0.002
  CI (99.9%): [0.031, 0.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 46.67% complete, ETA 00:56:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.519 ops/ms
# Warmup Iteration   2: 1.515 ops/ms
# Warmup Iteration   3: 1.531 ops/ms
Iteration   1: 1.519 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.523 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.519 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.529 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.528 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.523 ±(99.9%) 0.018 ops/ms [Average]
  (min, avg, max) = (1.519, 1.523, 1.529), stdev = 0.005
  CI (99.9%): [1.506, 1.541] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.012 B/op [Average]
  (min, avg, max) = (0.029, 0.030, 0.036), stdev = 0.003
  CI (99.9%): [0.019, 0.042] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 48.00% complete, ETA 00:54:46
# Fork: 1 of 1
# Warmup Iteration   1: 10610.851 ops/ms
# Warmup Iteration   2: 10628.730 ops/ms
# Warmup Iteration   3: 10688.274 ops/ms
Iteration   1: 10660.266 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10687.861 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10700.208 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10701.298 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10664.681 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10682.863 ±(99.9%) 74.738 ops/ms [Average]
  (min, avg, max) = (10660.266, 10682.863, 10701.298), stdev = 19.409
  CI (99.9%): [10608.125, 10757.601] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 49.33% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 14012.406 ops/ms
# Warmup Iteration   2: 13464.826 ops/ms
# Warmup Iteration   3: 13654.862 ops/ms
Iteration   1: 13536.113 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13660.830 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13665.913 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13622.412 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13659.834 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13629.021 ±(99.9%) 210.890 ops/ms [Average]
  (min, avg, max) = (13536.113, 13629.021, 13665.913), stdev = 54.767
  CI (99.9%): [13418.131, 13839.911] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 50.67% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 14074.062 ops/ms
# Warmup Iteration   2: 14137.944 ops/ms
# Warmup Iteration   3: 14260.117 ops/ms
Iteration   1: 14116.241 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14318.229 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14250.486 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14269.683 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14338.546 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  14258.637 ±(99.9%) 335.701 ops/ms [Average]
  (min, avg, max) = (14116.241, 14258.637, 14338.546), stdev = 87.181
  CI (99.9%): [13922.936, 14594.338] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 52.00% complete, ETA 00:50:33
# Fork: 1 of 1
# Warmup Iteration   1: 1095.908 ops/ms
# Warmup Iteration   2: 1102.332 ops/ms
# Warmup Iteration   3: 1079.917 ops/ms
Iteration   1: 1086.620 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1080.529 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1081.783 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1079.195 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1084.947 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1082.615 ±(99.9%) 11.903 ops/ms [Average]
  (min, avg, max) = (1079.195, 1082.615, 1086.620), stdev = 3.091
  CI (99.9%): [1070.712, 1094.517] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 53.33% complete, ETA 00:49:09
# Fork: 1 of 1
# Warmup Iteration   1: 2649.253 ops/ms
# Warmup Iteration   2: 2651.060 ops/ms
# Warmup Iteration   3: 2611.247 ops/ms
Iteration   1: 2635.792 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2642.665 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2656.430 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2646.030 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2640.936 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2644.371 ±(99.9%) 29.608 ops/ms [Average]
  (min, avg, max) = (2635.792, 2644.371, 2656.430), stdev = 7.689
  CI (99.9%): [2614.763, 2673.979] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 54.67% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 2701.942 ops/ms
# Warmup Iteration   2: 2714.521 ops/ms
# Warmup Iteration   3: 2734.905 ops/ms
Iteration   1: 2732.285 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2730.482 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2723.653 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2730.601 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2715.143 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2726.433 ±(99.9%) 27.445 ops/ms [Average]
  (min, avg, max) = (2715.143, 2726.433, 2732.285), stdev = 7.127
  CI (99.9%): [2698.987, 2753.878] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 56.00% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.074 ops/ms
# Warmup Iteration   2: 1.066 ops/ms
# Warmup Iteration   3: 1.073 ops/ms
Iteration   1: 1.072 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.069 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.068 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.076 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.076 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.041 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.072 ±(99.9%) 0.014 ops/ms [Average]
  (min, avg, max) = (1.068, 1.072, 1.076), stdev = 0.004
  CI (99.9%): [1.058, 1.086] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.040 ±(99.9%) 0.005 B/op [Average]
  (min, avg, max) = (0.038, 0.040, 0.041), stdev = 0.001
  CI (99.9%): [0.036, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 57.33% complete, ETA 00:44:56
# Fork: 1 of 1
# Warmup Iteration   1: 1.461 ops/ms
# Warmup Iteration   2: 1.472 ops/ms
# Warmup Iteration   3: 1.466 ops/ms
Iteration   1: 1.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.459 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.467 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.469 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.471 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.468 ±(99.9%) 0.023 ops/ms [Average]
  (min, avg, max) = (1.459, 1.468, 1.475), stdev = 0.006
  CI (99.9%): [1.445, 1.492] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.031 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.028, 0.031, 0.037), stdev = 0.004
  CI (99.9%): [0.016, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 58.67% complete, ETA 00:43:32
# Fork: 1 of 1
# Warmup Iteration   1: 1.703 ops/ms
# Warmup Iteration   2: 1.709 ops/ms
# Warmup Iteration   3: 1.709 ops/ms
Iteration   1: 1.705 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.715 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.710 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.719 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.710 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.712 ±(99.9%) 0.021 ops/ms [Average]
  (min, avg, max) = (1.705, 1.712, 1.719), stdev = 0.005
  CI (99.9%): [1.691, 1.733] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.025 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (0.024, 0.025, 0.030), stdev = 0.003
  CI (99.9%): [0.015, 0.036] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 60.00% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 9737.577 ops/ms
# Warmup Iteration   2: 9763.689 ops/ms
# Warmup Iteration   3: 9826.912 ops/ms
Iteration   1: 9882.445 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9856.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9858.101 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9799.423 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9856.427 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9850.567 ±(99.9%) 118.019 ops/ms [Average]
  (min, avg, max) = (9799.423, 9850.567, 9882.445), stdev = 30.649
  CI (99.9%): [9732.548, 9968.586] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 61.33% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 11571.286 ops/ms
# Warmup Iteration   2: 11625.484 ops/ms
# Warmup Iteration   3: 11801.188 ops/ms
Iteration   1: 11805.102 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11809.807 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11651.144 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11801.393 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11803.678 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11774.225 ±(99.9%) 265.205 ops/ms [Average]
  (min, avg, max) = (11651.144, 11774.225, 11809.807), stdev = 68.873
  CI (99.9%): [11509.019, 12039.430] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 62.67% complete, ETA 00:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 10868.398 ops/ms
# Warmup Iteration   2: 10913.004 ops/ms
# Warmup Iteration   3: 11006.173 ops/ms
Iteration   1: 10986.961 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10907.631 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10990.570 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10953.970 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10920.306 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10951.888 ±(99.9%) 145.191 ops/ms [Average]
  (min, avg, max) = (10907.631, 10951.888, 10990.570), stdev = 37.706
  CI (99.9%): [10806.696, 11097.079] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 64.00% complete, ETA 00:37:55
# Fork: 1 of 1
# Warmup Iteration   1: 1547.397 ops/ms
# Warmup Iteration   2: 1555.446 ops/ms
# Warmup Iteration   3: 1547.247 ops/ms
Iteration   1: 1547.601 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1547.872 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1537.314 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1534.366 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1546.693 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1542.769 ±(99.9%) 24.743 ops/ms [Average]
  (min, avg, max) = (1534.366, 1542.769, 1547.872), stdev = 6.426
  CI (99.9%): [1518.026, 1567.512] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 65.33% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 2317.712 ops/ms
# Warmup Iteration   2: 2340.603 ops/ms
# Warmup Iteration   3: 2339.912 ops/ms
Iteration   1: 2345.634 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2329.374 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2346.898 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2331.068 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2348.194 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2340.233 ±(99.9%) 35.443 ops/ms [Average]
  (min, avg, max) = (2329.374, 2340.233, 2348.194), stdev = 9.204
  CI (99.9%): [2304.791, 2375.676] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 66.67% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 2150.963 ops/ms
# Warmup Iteration   2: 2144.712 ops/ms
# Warmup Iteration   3: 2166.762 ops/ms
Iteration   1: 2161.690 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2162.762 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2147.071 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2175.623 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2165.865 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2162.602 ±(99.9%) 39.564 ops/ms [Average]
  (min, avg, max) = (2147.071, 2162.602, 2175.623), stdev = 10.275
  CI (99.9%): [2123.038, 2202.166] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 68.00% complete, ETA 00:33:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.578 ops/ms
# Warmup Iteration   2: 1.587 ops/ms
# Warmup Iteration   3: 1.588 ops/ms
Iteration   1: 1.578 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.592 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.583 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.574 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.035 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.578 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.581 ±(99.9%) 0.026 ops/ms [Average]
  (min, avg, max) = (1.574, 1.581, 1.592), stdev = 0.007
  CI (99.9%): [1.555, 1.607] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.035), stdev = 0.003
  CI (99.9%): [0.016, 0.042] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 69.33% complete, ETA 00:32:18
# Fork: 1 of 1
# Warmup Iteration   1: 2.421 ops/ms
# Warmup Iteration   2: 2.429 ops/ms
# Warmup Iteration   3: 2.422 ops/ms
Iteration   1: 2.419 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.429 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.400 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.432 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.420 ±(99.9%) 0.049 ops/ms [Average]
  (min, avg, max) = (2.400, 2.420, 2.432), stdev = 0.013
  CI (99.9%): [2.371, 2.468] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.019 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.017, 0.019, 0.022), stdev = 0.002
  CI (99.9%): [0.010, 0.027] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 70.67% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 1.996 ops/ms
# Warmup Iteration   2: 2.011 ops/ms
# Warmup Iteration   3: 2.001 ops/ms
Iteration   1: 2.013 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.000 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.994 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.006 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.995 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.001 ±(99.9%) 0.030 ops/ms [Average]
  (min, avg, max) = (1.994, 2.001, 2.013), stdev = 0.008
  CI (99.9%): [1.971, 2.032] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.023 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.022, 0.023, 0.026), stdev = 0.002
  CI (99.9%): [0.016, 0.029] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 72.00% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 12780.056 ops/ms
# Warmup Iteration   2: 13002.685 ops/ms
# Warmup Iteration   3: 12863.603 ops/ms
Iteration   1: 12854.713 ops/ms
                 ·gc.alloc.rate:                   3175.520 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.933 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.418 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         31.000 ms

Iteration   2: 12851.083 ops/ms
                 ·gc.alloc.rate:                   3174.688 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3157.031 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.497 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         33.000 ms

Iteration   3: 12863.081 ops/ms
                 ·gc.alloc.rate:                   3177.709 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.467 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     275.071 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         28.000 ms

Iteration   4: 12867.000 ops/ms
                 ·gc.alloc.rate:                   3178.591 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3157.012 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.163 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         31.000 ms

Iteration   5: 12879.166 ops/ms
                 ·gc.alloc.rate:                   3181.627 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.395 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.726 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         32.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  12863.008 ±(99.9%) 42.534 ops/ms [Average]
  (min, avg, max) = (12851.083, 12863.008, 12879.166), stdev = 11.046
  CI (99.9%): [12820.475, 12905.542] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3177.627 ±(99.9%) 10.548 MB/sec [Average]
  (min, avg, max) = (3174.688, 3177.627, 3181.627), stdev = 2.739
  CI (99.9%): [3167.079, 3188.175] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3179.568 ±(99.9%) 119.034 MB/sec [Average]
  (min, avg, max) = (3156.933, 3179.568, 3213.467), stdev = 30.913
  CI (99.9%): [3060.533, 3298.602] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.175 ±(99.9%) 9.597 B/op [Average]
  (min, avg, max) = (270.163, 272.175, 275.071), stdev = 2.492
  CI (99.9%): [262.579, 281.772] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  282.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (56.000, 56.400, 57.000), stdev = 0.548
  CI (99.9%): [282.000, 282.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  155.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 31.000, 33.000), stdev = 1.871
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 73.33% complete, ETA 00:28:05
# Fork: 1 of 1
# Warmup Iteration   1: 12861.422 ops/ms
# Warmup Iteration   2: 12956.508 ops/ms
# Warmup Iteration   3: 12857.612 ops/ms
Iteration   1: 12835.761 ops/ms
                 ·gc.alloc.rate:                   3170.839 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.933 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.817 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         32.000 ms

Iteration   2: 12766.214 ops/ms
                 ·gc.alloc.rate:                   3153.540 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.825 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.294 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         31.000 ms

Iteration   3: 12833.291 ops/ms
                 ·gc.alloc.rate:                   3170.230 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.944 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.870 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         32.000 ms

Iteration   4: 12844.851 ops/ms
                 ·gc.alloc.rate:                   3173.076 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.324 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     275.461 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         30.000 ms

Iteration   5: 12859.382 ops/ms
                 ·gc.alloc.rate:                   3176.683 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.982 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.323 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         30.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  12827.900 ±(99.9%) 138.495 ops/ms [Average]
  (min, avg, max) = (12766.214, 12827.900, 12859.382), stdev = 35.967
  CI (99.9%): [12689.405, 12966.395] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3168.874 ±(99.9%) 34.412 MB/sec [Average]
  (min, avg, max) = (3153.540, 3168.874, 3176.683), stdev = 8.937
  CI (99.9%): [3134.461, 3203.286] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3168.202 ±(99.9%) 97.129 MB/sec [Average]
  (min, avg, max) = (3156.825, 3168.202, 3213.324), stdev = 25.224
  CI (99.9%): [3071.072, 3265.331] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.953 ±(99.9%) 8.063 B/op [Average]
  (min, avg, max) = (270.323, 271.953, 275.461), stdev = 2.094
  CI (99.9%): [263.890, 280.016] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  281.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (56.000, 56.200, 57.000), stdev = 0.447
  CI (99.9%): [281.000, 281.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  155.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (30.000, 31.000, 32.000), stdev = 1.000
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 74.67% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 12749.816 ops/ms
# Warmup Iteration   2: 12932.152 ops/ms
# Warmup Iteration   3: 12818.175 ops/ms
Iteration   1: 12877.233 ops/ms
                 ·gc.alloc.rate:                   3181.141 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.391 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.768 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         32.000 ms

Iteration   2: 12885.912 ops/ms
                 ·gc.alloc.rate:                   3183.239 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.978 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     269.766 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 12891.561 ops/ms
                 ·gc.alloc.rate:                   3184.642 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.347 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.462 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         29.000 ms

Iteration   4: 12899.596 ops/ms
                 ·gc.alloc.rate:                   3186.536 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3156.889 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     269.479 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         31.000 ms

Iteration   5: 12908.241 ops/ms
                 ·gc.alloc.rate:                   3188.693 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.268 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.107 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         31.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  12892.509 ±(99.9%) 46.188 ops/ms [Average]
  (min, avg, max) = (12877.233, 12892.509, 12908.241), stdev = 11.995
  CI (99.9%): [12846.321, 12938.696] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3184.850 ±(99.9%) 11.227 MB/sec [Average]
  (min, avg, max) = (3181.141, 3184.850, 3188.693), stdev = 2.916
  CI (99.9%): [3173.623, 3196.077] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3190.775 ±(99.9%) 118.957 MB/sec [Average]
  (min, avg, max) = (3156.889, 3190.775, 3213.391), stdev = 30.893
  CI (99.9%): [3071.818, 3309.731] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.516 ±(99.9%) 10.219 B/op [Average]
  (min, avg, max) = (269.479, 272.516, 274.768), stdev = 2.654
  CI (99.9%): [262.297, 282.736] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  283.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (56.000, 56.600, 57.000), stdev = 0.548
  CI (99.9%): [283.000, 283.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  153.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 30.600, 32.000), stdev = 1.140
  CI (99.9%): [153.000, 153.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 76.00% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 1598.862 ops/ms
# Warmup Iteration   2: 1624.399 ops/ms
# Warmup Iteration   3: 1631.881 ops/ms
Iteration   1: 1634.699 ops/ms
                 ·gc.alloc.rate:                   3064.308 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3044.209 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2050.539 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        54.000 counts
                 ·gc.time:                         31.000 ms

Iteration   2: 1635.420 ops/ms
                 ·gc.alloc.rate:                   3065.576 MB/sec
                 ·gc.alloc.rate.norm:              2064.079 B/op
                 ·gc.churn.G1_Eden_Space:          3100.494 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2087.589 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         31.000 ms

Iteration   3: 1525.040 ops/ms
                 ·gc.alloc.rate:                   2858.669 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          2818.632 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2035.169 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        50.000 counts
                 ·gc.time:                         27.000 ms

Iteration   4: 1531.143 ops/ms
                 ·gc.alloc.rate:                   2870.165 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          2875.068 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2067.604 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        51.000 counts
                 ·gc.time:                         28.000 ms

Iteration   5: 1633.756 ops/ms
                 ·gc.alloc.rate:                   3062.461 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3100.502 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2089.717 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.005 B/op
                 ·gc.count:                        55.000 counts
                 ·gc.time:                         32.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  1592.012 ±(99.9%) 224.854 ops/ms [Average]
  (min, avg, max) = (1525.040, 1592.012, 1635.420), stdev = 58.394
  CI (99.9%): [1367.158, 1816.865] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  2984.236 ±(99.9%) 421.493 MB/sec [Average]
  (min, avg, max) = (2858.669, 2984.236, 3065.576), stdev = 109.461
  CI (99.9%): [2562.742, 3405.729] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.078 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (2064.077, 2064.078, 2064.079), stdev = 0.001
  CI (99.9%): [2064.075, 2064.081] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  2987.781 ±(99.9%) 509.063 MB/sec [Average]
  (min, avg, max) = (2818.632, 2987.781, 3100.502), stdev = 132.202
  CI (99.9%): [2478.718, 3496.844] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2066.124 ±(99.9%) 90.729 B/op [Average]
  (min, avg, max) = (2035.169, 2066.124, 2089.717), stdev = 23.562
  CI (99.9%): [1975.395, 2156.852] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.003 ±(99.9%) 0.006 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.002
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  265.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (50.000, 53.000, 55.000), stdev = 2.345
  CI (99.9%): [265.000, 265.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  149.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (27.000, 29.800, 32.000), stdev = 2.168
  CI (99.9%): [149.000, 149.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 77.33% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 3665.127 ops/ms
# Warmup Iteration   2: 3769.723 ops/ms
# Warmup Iteration   3: 3796.798 ops/ms
Iteration   1: 3801.785 ops/ms
                 ·gc.alloc.rate:                   7126.555 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7075.730 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2049.333 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        86.000 counts
                 ·gc.time:                         52.000 ms

Iteration   2: 3787.657 ops/ms
                 ·gc.alloc.rate:                   7100.379 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7158.415 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2080.924 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         53.000 ms

Iteration   3: 3792.761 ops/ms
                 ·gc.alloc.rate:                   7109.532 MB/sec
                 ·gc.alloc.rate.norm:              2064.052 B/op
                 ·gc.churn.G1_Eden_Space:          7075.713 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2054.234 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        86.000 counts
                 ·gc.time:                         53.000 ms

Iteration   4: 3804.662 ops/ms
                 ·gc.alloc.rate:                   7131.854 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7158.036 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2071.630 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         52.000 ms

Iteration   5: 3807.292 ops/ms
                 ·gc.alloc.rate:                   7136.772 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7157.968 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2070.183 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         49.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3798.831 ±(99.9%) 31.987 ops/ms [Average]
  (min, avg, max) = (3787.657, 3798.831, 3807.292), stdev = 8.307
  CI (99.9%): [3766.844, 3830.818] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7121.018 ±(99.9%) 59.472 MB/sec [Average]
  (min, avg, max) = (7100.379, 7121.018, 7136.772), stdev = 15.445
  CI (99.9%): [7061.546, 7180.490] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.053 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.052, 2064.053, 2064.053), stdev = 0.001
  CI (99.9%): [2064.052, 2064.054] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7125.172 ±(99.9%) 173.827 MB/sec [Average]
  (min, avg, max) = (7075.713, 7125.172, 7158.415), stdev = 45.142
  CI (99.9%): [6951.345, 7299.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2065.261 ±(99.9%) 50.406 B/op [Average]
  (min, avg, max) = (2049.333, 2065.261, 2080.924), stdev = 13.090
  CI (99.9%): [2014.855, 2115.667] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.002, 0.005, 0.008), stdev = 0.002
  CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  433.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (86.000, 86.600, 87.000), stdev = 0.548
  CI (99.9%): [433.000, 433.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  259.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (49.000, 51.800, 53.000), stdev = 1.643
  CI (99.9%): [259.000, 259.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 78.67% complete, ETA 00:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 3689.709 ops/ms
# Warmup Iteration   2: 3773.948 ops/ms
# Warmup Iteration   3: 3803.872 ops/ms
Iteration   1: 3801.179 ops/ms
                 ·gc.alloc.rate:                   7125.621 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7075.935 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2049.661 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        86.000 counts
                 ·gc.time:                         51.000 ms

Iteration   2: 3803.274 ops/ms
                 ·gc.alloc.rate:                   7129.331 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7158.095 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2072.380 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         53.000 ms

Iteration   3: 3809.031 ops/ms
                 ·gc.alloc.rate:                   7139.928 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7157.826 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2069.227 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         53.000 ms

Iteration   4: 3794.678 ops/ms
                 ·gc.alloc.rate:                   7113.036 MB/sec
                 ·gc.alloc.rate.norm:              2064.052 B/op
                 ·gc.churn.G1_Eden_Space:          7075.567 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2053.179 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        86.000 counts
                 ·gc.time:                         53.000 ms

Iteration   5: 3800.728 ops/ms
                 ·gc.alloc.rate:                   7124.390 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7157.941 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2073.773 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         51.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3801.778 ±(99.9%) 19.889 ops/ms [Average]
  (min, avg, max) = (3794.678, 3801.778, 3809.031), stdev = 5.165
  CI (99.9%): [3781.889, 3821.667] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7126.461 ±(99.9%) 37.275 MB/sec [Average]
  (min, avg, max) = (7113.036, 7126.461, 7139.928), stdev = 9.680
  CI (99.9%): [7089.186, 7163.737] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.053 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.052, 2064.053, 2064.053), stdev = 0.001
  CI (99.9%): [2064.052, 2064.054] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7125.073 ±(99.9%) 173.374 MB/sec [Average]
  (min, avg, max) = (7075.567, 7125.073, 7158.095), stdev = 45.025
  CI (99.9%): [6951.699, 7298.447] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2063.644 ±(99.9%) 43.698 B/op [Average]
  (min, avg, max) = (2049.661, 2063.644, 2073.773), stdev = 11.348
  CI (99.9%): [2019.946, 2107.342] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.008 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  433.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (86.000, 86.600, 87.000), stdev = 0.548
  CI (99.9%): [433.000, 433.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  261.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (51.000, 52.200, 53.000), stdev = 1.095
  CI (99.9%): [261.000, 261.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 80.00% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.205 ops/ms
# Warmup Iteration   2: 2.214 ops/ms
# Warmup Iteration   3: 2.221 ops/ms
Iteration   1: 2.221 ops/ms
                 ·gc.alloc.rate:               33.081 MB/sec
                 ·gc.alloc.rate.norm:          16401.216 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27949.437 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   2: 2.226 ops/ms
                 ·gc.alloc.rate:      33.158 MB/sec
                 ·gc.alloc.rate.norm: 16400.024 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.248 ops/ms
                 ·gc.alloc.rate:                   33.484 MB/sec
                 ·gc.alloc.rate.norm:              16401.204 B/op
                 ·gc.churn.G1_Eden_Space:          56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     27611.289 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.505 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         2.000 ms

Iteration   4: 2.227 ops/ms
                 ·gc.alloc.rate:      33.163 MB/sec
                 ·gc.alloc.rate.norm: 16400.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.235 ops/ms
                 ·gc.alloc.rate:               33.287 MB/sec
                 ·gc.alloc.rate.norm:          16401.209 B/op
                 ·gc.churn.G1_Eden_Space:      56.374 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27776.848 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     1.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  2.231 ±(99.9%) 0.041 ops/ms [Average]
  (min, avg, max) = (2.221, 2.231, 2.248), stdev = 0.011
  CI (99.9%): [2.191, 2.272] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  33.235 ±(99.9%) 0.608 MB/sec [Average]
  (min, avg, max) = (33.081, 33.235, 33.484), stdev = 0.158
  CI (99.9%): [32.627, 33.842] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.734 ±(99.9%) 2.506 B/op [Average]
  (min, avg, max) = (16400.018, 16400.734, 16401.216), stdev = 0.651
  CI (99.9%): [16398.228, 16403.240] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  33.824 ±(99.9%) 118.896 MB/sec [Average]
  (min, avg, max) = (≈ 0, 33.824, 56.374), stdev = 30.877
  CI (99.9%): [≈ 0, 152.719] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16667.515 ±(99.9%) 58590.471 B/op [Average]
  (min, avg, max) = (≈ 0, 16667.515, 27949.437), stdev = 15215.759
  CI (99.9%): [≈ 0, 75257.986] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.101 ±(99.9%) 0.870 B/op [Average]
  (min, avg, max) = (≈ 0, 0.101, 0.505), stdev = 0.226
  CI (99.9%): [≈ 0, 0.971] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  3.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 81.33% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 6.948 ops/ms
# Warmup Iteration   2: 7.047 ops/ms
# Warmup Iteration   3: 7.043 ops/ms
Iteration   1: 7.026 ops/ms
                 ·gc.alloc.rate:                   104.640 MB/sec
                 ·gc.alloc.rate.norm:              16400.759 B/op
                 ·gc.churn.G1_Eden_Space:          112.744 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17670.785 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.085 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 7.020 ops/ms
                 ·gc.alloc.rate:                   104.553 MB/sec
                 ·gc.alloc.rate.norm:              16400.760 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17685.888 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.438 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 7.036 ops/ms
                 ·gc.alloc.rate:               104.801 MB/sec
                 ·gc.alloc.rate.norm:          16400.383 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 8821.706 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   4: 7.015 ops/ms
                 ·gc.alloc.rate:                   104.485 MB/sec
                 ·gc.alloc.rate.norm:              16400.761 B/op
                 ·gc.churn.G1_Eden_Space:          112.744 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17697.233 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.659 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 7.025 ops/ms
                 ·gc.alloc.rate:                   104.631 MB/sec
                 ·gc.alloc.rate.norm:              16401.251 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17673.300 B/op
                 ·gc.churn.G1_Survivor_Space:      0.337 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 52.762 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  7.024 ±(99.9%) 0.031 ops/ms [Average]
  (min, avg, max) = (7.015, 7.024, 7.036), stdev = 0.008
  CI (99.9%): [6.993, 7.055] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  104.622 ±(99.9%) 0.456 MB/sec [Average]
  (min, avg, max) = (104.485, 104.622, 104.801), stdev = 0.118
  CI (99.9%): [104.166, 105.078] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.783 ±(99.9%) 1.187 B/op [Average]
  (min, avg, max) = (16400.383, 16400.783, 16401.251), stdev = 0.308
  CI (99.9%): [16399.596, 16401.970] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  101.470 ±(99.9%) 97.077 MB/sec [Average]
  (min, avg, max) = (56.372, 101.470, 112.746), stdev = 25.211
  CI (99.9%): [4.393, 198.547] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  15909.782 ±(99.9%) 15257.673 B/op [Average]
  (min, avg, max) = (8821.706, 15909.782, 17697.233), stdev = 3962.369
  CI (99.9%): [652.109, 31167.456] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.069 ±(99.9%) 0.576 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.069, 0.337), stdev = 0.150
  CI (99.9%): [≈ 0, 0.645] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  10.789 ±(99.9%) 90.356 B/op [Average]
  (min, avg, max) = (≈ 0, 10.789, 52.762), stdev = 23.465
  CI (99.9%): [≈ 0, 101.145] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  9.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  14.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
  CI (99.9%): [14.000, 14.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 82.67% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 9.010 ops/ms
# Warmup Iteration   2: 9.169 ops/ms
# Warmup Iteration   3: 9.137 ops/ms
Iteration   1: 9.110 ops/ms
                 ·gc.alloc.rate:                   135.684 MB/sec
                 ·gc.alloc.rate.norm:              16400.875 B/op
                 ·gc.churn.G1_Eden_Space:          169.120 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     20442.501 B/op
                 ·gc.churn.G1_Survivor_Space:      0.008 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.939 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         5.000 ms

Iteration   2: 9.163 ops/ms
                 ·gc.alloc.rate:               136.474 MB/sec
                 ·gc.alloc.rate.norm:          16400.582 B/op
                 ·gc.churn.G1_Eden_Space:      112.748 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 13549.356 B/op
                 ·gc.count:                    2.000 counts
                 ·gc.time:                     3.000 ms

Iteration   3: 9.160 ops/ms
                 ·gc.alloc.rate:                   136.438 MB/sec
                 ·gc.alloc.rate.norm:              16401.246 B/op
                 ·gc.churn.G1_Eden_Space:          169.117 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     20329.581 B/op
                 ·gc.churn.G1_Survivor_Space:      0.343 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 41.199 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         5.000 ms

Iteration   4: 9.152 ops/ms
                 ·gc.alloc.rate:                   136.308 MB/sec
                 ·gc.alloc.rate.norm:              16400.583 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13565.494 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.460 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 9.172 ops/ms
                 ·gc.alloc.rate:                   136.612 MB/sec
                 ·gc.alloc.rate.norm:              16400.868 B/op
                 ·gc.churn.G1_Eden_Space:          169.120 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     20303.649 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.712 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         2.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  9.151 ±(99.9%) 0.094 ops/ms [Average]
  (min, avg, max) = (9.110, 9.151, 9.172), stdev = 0.024
  CI (99.9%): [9.057, 9.245] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  136.303 ±(99.9%) 1.396 MB/sec [Average]
  (min, avg, max) = (135.684, 136.303, 136.612), stdev = 0.363
  CI (99.9%): [134.907, 137.699] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.831 ±(99.9%) 1.053 B/op [Average]
  (min, avg, max) = (16400.582, 16400.831, 16401.246), stdev = 0.274
  CI (99.9%): [16399.778, 16401.884] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  146.570 ±(99.9%) 118.894 MB/sec [Average]
  (min, avg, max) = (112.745, 146.570, 169.120), stdev = 30.876
  CI (99.9%): [27.676, 265.464] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  17638.116 ±(99.9%) 14345.630 B/op [Average]
  (min, avg, max) = (13549.356, 17638.116, 20442.501), stdev = 3725.515
  CI (99.9%): [3292.486, 31983.746] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.072 ±(99.9%) 0.583 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.072, 0.343), stdev = 0.151
  CI (99.9%): [≈ 0, 0.655] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  8.662 ±(99.9%) 70.051 B/op [Average]
  (min, avg, max) = (≈ 0, 8.662, 41.199), stdev = 18.192
  CI (99.9%): [≈ 0, 78.713] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  13.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
  CI (99.9%): [13.000, 13.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  17.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.400, 5.000), stdev = 1.517
  CI (99.9%): [17.000, 17.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 84.00% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 67679.084 ops/ms
# Warmup Iteration   2: 66239.243 ops/ms
# Warmup Iteration   3: 75216.616 ops/ms
Iteration   1: 74910.623 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 74973.343 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 75360.113 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 75336.737 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 75265.257 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  75169.215 ±(99.9%) 814.494 ops/ms [Average]
  (min, avg, max) = (74910.623, 75169.215, 75360.113), stdev = 211.522
  CI (99.9%): [74354.721, 75983.709] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 85.33% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 68095.377 ops/ms
# Warmup Iteration   2: 66464.791 ops/ms
# Warmup Iteration   3: 74946.775 ops/ms
Iteration   1: 75309.455 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 75021.308 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 75321.216 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 75219.807 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 75439.743 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  75262.306 ±(99.9%) 599.834 ops/ms [Average]
  (min, avg, max) = (75021.308, 75262.306, 75439.743), stdev = 155.775
  CI (99.9%): [74662.471, 75862.140] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 86.67% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 71433.824 ops/ms
# Warmup Iteration   2: 72240.862 ops/ms
# Warmup Iteration   3: 75451.226 ops/ms
Iteration   1: 75833.265 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 75944.365 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 75903.271 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 75350.967 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 75772.253 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  75760.824 ±(99.9%) 917.995 ops/ms [Average]
  (min, avg, max) = (75350.967, 75760.824, 75944.365), stdev = 238.400
  CI (99.9%): [74842.829, 76678.820] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 88.00% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 9003.821 ops/ms
# Warmup Iteration   2: 8146.995 ops/ms
# Warmup Iteration   3: 9048.699 ops/ms
Iteration   1: 9045.907 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9088.807 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9103.688 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9065.958 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9069.987 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9074.869 ±(99.9%) 85.386 ops/ms [Average]
  (min, avg, max) = (9045.907, 9074.869, 9103.688), stdev = 22.175
  CI (99.9%): [8989.483, 9160.256] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 89.33% complete, ETA 00:11:14
# Fork: 1 of 1
# Warmup Iteration   1: 32832.356 ops/ms
# Warmup Iteration   2: 32202.723 ops/ms
# Warmup Iteration   3: 31573.496 ops/ms
Iteration   1: 31547.597 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31398.737 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31518.161 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31464.023 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31407.534 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  31467.210 ±(99.9%) 253.368 ops/ms [Average]
  (min, avg, max) = (31398.737, 31467.210, 31547.597), stdev = 65.799
  CI (99.9%): [31213.842, 31720.578] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 90.67% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 33102.945 ops/ms
# Warmup Iteration   2: 32360.178 ops/ms
# Warmup Iteration   3: 31356.936 ops/ms
Iteration   1: 31337.191 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 31438.941 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 31393.309 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31433.433 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31333.936 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  31387.362 ±(99.9%) 194.351 ops/ms [Average]
  (min, avg, max) = (31333.936, 31387.362, 31438.941), stdev = 50.472
  CI (99.9%): [31193.011, 31581.712] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 92.00% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9.207 ops/ms
# Warmup Iteration   2: 9.290 ops/ms
# Warmup Iteration   3: 9.405 ops/ms
Iteration   1: 9.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.399 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.406 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.333 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.376 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.382 ±(99.9%) 0.113 ops/ms [Average]
  (min, avg, max) = (9.333, 9.382, 9.406), stdev = 0.029
  CI (99.9%): [9.269, 9.495] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.005 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.005, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 93.33% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16.186 ops/ms
# Warmup Iteration   2: 16.097 ops/ms
# Warmup Iteration   3: 16.523 ops/ms
Iteration   1: 16.491 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.596 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.590 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.609 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.590 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.575 ±(99.9%) 0.183 ops/ms [Average]
  (min, avg, max) = (16.491, 16.575, 16.609), stdev = 0.047
  CI (99.9%): [16.392, 16.758] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.003, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 94.67% complete, ETA 00:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 18.664 ops/ms
# Warmup Iteration   2: 18.704 ops/ms
# Warmup Iteration   3: 18.479 ops/ms
Iteration   1: 18.471 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.457 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.387 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.395 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.455 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  18.433 ±(99.9%) 0.149 ops/ms [Average]
  (min, avg, max) = (18.387, 18.433, 18.471), stdev = 0.039
  CI (99.9%): [18.283, 18.582] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 128)

# Run progress: 96.00% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 4501.881 ops/ms
# Warmup Iteration   2: 4439.490 ops/ms
# Warmup Iteration   3: 4445.313 ops/ms
Iteration   1: 4450.073 ops/ms
                 ·gc.alloc.rate:                   1755.047 MB/sec
                 ·gc.alloc.rate.norm:              434.266 B/op
                 ·gc.churn.G1_Eden_Space:          1747.581 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     432.418 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   2: 4446.283 ops/ms
                 ·gc.alloc.rate:                   1753.579 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1747.637 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     432.794 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         18.000 ms

Iteration   3: 4459.170 ops/ms
                 ·gc.alloc.rate:                   1758.639 MB/sec
                 ·gc.alloc.rate.norm:              434.266 B/op
                 ·gc.churn.G1_Eden_Space:          1803.983 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     445.462 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   4: 4439.541 ops/ms
                 ·gc.alloc.rate:                   1750.880 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1747.587 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     433.448 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   5: 4412.726 ops/ms
                 ·gc.alloc.rate:                   1740.318 MB/sec
                 ·gc.alloc.rate.norm:              434.264 B/op
                 ·gc.churn.G1_Eden_Space:          1691.226 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     422.014 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4441.559 ±(99.9%) 67.808 ops/ms [Average]
  (min, avg, max) = (4412.726, 4441.559, 4459.170), stdev = 17.610
  CI (99.9%): [4373.751, 4509.367] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1751.693 ±(99.9%) 26.755 MB/sec [Average]
  (min, avg, max) = (1740.318, 1751.693, 1758.639), stdev = 6.948
  CI (99.9%): [1724.937, 1778.448] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  434.265 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (434.264, 434.265, 434.266), stdev = 0.001
  CI (99.9%): [434.263, 434.267] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1747.603 ±(99.9%) 153.508 MB/sec [Average]
  (min, avg, max) = (1691.226, 1747.603, 1803.983), stdev = 39.866
  CI (99.9%): [1594.095, 1901.111] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  433.227 ±(99.9%) 32.004 B/op [Average]
  (min, avg, max) = (422.014, 433.227, 445.462), stdev = 8.311
  CI (99.9%): [401.223, 465.232] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  155.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (30.000, 31.000, 32.000), stdev = 0.707
  CI (99.9%): [155.000, 155.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  88.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 17.600, 18.000), stdev = 0.548
  CI (99.9%): [88.000, 88.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1024)

# Run progress: 97.33% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 4534.518 ops/ms
# Warmup Iteration   2: 4453.264 ops/ms
# Warmup Iteration   3: 4400.570 ops/ms
Iteration   1: 4393.532 ops/ms
                 ·gc.alloc.rate:                   1725.773 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1691.214 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     423.856 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         16.000 ms

Iteration   2: 4417.307 ops/ms
                 ·gc.alloc.rate:                   1735.135 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1747.632 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.632 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         18.000 ms

Iteration   3: 4422.643 ops/ms
                 ·gc.alloc.rate:                   1737.183 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1747.576 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.104 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   4: 4417.168 ops/ms
                 ·gc.alloc.rate:                   1735.029 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1747.575 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     435.644 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         18.000 ms

Iteration   5: 4402.366 ops/ms
                 ·gc.alloc.rate:                   1729.244 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1691.228 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     423.008 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        30.000 counts
                 ·gc.time:                         16.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4410.603 ±(99.9%) 46.855 ops/ms [Average]
  (min, avg, max) = (4393.532, 4410.603, 4422.643), stdev = 12.168
  CI (99.9%): [4363.748, 4457.458] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1732.473 ±(99.9%) 18.380 MB/sec [Average]
  (min, avg, max) = (1725.773, 1732.473, 1737.183), stdev = 4.773
  CI (99.9%): [1714.093, 1750.853] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.517 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.516, 432.517, 432.517), stdev = 0.001
  CI (99.9%): [432.515, 432.518] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1725.045 ±(99.9%) 118.896 MB/sec [Average]
  (min, avg, max) = (1691.214, 1725.045, 1747.632), stdev = 30.877
  CI (99.9%): [1606.149, 1843.941] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  430.649 ±(99.9%) 25.409 B/op [Average]
  (min, avg, max) = (423.008, 430.649, 435.644), stdev = 6.599
  CI (99.9%): [405.240, 456.058] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  153.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (30.000, 30.600, 31.000), stdev = 0.548
  CI (99.9%): [153.000, 153.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  85.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 17.000, 18.000), stdev = 1.000
  CI (99.9%): [85.000, 85.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1048576)

# Run progress: 98.67% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 5106.475 ops/ms
# Warmup Iteration   2: 5011.483 ops/ms
# Warmup Iteration   3: 4976.484 ops/ms
Iteration   1: 4983.541 ops/ms
                 ·gc.alloc.rate:                   1956.541 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1916.695 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     423.495 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        34.000 counts
                 ·gc.time:                         18.000 ms

Iteration   2: 4977.955 ops/ms
                 ·gc.alloc.rate:                   1954.351 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.112 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     436.448 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         20.000 ms

Iteration   3: 4967.803 ops/ms
                 ·gc.alloc.rate:                   1950.360 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.094 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     437.337 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         20.000 ms

Iteration   4: 4983.217 ops/ms
                 ·gc.alloc.rate:                   1956.390 MB/sec
                 ·gc.alloc.rate.norm:              432.297 B/op
                 ·gc.churn.G1_Eden_Space:          1916.697 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     423.527 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        34.000 counts
                 ·gc.time:                         19.000 ms

Iteration   5: 4996.404 ops/ms
                 ·gc.alloc.rate:                   1961.574 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.075 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.833 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         20.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4981.784 ±(99.9%) 39.879 ops/ms [Average]
  (min, avg, max) = (4967.803, 4981.784, 4996.404), stdev = 10.356
  CI (99.9%): [4941.905, 5021.663] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1955.843 ±(99.9%) 15.631 MB/sec [Average]
  (min, avg, max) = (1950.360, 1955.843, 1961.574), stdev = 4.059
  CI (99.9%): [1940.212, 1971.474] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.298 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.297, 432.298, 432.298), stdev = 0.001
  CI (99.9%): [432.297, 432.300] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1950.535 ±(99.9%) 118.947 MB/sec [Average]
  (min, avg, max) = (1916.695, 1950.535, 1973.112), stdev = 30.890
  CI (99.9%): [1831.588, 2069.482] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  431.128 ±(99.9%) 26.998 B/op [Average]
  (min, avg, max) = (423.495, 431.128, 437.337), stdev = 7.011
  CI (99.9%): [404.130, 458.126] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻³ B/op

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  173.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (34.000, 34.600, 35.000), stdev = 0.548
  CI (99.9%): [173.000, 173.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  97.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 19.400, 20.000), stdev = 0.894
  CI (99.9%): [97.000, 97.000] (assumes normal distribution)


# Run complete. Total time: 01:45:19

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (charsetName)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score       Error   Units
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128             128  thrpt    5   2993.235 ±    44.475  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128            1024  thrpt    5   3090.089 ±    15.811  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128         1048576  thrpt    5   2940.854 ±    14.232  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024             128  thrpt    5    388.674 ±     4.677  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024            1024  thrpt    5    409.996 ±     6.491  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024         1048576  thrpt    5    390.974 ±     4.822  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576             128  thrpt    5      0.373 ±     0.004  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576             128  thrpt    5      0.113 ±     0.018    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576            1024  thrpt    5      0.410 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576            1024  thrpt    5      0.106 ±     0.013    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576         1048576  thrpt    5      0.409 ±     0.002  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576         1048576  thrpt    5      0.108 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128             128  thrpt    5   3078.178 ±    61.564  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128            1024  thrpt    5   3299.825 ±    57.503  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128         1048576  thrpt    5   3455.864 ±    45.706  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024             128  thrpt    5    399.999 ±     4.246  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024            1024  thrpt    5    431.668 ±     7.360  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024         1048576  thrpt    5    433.141 ±     0.835  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576             128  thrpt    5      0.390 ±     0.005  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576             128  thrpt    5      0.113 ±     0.002    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576            1024  thrpt    5      0.414 ±     0.007  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576            1024  thrpt    5      0.103 ±     0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576         1048576  thrpt    5      0.377 ±     0.005  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576         1048576  thrpt    5      0.115 ±     0.014    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128             128  thrpt    5   3379.319 ±    28.134  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128            1024  thrpt    5   3351.219 ±    58.562  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128         1048576  thrpt    5   3483.185 ±    37.277  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024             128  thrpt    5    439.132 ±     3.820  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024            1024  thrpt    5    456.561 ±     5.784  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024         1048576  thrpt    5    445.237 ±     2.106  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576             128  thrpt    5      0.434 ±     0.007  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576             128  thrpt    5      0.098 ±     0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576            1024  thrpt    5      0.432 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576            1024  thrpt    5      0.102 ±     0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576         1048576  thrpt    5      0.464 ±     0.006  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576         1048576  thrpt    5      0.089 ±     0.011    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128             128  thrpt    5   9704.833 ±    73.331  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128            1024  thrpt    5  11029.532 ±   117.707  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128         1048576  thrpt    5  13358.335 ±   101.849  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024             128  thrpt    5   1113.968 ±    12.062  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024            1024  thrpt    5   2202.829 ±    20.937  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024         1048576  thrpt    5   2430.290 ±    31.624  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576             128  thrpt    5      1.100 ±     0.012  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576             128  thrpt    5      0.039 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576            1024  thrpt    5      1.129 ±     0.017  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576            1024  thrpt    5      0.038 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576         1048576  thrpt    5      1.523 ±     0.018  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576         1048576  thrpt    5      0.030 ±     0.012    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128             128  thrpt    5  10682.863 ±    74.738  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128            1024  thrpt    5  13629.021 ±   210.890  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128         1048576  thrpt    5  14258.637 ±   335.701  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024             128  thrpt    5   1082.615 ±    11.903  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024            1024  thrpt    5   2644.371 ±    29.608  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024         1048576  thrpt    5   2726.433 ±    27.445  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576             128  thrpt    5      1.072 ±     0.014  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576             128  thrpt    5      0.040 ±     0.005    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576            1024  thrpt    5      1.468 ±     0.023  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576            1024  thrpt    5      0.031 ±     0.015    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576         1048576  thrpt    5      1.712 ±     0.021  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576         1048576  thrpt    5      0.025 ±     0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128             128  thrpt    5   9850.567 ±   118.019  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128            1024  thrpt    5  11774.225 ±   265.205  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128         1048576  thrpt    5  10951.888 ±   145.191  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024             128  thrpt    5   1542.769 ±    24.743  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024            1024  thrpt    5   2340.233 ±    35.443  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024         1048576  thrpt    5   2162.602 ±    39.564  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576             128  thrpt    5      1.581 ±     0.026  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576             128  thrpt    5      0.029 ±     0.013    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576            1024  thrpt    5      2.420 ±     0.049  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576            1024  thrpt    5      0.019 ±     0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576         1048576  thrpt    5      2.001 ±     0.030  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576         1048576  thrpt    5      0.023 ±     0.006    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                             N/A                 128             128  thrpt    5  12863.008 ±    42.534  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128             128  thrpt    5   3177.627 ±    10.548  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128             128  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128             128  thrpt    5   3179.568 ±   119.034  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128             128  thrpt    5    272.175 ±     9.597    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128             128  thrpt    5      0.003 ±     0.001  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128             128  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128             128  thrpt    5    282.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128             128  thrpt    5    155.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128            1024  thrpt    5  12827.900 ±   138.495  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128            1024  thrpt    5   3168.874 ±    34.412  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128            1024  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128            1024  thrpt    5   3168.202 ±    97.129  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128            1024  thrpt    5    271.953 ±     8.063    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128            1024  thrpt    5      0.004 ±     0.003  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128            1024  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128            1024  thrpt    5    281.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128            1024  thrpt    5    155.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128         1048576  thrpt    5  12892.509 ±    46.188  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128         1048576  thrpt    5   3184.850 ±    11.227  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128         1048576  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128         1048576  thrpt    5   3190.775 ±   118.957  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128         1048576  thrpt    5    272.516 ±    10.219    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128         1048576  thrpt    5      0.003 ±     0.003  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128         1048576  thrpt    5    283.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128         1048576  thrpt    5    153.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024             128  thrpt    5   1592.012 ±   224.854  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024             128  thrpt    5   2984.236 ±   421.493  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024             128  thrpt    5   2064.078 ±     0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024             128  thrpt    5   2987.781 ±   509.063  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024             128  thrpt    5   2066.124 ±    90.729    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024             128  thrpt    5      0.004 ±     0.009  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024             128  thrpt    5      0.003 ±     0.006    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024             128  thrpt    5    265.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024             128  thrpt    5    149.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024            1024  thrpt    5   3798.831 ±    31.987  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024            1024  thrpt    5   7121.018 ±    59.472  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024            1024  thrpt    5   2064.053 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024            1024  thrpt    5   7125.172 ±   173.827  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024            1024  thrpt    5   2065.261 ±    50.406    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024            1024  thrpt    5      0.005 ±     0.009  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024            1024  thrpt    5      0.001 ±     0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024            1024  thrpt    5    433.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024            1024  thrpt    5    259.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024         1048576  thrpt    5   3801.778 ±    19.889  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024         1048576  thrpt    5   7126.461 ±    37.275  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024         1048576  thrpt    5   2064.053 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024         1048576  thrpt    5   7125.073 ±   173.374  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024         1048576  thrpt    5   2063.644 ±    43.698    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024         1048576  thrpt    5      0.004 ±     0.008  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024         1048576  thrpt    5      0.001 ±     0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024         1048576  thrpt    5    433.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024         1048576  thrpt    5    261.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576             128  thrpt    5      2.231 ±     0.041  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576             128  thrpt    5     33.235 ±     0.608  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576             128  thrpt    5  16400.734 ±     2.506    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576             128  thrpt    5     33.824 ±   118.896  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576             128  thrpt    5  16667.515 ± 58590.471    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576             128  thrpt    5      0.101 ±     0.870    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576             128  thrpt    5      3.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576             128  thrpt    5      5.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576            1024  thrpt    5      7.024 ±     0.031  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576            1024  thrpt    5    104.622 ±     0.456  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576            1024  thrpt    5  16400.783 ±     1.187    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576            1024  thrpt    5    101.470 ±    97.077  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576            1024  thrpt    5  15909.782 ± 15257.673    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576            1024  thrpt    5      0.069 ±     0.576  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576            1024  thrpt    5     10.789 ±    90.356    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576            1024  thrpt    5      9.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576            1024  thrpt    5     14.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576         1048576  thrpt    5      9.151 ±     0.094  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576         1048576  thrpt    5    136.303 ±     1.396  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576         1048576  thrpt    5  16400.831 ±     1.053    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576         1048576  thrpt    5    146.570 ±   118.894  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576         1048576  thrpt    5  17638.116 ± 14345.630    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576         1048576  thrpt    5      0.072 ±     0.583  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576         1048576  thrpt    5      8.662 ±    70.051    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576         1048576  thrpt    5     13.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576         1048576  thrpt    5     17.000                  ms
ReaderBenchmarks.readHeapBuffer                                               N/A                 128             128  thrpt    5  75169.215 ±   814.494  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128             128  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128            1024  thrpt    5  75262.306 ±   599.834  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128         1048576  thrpt    5  75760.824 ±   917.995  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024             128  thrpt    5   9074.869 ±    85.386  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024            1024  thrpt    5  31467.210 ±   253.368  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024         1048576  thrpt    5  31387.362 ±   194.351  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576             128  thrpt    5      9.382 ±     0.113  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576             128  thrpt    5      0.005 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576            1024  thrpt    5     16.575 ±     0.183  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576            1024  thrpt    5      0.003 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576         1048576  thrpt    5     18.433 ±     0.149  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576         1048576  thrpt    5      0.002 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576         1048576  thrpt    5        ≈ 0              counts
ScannerBenchmarks.scan                                                        N/A                 N/A             128  thrpt    5   4441.559 ±    67.808  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A             128  thrpt    5   1751.693 ±    26.755  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A             128  thrpt    5    434.265 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A             128  thrpt    5   1747.603 ±   153.508  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A             128  thrpt    5    433.227 ±    32.004    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A             128  thrpt    5      0.002 ±     0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A             128  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A             128  thrpt    5    155.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A             128  thrpt    5     88.000                  ms
ScannerBenchmarks.scan                                                        N/A                 N/A            1024  thrpt    5   4410.603 ±    46.855  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A            1024  thrpt    5   1732.473 ±    18.380  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A            1024  thrpt    5    432.517 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A            1024  thrpt    5   1725.045 ±   118.896  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A            1024  thrpt    5    430.649 ±    25.409    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A            1024  thrpt    5      0.002 ±     0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A            1024  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A            1024  thrpt    5    153.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A            1024  thrpt    5     85.000                  ms
ScannerBenchmarks.scan                                                        N/A                 N/A         1048576  thrpt    5   4981.784 ±    39.879  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A         1048576  thrpt    5   1955.843 ±    15.631  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A         1048576  thrpt    5    432.298 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A         1048576  thrpt    5   1950.535 ±   118.947  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A         1048576  thrpt    5    431.128 ±    26.998    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A         1048576  thrpt    5      0.002 ±     0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A         1048576  thrpt    5     ≈ 10⁻³                B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A         1048576  thrpt    5    173.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A         1048576  thrpt    5     97.000                  ms

Benchmark result is saved to jmh-result.csv
