# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 3019.623 ops/ms
# Warmup Iteration   2: 3038.282 ops/ms
# Warmup Iteration   3: 3015.243 ops/ms
Iteration   1: 3011.903 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3016.629 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3016.454 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3010.546 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3015.661 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3014.239 ±(99.9%) 10.846 ops/ms [Average]
  (min, avg, max) = (3010.546, 3014.239, 3016.629), stdev = 2.817
  CI (99.9%): [3003.393, 3025.085] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 1.33% complete, ETA 01:43:57
# Fork: 1 of 1
# Warmup Iteration   1: 3123.311 ops/ms
# Warmup Iteration   2: 3130.766 ops/ms
# Warmup Iteration   3: 3123.799 ops/ms
Iteration   1: 3123.511 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3123.447 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3125.086 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3124.291 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3124.331 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3124.133 ±(99.9%) 2.603 ops/ms [Average]
  (min, avg, max) = (3123.447, 3124.133, 3125.086), stdev = 0.676
  CI (99.9%): [3121.530, 3126.737] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 2.67% complete, ETA 01:42:32
# Fork: 1 of 1
# Warmup Iteration   1: 3107.043 ops/ms
# Warmup Iteration   2: 3108.121 ops/ms
# Warmup Iteration   3: 3113.399 ops/ms
Iteration   1: 3115.166 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3115.269 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3115.841 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3115.601 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3113.644 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3115.104 ±(99.9%) 3.308 ops/ms [Average]
  (min, avg, max) = (3113.644, 3115.104, 3115.841), stdev = 0.859
  CI (99.9%): [3111.797, 3118.412] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 4.00% complete, ETA 01:41:08
# Fork: 1 of 1
# Warmup Iteration   1: 386.044 ops/ms
# Warmup Iteration   2: 386.961 ops/ms
# Warmup Iteration   3: 387.809 ops/ms
Iteration   1: 388.165 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 388.224 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 388.301 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 388.282 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 388.246 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  388.244 ±(99.9%) 0.205 ops/ms [Average]
  (min, avg, max) = (388.165, 388.244, 388.301), stdev = 0.053
  CI (99.9%): [388.038, 388.449] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 5.33% complete, ETA 01:39:43
# Fork: 1 of 1
# Warmup Iteration   1: 410.320 ops/ms
# Warmup Iteration   2: 412.211 ops/ms
# Warmup Iteration   3: 412.226 ops/ms
Iteration   1: 412.877 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 413.058 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 413.021 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 412.892 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 413.028 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  412.975 ±(99.9%) 0.324 ops/ms [Average]
  (min, avg, max) = (412.877, 412.975, 413.058), stdev = 0.084
  CI (99.9%): [412.652, 413.299] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 6.67% complete, ETA 01:38:19
# Fork: 1 of 1
# Warmup Iteration   1: 417.260 ops/ms
# Warmup Iteration   2: 418.058 ops/ms
# Warmup Iteration   3: 418.267 ops/ms
Iteration   1: 418.064 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 418.405 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 418.390 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 418.111 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 418.308 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  418.256 ±(99.9%) 0.611 ops/ms [Average]
  (min, avg, max) = (418.064, 418.256, 418.405), stdev = 0.159
  CI (99.9%): [417.645, 418.867] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 8.00% complete, ETA 01:36:54
# Fork: 1 of 1
# Warmup Iteration   1: 0.382 ops/ms
# Warmup Iteration   2: 0.384 ops/ms
# Warmup Iteration   3: 0.383 ops/ms
Iteration   1: 0.383 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.106 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.384 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.383, 0.384, 0.384), stdev = 0.001
  CI (99.9%): [0.383, 0.384] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.108 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (0.106, 0.108, 0.115), stdev = 0.004
  CI (99.9%): [0.094, 0.122] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 9.33% complete, ETA 01:35:30
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 ops/ms
# Warmup Iteration   2: 0.418 ops/ms
# Warmup Iteration   3: 0.418 ops/ms
Iteration   1: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.113 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.418 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.418, 0.418, 0.418), stdev = 0.001
  CI (99.9%): [0.417, 0.418] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.105 ±(99.9%) 0.021 B/op [Average]
  (min, avg, max) = (0.098, 0.105, 0.113), stdev = 0.005
  CI (99.9%): [0.084, 0.126] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 10.67% complete, ETA 01:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.382 ops/ms
# Warmup Iteration   2: 0.373 ops/ms
# Warmup Iteration   3: 0.373 ops/ms
Iteration   1: 0.374 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.110 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.373 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.373, 0.373, 0.374), stdev = 0.001
  CI (99.9%): [0.372, 0.375] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.111 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.109, 0.111, 0.118), stdev = 0.004
  CI (99.9%): [0.096, 0.126] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 12.00% complete, ETA 01:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 3133.826 ops/ms
# Warmup Iteration   2: 3138.396 ops/ms
# Warmup Iteration   3: 3122.824 ops/ms
Iteration   1: 3131.155 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3131.195 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3130.198 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3133.003 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3131.983 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3131.507 ±(99.9%) 4.038 ops/ms [Average]
  (min, avg, max) = (3130.198, 3131.507, 3133.003), stdev = 1.049
  CI (99.9%): [3127.468, 3135.545] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 13.33% complete, ETA 01:31:17
# Fork: 1 of 1
# Warmup Iteration   1: 3264.444 ops/ms
# Warmup Iteration   2: 3277.347 ops/ms
# Warmup Iteration   3: 3295.318 ops/ms
Iteration   1: 3295.222 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3296.408 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3285.370 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3293.066 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3295.906 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3293.194 ±(99.9%) 17.544 ops/ms [Average]
  (min, avg, max) = (3285.370, 3293.194, 3296.408), stdev = 4.556
  CI (99.9%): [3275.651, 3310.738] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 14.67% complete, ETA 01:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 3426.836 ops/ms
# Warmup Iteration   2: 3433.366 ops/ms
# Warmup Iteration   3: 3436.472 ops/ms
Iteration   1: 3431.576 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3438.143 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3438.761 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3437.615 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3438.260 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3436.871 ±(99.9%) 11.504 ops/ms [Average]
  (min, avg, max) = (3431.576, 3436.871, 3438.761), stdev = 2.988
  CI (99.9%): [3425.367, 3448.375] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 16.00% complete, ETA 01:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 400.535 ops/ms
# Warmup Iteration   2: 401.375 ops/ms
# Warmup Iteration   3: 401.818 ops/ms
Iteration   1: 401.817 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 401.949 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 402.015 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 401.612 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 401.315 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  401.742 ±(99.9%) 1.094 ops/ms [Average]
  (min, avg, max) = (401.315, 401.742, 402.015), stdev = 0.284
  CI (99.9%): [400.648, 402.836] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 17.33% complete, ETA 01:27:04
# Fork: 1 of 1
# Warmup Iteration   1: 432.892 ops/ms
# Warmup Iteration   2: 352.579 ops/ms
# Warmup Iteration   3: 433.882 ops/ms
Iteration   1: 433.817 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 433.925 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 434.114 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 434.289 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 434.198 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  434.069 ±(99.9%) 0.749 ops/ms [Average]
  (min, avg, max) = (433.817, 434.069, 434.289), stdev = 0.195
  CI (99.9%): [433.319, 434.818] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 18.67% complete, ETA 01:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 425.323 ops/ms
# Warmup Iteration   2: 425.794 ops/ms
# Warmup Iteration   3: 424.999 ops/ms
Iteration   1: 425.104 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 425.744 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 425.562 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 425.593 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 425.805 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  425.562 ±(99.9%) 1.059 ops/ms [Average]
  (min, avg, max) = (425.104, 425.562, 425.805), stdev = 0.275
  CI (99.9%): [424.503, 426.621] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 20.00% complete, ETA 01:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.396 ops/ms
# Warmup Iteration   2: 0.398 ops/ms
# Warmup Iteration   3: 0.398 ops/ms
Iteration   1: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.119 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.398 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.398, 0.398, 0.398), stdev = 0.001
  CI (99.9%): [0.397, 0.398] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.107 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (0.103, 0.107, 0.119), stdev = 0.007
  CI (99.9%): [0.080, 0.135] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 21.33% complete, ETA 01:22:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.422 ops/ms
# Warmup Iteration   2: 0.422 ops/ms
# Warmup Iteration   3: 0.422 ops/ms
Iteration   1: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.421 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.421, 0.421, 0.422), stdev = 0.001
  CI (99.9%): [0.421, 0.422] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.101 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.097, 0.101, 0.104), stdev = 0.004
  CI (99.9%): [0.085, 0.117] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 22.67% complete, ETA 01:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.392 ops/ms
# Warmup Iteration   2: 0.383 ops/ms
# Warmup Iteration   3: 0.384 ops/ms
Iteration   1: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.384 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.115 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.384 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.384, 0.384, 0.384), stdev = 0.001
  CI (99.9%): [0.383, 0.385] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.115 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.115, 0.115, 0.115), stdev = 0.001
  CI (99.9%): [0.114, 0.115] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 24.00% complete, ETA 01:20:02
# Fork: 1 of 1
# Warmup Iteration   1: 3432.746 ops/ms
# Warmup Iteration   2: 3437.433 ops/ms
# Warmup Iteration   3: 3435.582 ops/ms
Iteration   1: 3436.519 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3437.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3440.490 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3438.320 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3439.556 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3438.487 ±(99.9%) 6.069 ops/ms [Average]
  (min, avg, max) = (3436.519, 3438.487, 3440.490), stdev = 1.576
  CI (99.9%): [3432.418, 3444.555] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 25.33% complete, ETA 01:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 3383.950 ops/ms
# Warmup Iteration   2: 3390.600 ops/ms
# Warmup Iteration   3: 3415.895 ops/ms
Iteration   1: 3411.647 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3414.065 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3413.379 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3417.437 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3417.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3414.724 ±(99.9%) 9.565 ops/ms [Average]
  (min, avg, max) = (3411.647, 3414.724, 3417.437), stdev = 2.484
  CI (99.9%): [3405.159, 3424.289] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 26.67% complete, ETA 01:17:14
# Fork: 1 of 1
# Warmup Iteration   1: 3407.954 ops/ms
# Warmup Iteration   2: 3442.987 ops/ms
# Warmup Iteration   3: 3459.643 ops/ms
Iteration   1: 3458.929 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3459.709 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3452.966 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3460.494 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3466.157 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3459.651 ±(99.9%) 18.087 ops/ms [Average]
  (min, avg, max) = (3452.966, 3459.651, 3466.157), stdev = 4.697
  CI (99.9%): [3441.564, 3477.738] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 28.00% complete, ETA 01:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 443.894 ops/ms
# Warmup Iteration   2: 445.024 ops/ms
# Warmup Iteration   3: 445.109 ops/ms
Iteration   1: 444.974 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 445.629 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 445.502 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 445.500 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 445.553 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  445.432 ±(99.9%) 1.004 ops/ms [Average]
  (min, avg, max) = (444.974, 445.432, 445.629), stdev = 0.261
  CI (99.9%): [444.427, 446.436] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 29.33% complete, ETA 01:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 458.900 ops/ms
# Warmup Iteration   2: 459.439 ops/ms
# Warmup Iteration   3: 461.553 ops/ms
Iteration   1: 461.292 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 461.211 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 461.081 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 459.948 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 460.255 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  460.757 ±(99.9%) 2.360 ops/ms [Average]
  (min, avg, max) = (459.948, 460.757, 461.292), stdev = 0.613
  CI (99.9%): [458.397, 463.117] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 30.67% complete, ETA 01:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 449.931 ops/ms
# Warmup Iteration   2: 447.495 ops/ms
# Warmup Iteration   3: 453.924 ops/ms
Iteration   1: 454.043 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 453.317 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 453.966 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 453.988 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 454.000 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  453.863 ±(99.9%) 1.180 ops/ms [Average]
  (min, avg, max) = (453.317, 453.863, 454.043), stdev = 0.306
  CI (99.9%): [452.683, 455.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 32.00% complete, ETA 01:11:37
# Fork: 1 of 1
# Warmup Iteration   1: 0.434 ops/ms
# Warmup Iteration   2: 0.435 ops/ms
# Warmup Iteration   3: 0.434 ops/ms
Iteration   1: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.436 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.436 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.094 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.435 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.435 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.435, 0.435, 0.436), stdev = 0.001
  CI (99.9%): [0.435, 0.436] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.095 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.094, 0.095, 0.101), stdev = 0.003
  CI (99.9%): [0.082, 0.108] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 33.33% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.438 ops/ms
# Warmup Iteration   2: 0.439 ops/ms
# Warmup Iteration   3: 0.439 ops/ms
Iteration   1: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.438 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.438 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.439 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (0.438, 0.439, 0.439), stdev = 0.001
  CI (99.9%): [0.437, 0.441] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.100 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.100, 0.100, 0.100), stdev = 0.001
  CI (99.9%): [0.100, 0.101] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 34.67% complete, ETA 01:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.471 ops/ms
# Warmup Iteration   2: 0.472 ops/ms
# Warmup Iteration   3: 0.472 ops/ms
Iteration   1: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.472 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.472, 0.472, 0.472), stdev = 0.001
  CI (99.9%): [0.471, 0.473] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.090 ±(99.9%) 0.014 B/op [Average]
  (min, avg, max) = (0.086, 0.090, 0.093), stdev = 0.004
  CI (99.9%): [0.076, 0.105] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 36.00% complete, ETA 01:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 9747.559 ops/ms
# Warmup Iteration   2: 9880.714 ops/ms
# Warmup Iteration   3: 9914.395 ops/ms
Iteration   1: 9901.353 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9905.631 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9897.222 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9895.747 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9910.399 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9902.070 ±(99.9%) 23.267 ops/ms [Average]
  (min, avg, max) = (9895.747, 9902.070, 9910.399), stdev = 6.042
  CI (99.9%): [9878.803, 9925.338] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 37.33% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 12749.439 ops/ms
# Warmup Iteration   2: 11176.824 ops/ms
# Warmup Iteration   3: 11405.758 ops/ms
Iteration   1: 11407.530 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11399.842 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11412.748 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11412.246 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11406.532 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11407.779 ±(99.9%) 20.125 ops/ms [Average]
  (min, avg, max) = (11399.842, 11407.779, 11412.748), stdev = 5.226
  CI (99.9%): [11387.654, 11427.905] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 38.67% complete, ETA 01:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 12458.075 ops/ms
# Warmup Iteration   2: 12510.470 ops/ms
# Warmup Iteration   3: 12732.915 ops/ms
Iteration   1: 12733.203 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12736.668 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12751.740 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12772.613 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12687.789 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12736.403 ±(99.9%) 120.544 ops/ms [Average]
  (min, avg, max) = (12687.789, 12736.403, 12772.613), stdev = 31.305
  CI (99.9%): [12615.859, 12856.946] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 40.00% complete, ETA 01:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 1145.870 ops/ms
# Warmup Iteration   2: 1147.815 ops/ms
# Warmup Iteration   3: 1149.020 ops/ms
Iteration   1: 1149.080 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1148.522 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1148.124 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1148.919 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1148.064 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1148.542 ±(99.9%) 1.759 ops/ms [Average]
  (min, avg, max) = (1148.064, 1148.542, 1149.080), stdev = 0.457
  CI (99.9%): [1146.783, 1150.301] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 41.33% complete, ETA 01:01:47
# Fork: 1 of 1
# Warmup Iteration   1: 2156.054 ops/ms
# Warmup Iteration   2: 2161.667 ops/ms
# Warmup Iteration   3: 2168.561 ops/ms
Iteration   1: 2164.938 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2168.358 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2168.065 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2168.543 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2167.593 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2167.499 ±(99.9%) 5.684 ops/ms [Average]
  (min, avg, max) = (2164.938, 2167.499, 2168.543), stdev = 1.476
  CI (99.9%): [2161.816, 2173.183] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 42.67% complete, ETA 01:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 2204.438 ops/ms
# Warmup Iteration   2: 2212.543 ops/ms
# Warmup Iteration   3: 2215.836 ops/ms
Iteration   1: 2215.490 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2215.665 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2216.358 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2216.684 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2217.056 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2216.250 ±(99.9%) 2.560 ops/ms [Average]
  (min, avg, max) = (2215.490, 2216.250, 2217.056), stdev = 0.665
  CI (99.9%): [2213.690, 2218.811] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 44.00% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.916 ops/ms
# Warmup Iteration   2: 0.921 ops/ms
# Warmup Iteration   3: 0.922 ops/ms
Iteration   1: 0.920 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  0.923 ±(99.9%) 0.005 ops/ms [Average]
  (min, avg, max) = (0.920, 0.923, 0.924), stdev = 0.001
  CI (99.9%): [0.917, 0.928] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.046 ±(99.9%) 0.007 B/op [Average]
  (min, avg, max) = (0.044, 0.046, 0.048), stdev = 0.002
  CI (99.9%): [0.038, 0.053] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 45.33% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.506 ops/ms
# Warmup Iteration   2: 1.506 ops/ms
# Warmup Iteration   3: 1.506 ops/ms
Iteration   1: 1.507 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.507 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.507 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.507 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.038 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.505 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.507 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (1.505, 1.507, 1.507), stdev = 0.001
  CI (99.9%): [1.503, 1.511] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (0.027, 0.030, 0.038), stdev = 0.005
  CI (99.9%): [0.012, 0.048] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 46.67% complete, ETA 00:56:10
# Fork: 1 of 1
# Warmup Iteration   1: 1.553 ops/ms
# Warmup Iteration   2: 1.559 ops/ms
# Warmup Iteration   3: 1.559 ops/ms
Iteration   1: 1.559 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.559 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.558 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.559 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.560 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.559 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.558, 1.559, 1.560), stdev = 0.001
  CI (99.9%): [1.556, 1.562] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.028 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.026, 0.028, 0.033), stdev = 0.003
  CI (99.9%): [0.017, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 48.00% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 10936.836 ops/ms
# Warmup Iteration   2: 10878.207 ops/ms
# Warmup Iteration   3: 10893.528 ops/ms
Iteration   1: 10886.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10896.009 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10896.564 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10894.416 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10895.269 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10893.656 ±(99.9%) 16.728 ops/ms [Average]
  (min, avg, max) = (10886.019, 10893.656, 10896.564), stdev = 4.344
  CI (99.9%): [10876.927, 10910.384] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 49.33% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 14196.681 ops/ms
# Warmup Iteration   2: 13646.514 ops/ms
# Warmup Iteration   3: 13759.865 ops/ms
Iteration   1: 13768.695 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13762.983 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13766.887 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13747.404 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13756.828 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13760.559 ±(99.9%) 33.297 ops/ms [Average]
  (min, avg, max) = (13747.404, 13760.559, 13768.695), stdev = 8.647
  CI (99.9%): [13727.263, 13793.856] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 50.67% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 14791.118 ops/ms
# Warmup Iteration   2: 15227.419 ops/ms
# Warmup Iteration   3: 15171.858 ops/ms
Iteration   1: 15169.583 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 15154.787 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 15172.565 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 15177.642 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 15193.484 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  15173.612 ±(99.9%) 53.869 ops/ms [Average]
  (min, avg, max) = (15154.787, 15173.612, 15193.484), stdev = 13.990
  CI (99.9%): [15119.744, 15227.481] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 52.00% complete, ETA 00:50:33
# Fork: 1 of 1
# Warmup Iteration   1: 1116.162 ops/ms
# Warmup Iteration   2: 1116.910 ops/ms
# Warmup Iteration   3: 1118.994 ops/ms
Iteration   1: 1119.118 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1119.319 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1119.019 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1119.855 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1118.170 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1119.096 ±(99.9%) 2.350 ops/ms [Average]
  (min, avg, max) = (1118.170, 1119.096, 1119.855), stdev = 0.610
  CI (99.9%): [1116.746, 1121.446] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 53.33% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 2686.510 ops/ms
# Warmup Iteration   2: 2682.984 ops/ms
# Warmup Iteration   3: 2683.049 ops/ms
Iteration   1: 2683.130 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2683.296 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2679.458 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2683.590 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2683.518 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2682.598 ±(99.9%) 6.795 ops/ms [Average]
  (min, avg, max) = (2679.458, 2682.598, 2683.590), stdev = 1.765
  CI (99.9%): [2675.803, 2689.393] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 54.67% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 2994.674 ops/ms
# Warmup Iteration   2: 2802.855 ops/ms
# Warmup Iteration   3: 2808.405 ops/ms
Iteration   1: 2809.647 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2811.760 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2811.800 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2811.567 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2812.378 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2811.430 ±(99.9%) 4.012 ops/ms [Average]
  (min, avg, max) = (2809.647, 2811.430, 2812.378), stdev = 1.042
  CI (99.9%): [2807.418, 2815.443] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 56.00% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.101 ops/ms
# Warmup Iteration   2: 1.104 ops/ms
# Warmup Iteration   3: 1.105 ops/ms
Iteration   1: 1.105 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.105 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.106 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.104 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.103 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.105 ±(99.9%) 0.004 ops/ms [Average]
  (min, avg, max) = (1.103, 1.105, 1.106), stdev = 0.001
  CI (99.9%): [1.101, 1.109] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.040 ±(99.9%) 0.009 B/op [Average]
  (min, avg, max) = (0.037, 0.040, 0.043), stdev = 0.002
  CI (99.9%): [0.031, 0.050] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 57.33% complete, ETA 00:44:56
# Fork: 1 of 1
# Warmup Iteration   1: 1.496 ops/ms
# Warmup Iteration   2: 1.501 ops/ms
# Warmup Iteration   3: 1.501 ops/ms
Iteration   1: 1.500 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.498 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.499 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.498 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.499 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.499 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (1.498, 1.499, 1.500), stdev = 0.001
  CI (99.9%): [1.495, 1.502] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.027, 0.030, 0.036), stdev = 0.003
  CI (99.9%): [0.017, 0.044] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 58.67% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.408 ops/ms
# Warmup Iteration   2: 1.406 ops/ms
# Warmup Iteration   3: 1.406 ops/ms
Iteration   1: 1.406 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.406 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.406 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.407 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.405 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.039 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.406 ±(99.9%) 0.002 ops/ms [Average]
  (min, avg, max) = (1.405, 1.406, 1.407), stdev = 0.001
  CI (99.9%): [1.404, 1.409] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.032 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.029, 0.032, 0.039), stdev = 0.004
  CI (99.9%): [0.016, 0.047] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 60.00% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 10005.656 ops/ms
# Warmup Iteration   2: 10033.994 ops/ms
# Warmup Iteration   3: 10182.102 ops/ms
Iteration   1: 10180.102 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10183.782 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10172.280 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10186.847 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10186.455 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10181.893 ±(99.9%) 23.147 ops/ms [Average]
  (min, avg, max) = (10172.280, 10181.893, 10186.847), stdev = 6.011
  CI (99.9%): [10158.746, 10205.040] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 61.33% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 11621.914 ops/ms
# Warmup Iteration   2: 11820.417 ops/ms
# Warmup Iteration   3: 11965.773 ops/ms
Iteration   1: 11972.702 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11975.342 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11978.043 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11972.726 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11980.622 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11975.887 ±(99.9%) 13.270 ops/ms [Average]
  (min, avg, max) = (11972.702, 11975.887, 11980.622), stdev = 3.446
  CI (99.9%): [11962.617, 11989.157] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 62.67% complete, ETA 00:39:19
# Fork: 1 of 1
# Warmup Iteration   1: 10866.195 ops/ms
# Warmup Iteration   2: 10248.502 ops/ms
# Warmup Iteration   3: 10795.559 ops/ms
Iteration   1: 10792.548 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10800.252 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10798.662 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10781.716 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10805.429 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10795.721 ±(99.9%) 34.956 ops/ms [Average]
  (min, avg, max) = (10781.716, 10795.721, 10805.429), stdev = 9.078
  CI (99.9%): [10760.765, 10830.677] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 64.00% complete, ETA 00:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 1568.716 ops/ms
# Warmup Iteration   2: 1570.772 ops/ms
# Warmup Iteration   3: 1571.192 ops/ms
Iteration   1: 1570.479 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1572.781 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1572.232 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1570.465 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1570.708 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1571.333 ±(99.9%) 4.209 ops/ms [Average]
  (min, avg, max) = (1570.465, 1571.333, 1572.781), stdev = 1.093
  CI (99.9%): [1567.124, 1575.541] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 65.33% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 2406.434 ops/ms
# Warmup Iteration   2: 2393.443 ops/ms
# Warmup Iteration   3: 2409.534 ops/ms
Iteration   1: 2410.532 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2410.589 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2407.891 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2408.682 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2408.089 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2409.157 ±(99.9%) 5.061 ops/ms [Average]
  (min, avg, max) = (2407.891, 2409.157, 2410.589), stdev = 1.314
  CI (99.9%): [2404.096, 2414.217] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 66.67% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 2192.560 ops/ms
# Warmup Iteration   2: 2201.163 ops/ms
# Warmup Iteration   3: 2208.057 ops/ms
Iteration   1: 2207.655 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2207.569 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2204.805 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2205.220 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2207.152 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2206.480 ±(99.9%) 5.242 ops/ms [Average]
  (min, avg, max) = (2204.805, 2206.480, 2207.655), stdev = 1.361
  CI (99.9%): [2201.238, 2211.722] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 68.00% complete, ETA 00:33:42
# Fork: 1 of 1
# Warmup Iteration   1: 1.608 ops/ms
# Warmup Iteration   2: 1.613 ops/ms
# Warmup Iteration   3: 1.611 ops/ms
Iteration   1: 1.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.613 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.610 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.611 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.609 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.611 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.609, 1.611, 1.613), stdev = 0.001
  CI (99.9%): [1.605, 1.616] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.027 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (0.025, 0.027, 0.032), stdev = 0.003
  CI (99.9%): [0.017, 0.038] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 69.33% complete, ETA 00:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 2.462 ops/ms
# Warmup Iteration   2: 2.470 ops/ms
# Warmup Iteration   3: 2.472 ops/ms
Iteration   1: 2.473 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.475 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.473 ±(99.9%) 0.005 ops/ms [Average]
  (min, avg, max) = (2.472, 2.473, 2.475), stdev = 0.001
  CI (99.9%): [2.468, 2.478] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.018 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (0.017, 0.018, 0.022), stdev = 0.002
  CI (99.9%): [0.010, 0.026] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 70.67% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.035 ops/ms
# Warmup Iteration   2: 2.039 ops/ms
# Warmup Iteration   3: 2.038 ops/ms
Iteration   1: 2.039 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.041 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.041 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.043 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.042 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.041 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (2.039, 2.041, 2.043), stdev = 0.002
  CI (99.9%): [2.035, 2.047] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.023 ±(99.9%) 0.012 B/op [Average]
  (min, avg, max) = (0.020, 0.023, 0.028), stdev = 0.003
  CI (99.9%): [0.010, 0.035] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 72.00% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 24750.641 ops/ms
# Warmup Iteration   2: 25721.679 ops/ms
# Warmup Iteration   3: 25992.368 ops/ms
Iteration   1: 26052.047 ops/ms
                 ·gc.alloc.rate:                   6435.627 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.596 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.175 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         41.000 ms

Iteration   2: 25961.722 ops/ms
                 ·gc.alloc.rate:                   6413.271 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.612 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.124 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         42.000 ms

Iteration   3: 26036.147 ops/ms
                 ·gc.alloc.rate:                   6431.666 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.583 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.342 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         41.000 ms

Iteration   4: 26004.304 ops/ms
                 ·gc.alloc.rate:                   6423.802 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.582 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.675 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         46.000 ms

Iteration   5: 26042.520 ops/ms
                 ·gc.alloc.rate:                   6433.223 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.565 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.275 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         45.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  26019.348 ±(99.9%) 141.946 ops/ms [Average]
  (min, avg, max) = (25961.722, 26019.348, 26052.047), stdev = 36.863
  CI (99.9%): [25877.402, 26161.294] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6427.518 ±(99.9%) 35.097 MB/sec [Average]
  (min, avg, max) = (6413.271, 6427.518, 6435.627), stdev = 9.114
  CI (99.9%): [6392.421, 6462.614] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.007 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.007, 272.007, 272.007), stdev = 0.001
  CI (99.9%): [272.007, 272.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6439.588 ±(99.9%) 0.067 MB/sec [Average]
  (min, avg, max) = (6439.565, 6439.588, 6439.612), stdev = 0.017
  CI (99.9%): [6439.520, 6439.655] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.518 ±(99.9%) 1.491 B/op [Average]
  (min, avg, max) = (272.175, 272.518, 273.124), stdev = 0.387
  CI (99.9%): [271.027, 274.010] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  395.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (79.000, 79.000, 79.000), stdev = 0.001
  CI (99.9%): [395.000, 395.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  215.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (41.000, 43.000, 46.000), stdev = 2.345
  CI (99.9%): [215.000, 215.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 73.33% complete, ETA 00:28:05
# Fork: 1 of 1
# Warmup Iteration   1: 24770.900 ops/ms
# Warmup Iteration   2: 25787.712 ops/ms
# Warmup Iteration   3: 26048.846 ops/ms
Iteration   1: 26219.411 ops/ms
                 ·gc.alloc.rate:                   6476.958 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.611 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.439 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         40.000 ms

Iteration   2: 26134.576 ops/ms
                 ·gc.alloc.rate:                   6456.113 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6521.311 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.754 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        80.000 counts
                 ·gc.time:                         45.000 ms

Iteration   3: 26059.578 ops/ms
                 ·gc.alloc.rate:                   6437.506 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.655 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.098 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         40.000 ms

Iteration   4: 26218.695 ops/ms
                 ·gc.alloc.rate:                   6476.736 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.560 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.446 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         42.000 ms

Iteration   5: 26190.297 ops/ms
                 ·gc.alloc.rate:                   6469.705 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6439.544 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.739 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         41.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  26164.511 ±(99.9%) 262.026 ops/ms [Average]
  (min, avg, max) = (26059.578, 26164.511, 26219.411), stdev = 68.047
  CI (99.9%): [25902.485, 26426.538] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6463.404 ±(99.9%) 64.578 MB/sec [Average]
  (min, avg, max) = (6437.506, 6463.404, 6476.958), stdev = 16.771
  CI (99.9%): [6398.826, 6527.982] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.007 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.007, 272.007, 272.007), stdev = 0.001
  CI (99.9%): [272.007, 272.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6455.936 ±(99.9%) 140.725 MB/sec [Average]
  (min, avg, max) = (6439.544, 6455.936, 6521.311), stdev = 36.546
  CI (99.9%): [6315.212, 6596.661] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.695 ±(99.9%) 7.093 B/op [Average]
  (min, avg, max) = (270.439, 271.695, 274.754), stdev = 1.842
  CI (99.9%): [264.602, 278.788] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  396.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (79.000, 79.200, 80.000), stdev = 0.447
  CI (99.9%): [396.000, 396.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  208.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (40.000, 41.600, 45.000), stdev = 2.074
  CI (99.9%): [208.000, 208.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 74.67% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 24809.980 ops/ms
# Warmup Iteration   2: 25515.130 ops/ms
# Warmup Iteration   3: 26064.837 ops/ms
Iteration   1: 26138.778 ops/ms
                 ·gc.alloc.rate:                   6457.039 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6476.911 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.844 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         44.000 ms

Iteration   2: 26125.971 ops/ms
                 ·gc.alloc.rate:                   6453.905 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6477.007 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.981 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         48.000 ms

Iteration   3: 26170.354 ops/ms
                 ·gc.alloc.rate:                   6464.801 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6393.858 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     269.022 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        77.000 counts
                 ·gc.time:                         42.000 ms

Iteration   4: 26151.107 ops/ms
                 ·gc.alloc.rate:                   6460.066 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6476.911 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     272.716 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         39.000 ms

Iteration   5: 26123.172 ops/ms
                 ·gc.alloc.rate:                   6453.127 MB/sec
                 ·gc.alloc.rate.norm:              272.007 B/op
                 ·gc.churn.G1_Eden_Space:          6476.891 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.009 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         42.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  26141.877 ±(99.9%) 74.781 ops/ms [Average]
  (min, avg, max) = (26123.172, 26141.877, 26170.354), stdev = 19.420
  CI (99.9%): [26067.095, 26216.658] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6457.788 ±(99.9%) 18.440 MB/sec [Average]
  (min, avg, max) = (6453.127, 6457.788, 6464.801), stdev = 4.789
  CI (99.9%): [6439.347, 6476.228] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.007 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.007, 272.007, 272.007), stdev = 0.001
  CI (99.9%): [272.007, 272.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6460.316 ±(99.9%) 143.055 MB/sec [Average]
  (min, avg, max) = (6393.858, 6460.316, 6477.007), stdev = 37.151
  CI (99.9%): [6317.261, 6603.370] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.114 ±(99.9%) 6.672 B/op [Average]
  (min, avg, max) = (269.022, 272.114, 273.009), stdev = 1.733
  CI (99.9%): [265.442, 278.786] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  389.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (77.000, 77.800, 78.000), stdev = 0.447
  CI (99.9%): [389.000, 389.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  215.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (39.000, 43.000, 48.000), stdev = 3.317
  CI (99.9%): [215.000, 215.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 76.00% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 4000.430 ops/ms
# Warmup Iteration   2: 4016.246 ops/ms
# Warmup Iteration   3: 4338.496 ops/ms
Iteration   1: 4342.812 ops/ms
                 ·gc.alloc.rate:                   8140.657 MB/sec
                 ·gc.alloc.rate.norm:              2064.042 B/op
                 ·gc.churn.G1_Eden_Space:          8140.737 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2064.063 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         48.000 ms

Iteration   2: 4363.776 ops/ms
                 ·gc.alloc.rate:                   8180.051 MB/sec
                 ·gc.alloc.rate.norm:              2064.042 B/op
                 ·gc.churn.G1_Eden_Space:          8245.294 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2080.505 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         49.000 ms

Iteration   3: 4373.723 ops/ms
                 ·gc.alloc.rate:                   8198.487 MB/sec
                 ·gc.alloc.rate.norm:              2064.041 B/op
                 ·gc.churn.G1_Eden_Space:          8140.647 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2049.479 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         50.000 ms

Iteration   4: 4339.552 ops/ms
                 ·gc.alloc.rate:                   8134.389 MB/sec
                 ·gc.alloc.rate.norm:              2064.041 B/op
                 ·gc.churn.G1_Eden_Space:          8140.589 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2065.615 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        78.000 counts
                 ·gc.time:                         50.000 ms

Iteration   5: 4352.385 ops/ms
                 ·gc.alloc.rate:                   8158.503 MB/sec
                 ·gc.alloc.rate.norm:              2064.042 B/op
                 ·gc.churn.G1_Eden_Space:          8245.054 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2085.939 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        79.000 counts
                 ·gc.time:                         51.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  4354.450 ±(99.9%) 55.137 ops/ms [Average]
  (min, avg, max) = (4339.552, 4354.450, 4373.723), stdev = 14.319
  CI (99.9%): [4299.313, 4409.586] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  8162.417 ±(99.9%) 103.439 MB/sec [Average]
  (min, avg, max) = (8134.389, 8162.417, 8198.487), stdev = 26.863
  CI (99.9%): [8058.979, 8265.856] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.042 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (2064.041, 2064.042, 2064.042), stdev = 0.001
  CI (99.9%): [2064.040, 2064.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  8182.465 ±(99.9%) 220.434 MB/sec [Average]
  (min, avg, max) = (8140.589, 8182.465, 8245.294), stdev = 57.246
  CI (99.9%): [7962.030, 8402.899] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2069.120 ±(99.9%) 55.671 B/op [Average]
  (min, avg, max) = (2049.479, 2069.120, 2085.939), stdev = 14.458
  CI (99.9%): [2013.449, 2124.791] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.005 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  392.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (78.000, 78.400, 79.000), stdev = 0.548
  CI (99.9%): [392.000, 392.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  248.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (48.000, 49.600, 51.000), stdev = 1.140
  CI (99.9%): [248.000, 248.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 77.33% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 5253.434 ops/ms
# Warmup Iteration   2: 5477.740 ops/ms
# Warmup Iteration   3: 5628.450 ops/ms
Iteration   1: 5621.576 ops/ms
                 ·gc.alloc.rate:                   10537.643 MB/sec
                 ·gc.alloc.rate.norm:              2064.039 B/op
                 ·gc.churn.G1_Eden_Space:          10556.360 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2067.705 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         60.000 ms

Iteration   2: 5619.797 ops/ms
                 ·gc.alloc.rate:                   10534.329 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10442.980 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2046.139 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        92.000 counts
                 ·gc.time:                         55.000 ms

Iteration   3: 5612.380 ops/ms
                 ·gc.alloc.rate:                   10520.389 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.385 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2071.100 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         59.000 ms

Iteration   4: 5625.051 ops/ms
                 ·gc.alloc.rate:                   10544.122 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.369 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2066.435 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         58.000 ms

Iteration   5: 5614.764 ops/ms
                 ·gc.alloc.rate:                   10524.509 MB/sec
                 ·gc.alloc.rate.norm:              2064.038 B/op
                 ·gc.churn.G1_Eden_Space:          10556.031 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2070.220 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        93.000 counts
                 ·gc.time:                         57.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  5618.713 ±(99.9%) 19.751 ops/ms [Average]
  (min, avg, max) = (5612.380, 5618.713, 5625.051), stdev = 5.129
  CI (99.9%): [5598.962, 5638.465] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  10532.198 ±(99.9%) 37.281 MB/sec [Average]
  (min, avg, max) = (10520.389, 10532.198, 10544.122), stdev = 9.682
  CI (99.9%): [10494.917, 10569.480] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.038 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.038, 2064.038, 2064.039), stdev = 0.001
  CI (99.9%): [2064.037, 2064.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  10533.625 ±(99.9%) 195.121 MB/sec [Average]
  (min, avg, max) = (10442.980, 10533.625, 10556.385), stdev = 50.672
  CI (99.9%): [10338.504, 10728.746] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2064.320 ±(99.9%) 39.797 B/op [Average]
  (min, avg, max) = (2046.139, 2064.320, 2071.100), stdev = 10.335
  CI (99.9%): [2024.523, 2104.117] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.003, 0.005, 0.006), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  464.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (92.000, 92.800, 93.000), stdev = 0.447
  CI (99.9%): [464.000, 464.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  289.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (55.000, 57.800, 60.000), stdev = 1.924
  CI (99.9%): [289.000, 289.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 78.67% complete, ETA 00:22:28
# Fork: 1 of 1
# Warmup Iteration   1: 5249.468 ops/ms
# Warmup Iteration   2: 5452.454 ops/ms
# Warmup Iteration   3: 5633.908 ops/ms
Iteration   1: 5641.061 ops/ms
                 ·gc.alloc.rate:                   10574.345 MB/sec
                 ·gc.alloc.rate.norm:              2064.037 B/op
                 ·gc.churn.G1_Eden_Space:          10627.525 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2074.418 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        90.000 counts
                 ·gc.time:                         61.000 ms

Iteration   2: 5641.010 ops/ms
                 ·gc.alloc.rate:                   10574.087 MB/sec
                 ·gc.alloc.rate.norm:              2064.036 B/op
                 ·gc.churn.G1_Eden_Space:          10509.308 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2051.392 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        89.000 counts
                 ·gc.time:                         57.000 ms

Iteration   3: 5647.655 ops/ms
                 ·gc.alloc.rate:                   10586.487 MB/sec
                 ·gc.alloc.rate.norm:              2064.037 B/op
                 ·gc.churn.G1_Eden_Space:          10627.215 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2071.977 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        90.000 counts
                 ·gc.time:                         58.000 ms

Iteration   4: 5617.274 ops/ms
                 ·gc.alloc.rate:                   10529.541 MB/sec
                 ·gc.alloc.rate.norm:              2064.037 B/op
                 ·gc.churn.G1_Eden_Space:          10509.177 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2060.045 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        89.000 counts
                 ·gc.time:                         60.000 ms

Iteration   5: 5622.178 ops/ms
                 ·gc.alloc.rate:                   10538.486 MB/sec
                 ·gc.alloc.rate.norm:              2064.037 B/op
                 ·gc.churn.G1_Eden_Space:          10627.028 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2081.379 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        90.000 counts
                 ·gc.time:                         57.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  5633.836 ±(99.9%) 51.116 ops/ms [Average]
  (min, avg, max) = (5617.274, 5633.836, 5647.655), stdev = 13.275
  CI (99.9%): [5582.720, 5684.952] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  10560.589 ±(99.9%) 96.163 MB/sec [Average]
  (min, avg, max) = (10529.541, 10560.589, 10586.487), stdev = 24.973
  CI (99.9%): [10464.426, 10656.752] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.037 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.036, 2064.037, 2064.037), stdev = 0.001
  CI (99.9%): [2064.035, 2064.038] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  10580.051 ±(99.9%) 248.901 MB/sec [Average]
  (min, avg, max) = (10509.177, 10580.051, 10627.525), stdev = 64.639
  CI (99.9%): [10331.149, 10828.952] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2067.842 ±(99.9%) 46.167 B/op [Average]
  (min, avg, max) = (2051.392, 2067.842, 2081.379), stdev = 11.989
  CI (99.9%): [2021.675, 2114.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.007 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  448.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (89.000, 89.600, 90.000), stdev = 0.548
  CI (99.9%): [448.000, 448.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  293.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (57.000, 58.600, 61.000), stdev = 1.817
  CI (99.9%): [293.000, 293.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 80.00% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 14.882 ops/ms
# Warmup Iteration   2: 13.105 ops/ms
# Warmup Iteration   3: 16.397 ops/ms
Iteration   1: 16.373 ops/ms
                 ·gc.alloc.rate:                   243.870 MB/sec
                 ·gc.alloc.rate.norm:              16400.858 B/op
                 ·gc.churn.G1_Eden_Space:          225.491 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15164.826 B/op
                 ·gc.churn.G1_Survivor_Space:      0.346 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 23.295 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         5.000 ms

Iteration   2: 16.355 ops/ms
                 ·gc.alloc.rate:                   243.603 MB/sec
                 ·gc.alloc.rate.norm:              16400.809 B/op
                 ·gc.churn.G1_Eden_Space:          281.866 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     18976.895 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.435 B/op
                 ·gc.count:                        5.000 counts
                 ·gc.time:                         5.000 ms

Iteration   3: 16.388 ops/ms
                 ·gc.alloc.rate:                   244.091 MB/sec
                 ·gc.alloc.rate.norm:              16400.647 B/op
                 ·gc.churn.G1_Eden_Space:          225.491 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15150.946 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.046 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 16.333 ops/ms
                 ·gc.alloc.rate:                   243.266 MB/sec
                 ·gc.alloc.rate.norm:              16400.649 B/op
                 ·gc.churn.G1_Eden_Space:          225.490 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15202.243 B/op
                 ·gc.churn.G1_Survivor_Space:      ≈ 10⁻³ MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.025 B/op
                 ·gc.count:                        4.000 counts
                 ·gc.time:                         2.000 ms

Iteration   5: 16.389 ops/ms
                 ·gc.alloc.rate:                   244.116 MB/sec
                 ·gc.alloc.rate.norm:              16400.810 B/op
                 ·gc.churn.G1_Eden_Space:          281.874 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     18937.527 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.052 B/op
                 ·gc.count:                        5.000 counts
                 ·gc.time:                         4.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  16.368 ±(99.9%) 0.092 ops/ms [Average]
  (min, avg, max) = (16.333, 16.368, 16.389), stdev = 0.024
  CI (99.9%): [16.276, 16.460] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  243.789 ±(99.9%) 1.379 MB/sec [Average]
  (min, avg, max) = (243.266, 243.789, 244.116), stdev = 0.358
  CI (99.9%): [242.411, 245.168] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.755 ±(99.9%) 0.382 B/op [Average]
  (min, avg, max) = (16400.647, 16400.755, 16400.858), stdev = 0.099
  CI (99.9%): [16400.372, 16401.137] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  248.042 ±(99.9%) 118.908 MB/sec [Average]
  (min, avg, max) = (225.490, 248.042, 281.874), stdev = 30.880
  CI (99.9%): [129.134, 366.951] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16686.487 ±(99.9%) 7982.420 B/op [Average]
  (min, avg, max) = (15150.946, 16686.487, 18976.895), stdev = 2073.009
  CI (99.9%): [8704.068, 24668.907] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.071 ±(99.9%) 0.593 MB/sec [Average]
  (min, avg, max) = (≈ 10⁻³, 0.071, 0.346), stdev = 0.154
  CI (99.9%): [≈ 0, 0.664] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  4.771 ±(99.9%) 39.881 B/op [Average]
  (min, avg, max) = (0.025, 4.771, 23.295), stdev = 10.357
  CI (99.9%): [≈ 0, 44.652] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  22.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
  CI (99.9%): [22.000, 22.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  19.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.800, 5.000), stdev = 1.304
  CI (99.9%): [19.000, 19.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 81.33% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 41.273 ops/ms
# Warmup Iteration   2: 41.402 ops/ms
# Warmup Iteration   3: 44.555 ops/ms
Iteration   1: 44.608 ops/ms
                 ·gc.alloc.rate:                   664.401 MB/sec
                 ·gc.alloc.rate.norm:              16400.711 B/op
                 ·gc.churn.G1_Eden_Space:          676.469 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16698.612 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.058 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         8.000 ms

Iteration   2: 44.633 ops/ms
                 ·gc.alloc.rate:                   664.780 MB/sec
                 ·gc.alloc.rate.norm:              16400.709 B/op
                 ·gc.churn.G1_Eden_Space:          676.484 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16689.446 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.046 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         9.000 ms

Iteration   3: 44.630 ops/ms
                 ·gc.alloc.rate:                   664.756 MB/sec
                 ·gc.alloc.rate.norm:              16400.650 B/op
                 ·gc.churn.G1_Eden_Space:          620.128 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     15299.584 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
                 ·gc.count:                        11.000 counts
                 ·gc.time:                         9.000 ms

Iteration   4: 44.624 ops/ms
                 ·gc.alloc.rate:                   664.637 MB/sec
                 ·gc.alloc.rate.norm:              16400.696 B/op
                 ·gc.churn.G1_Eden_Space:          676.471 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16692.737 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.046 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         9.000 ms

Iteration   5: 44.604 ops/ms
                 ·gc.alloc.rate:                   664.333 MB/sec
                 ·gc.alloc.rate.norm:              16400.673 B/op
                 ·gc.churn.G1_Eden_Space:          676.465 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16700.185 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.038 B/op
                 ·gc.count:                        12.000 counts
                 ·gc.time:                         10.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  44.620 ±(99.9%) 0.051 ops/ms [Average]
  (min, avg, max) = (44.604, 44.620, 44.633), stdev = 0.013
  CI (99.9%): [44.569, 44.670] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  664.581 ±(99.9%) 0.788 MB/sec [Average]
  (min, avg, max) = (664.333, 664.581, 664.780), stdev = 0.205
  CI (99.9%): [663.793, 665.369] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.688 ±(99.9%) 0.100 B/op [Average]
  (min, avg, max) = (16400.650, 16400.688, 16400.711), stdev = 0.026
  CI (99.9%): [16400.587, 16400.788] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  665.203 ±(99.9%) 97.029 MB/sec [Average]
  (min, avg, max) = (620.128, 665.203, 676.484), stdev = 25.198
  CI (99.9%): [568.174, 762.232] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16416.113 ±(99.9%) 2403.470 B/op [Average]
  (min, avg, max) = (15299.584, 16416.113, 16700.185), stdev = 624.174
  CI (99.9%): [14012.643, 18819.583] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.047 ±(99.9%) 0.028 B/op [Average]
  (min, avg, max) = (0.038, 0.047, 0.058), stdev = 0.007
  CI (99.9%): [0.019, 0.075] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  59.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (11.000, 11.800, 12.000), stdev = 0.447
  CI (99.9%): [59.000, 59.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  45.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (8.000, 9.000, 10.000), stdev = 0.707
  CI (99.9%): [45.000, 45.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 82.67% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 48.963 ops/ms
# Warmup Iteration   2: 49.128 ops/ms
# Warmup Iteration   3: 53.760 ops/ms
Iteration   1: 53.734 ops/ms
                 ·gc.alloc.rate:                   800.343 MB/sec
                 ·gc.alloc.rate.norm:              16400.737 B/op
                 ·gc.churn.G1_Eden_Space:          845.596 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17328.061 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.049 B/op
                 ·gc.count:                        15.000 counts
                 ·gc.time:                         17.000 ms

Iteration   2: 53.780 ops/ms
                 ·gc.alloc.rate:                   801.020 MB/sec
                 ·gc.alloc.rate.norm:              16400.686 B/op
                 ·gc.churn.G1_Eden_Space:          789.232 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16159.325 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.027 B/op
                 ·gc.count:                        14.000 counts
                 ·gc.time:                         9.000 ms

Iteration   3: 53.724 ops/ms
                 ·gc.alloc.rate:                   800.168 MB/sec
                 ·gc.alloc.rate.norm:              16400.671 B/op
                 ·gc.churn.G1_Eden_Space:          789.212 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16176.108 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.043 B/op
                 ·gc.count:                        14.000 counts
                 ·gc.time:                         12.000 ms

Iteration   4: 53.765 ops/ms
                 ·gc.alloc.rate:                   800.789 MB/sec
                 ·gc.alloc.rate.norm:              16400.651 B/op
                 ·gc.churn.G1_Eden_Space:          789.212 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     16163.532 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.028 B/op
                 ·gc.count:                        14.000 counts
                 ·gc.time:                         10.000 ms

Iteration   5: 53.843 ops/ms
                 ·gc.alloc.rate:                   801.957 MB/sec
                 ·gc.alloc.rate.norm:              16400.696 B/op
                 ·gc.churn.G1_Eden_Space:          845.611 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17293.465 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.058 B/op
                 ·gc.count:                        15.000 counts
                 ·gc.time:                         16.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  53.769 ±(99.9%) 0.181 ops/ms [Average]
  (min, avg, max) = (53.724, 53.769, 53.843), stdev = 0.047
  CI (99.9%): [53.589, 53.950] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  800.856 ±(99.9%) 2.709 MB/sec [Average]
  (min, avg, max) = (800.168, 800.856, 801.957), stdev = 0.704
  CI (99.9%): [798.146, 803.565] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.688 ±(99.9%) 0.125 B/op [Average]
  (min, avg, max) = (16400.651, 16400.688, 16400.737), stdev = 0.032
  CI (99.9%): [16400.564, 16400.813] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  811.773 ±(99.9%) 118.921 MB/sec [Average]
  (min, avg, max) = (789.212, 811.773, 845.611), stdev = 30.883
  CI (99.9%): [692.852, 930.694] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16624.098 ±(99.9%) 2414.300 B/op [Average]
  (min, avg, max) = (16159.325, 16624.098, 17328.061), stdev = 626.986
  CI (99.9%): [14209.798, 19038.398] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.002 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.041 ±(99.9%) 0.051 B/op [Average]
  (min, avg, max) = (0.027, 0.041, 0.058), stdev = 0.013
  CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  72.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (14.000, 14.400, 15.000), stdev = 0.548
  CI (99.9%): [72.000, 72.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  64.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (9.000, 12.800, 17.000), stdev = 3.564
  CI (99.9%): [64.000, 64.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 84.00% complete, ETA 00:16:51
# Fork: 1 of 1
# Warmup Iteration   1: 69243.084 ops/ms
# Warmup Iteration   2: 67370.157 ops/ms
# Warmup Iteration   3: 76598.391 ops/ms
Iteration   1: 76553.162 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76641.737 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76591.396 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76637.618 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76412.869 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76567.357 ±(99.9%) 360.785 ops/ms [Average]
  (min, avg, max) = (76412.869, 76567.357, 76641.737), stdev = 93.695
  CI (99.9%): [76206.571, 76928.142] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 85.33% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 72830.475 ops/ms
# Warmup Iteration   2: 73654.262 ops/ms
# Warmup Iteration   3: 77116.009 ops/ms
Iteration   1: 77114.094 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 77089.518 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76945.450 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 77009.776 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 77130.164 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  77057.800 ±(99.9%) 300.378 ops/ms [Average]
  (min, avg, max) = (76945.450, 77057.800, 77130.164), stdev = 78.007
  CI (99.9%): [76757.422, 77358.179] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 86.67% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 69761.524 ops/ms
# Warmup Iteration   2: 67440.736 ops/ms
# Warmup Iteration   3: 76621.467 ops/ms
Iteration   1: 76604.834 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76553.663 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76627.851 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76633.739 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76379.485 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76559.914 ±(99.9%) 406.955 ops/ms [Average]
  (min, avg, max) = (76379.485, 76559.914, 76633.739), stdev = 105.685
  CI (99.9%): [76152.959, 76966.869] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 88.00% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 9154.715 ops/ms
# Warmup Iteration   2: 8236.832 ops/ms
# Warmup Iteration   3: 9246.920 ops/ms
Iteration   1: 9249.858 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9246.753 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9247.464 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9249.207 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9247.097 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9248.076 ±(99.9%) 5.286 ops/ms [Average]
  (min, avg, max) = (9246.753, 9248.076, 9249.858), stdev = 1.373
  CI (99.9%): [9242.790, 9253.362] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 89.33% complete, ETA 00:11:14
# Fork: 1 of 1
# Warmup Iteration   1: 33577.053 ops/ms
# Warmup Iteration   2: 32798.782 ops/ms
# Warmup Iteration   3: 32056.569 ops/ms
Iteration   1: 32007.198 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32053.847 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32012.446 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 31981.988 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 31997.529 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  32010.602 ±(99.9%) 103.229 ops/ms [Average]
  (min, avg, max) = (31981.988, 32010.602, 32053.847), stdev = 26.808
  CI (99.9%): [31907.372, 32113.831] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 90.67% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 36861.383 ops/ms
# Warmup Iteration   2: 37169.067 ops/ms
# Warmup Iteration   3: 37526.788 ops/ms
Iteration   1: 37408.527 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 37439.440 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 37455.855 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 37430.307 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 37489.861 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  37444.798 ±(99.9%) 117.227 ops/ms [Average]
  (min, avg, max) = (37408.527, 37444.798, 37489.861), stdev = 30.443
  CI (99.9%): [37327.571, 37562.025] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 92.00% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9.410 ops/ms
# Warmup Iteration   2: 9.409 ops/ms
# Warmup Iteration   3: 9.507 ops/ms
Iteration   1: 9.506 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.509 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.508 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.500 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.510 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.507 ±(99.9%) 0.015 ops/ms [Average]
  (min, avg, max) = (9.500, 9.507, 9.510), stdev = 0.004
  CI (99.9%): [9.491, 9.522] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.004 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 93.33% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16.776 ops/ms
# Warmup Iteration   2: 16.797 ops/ms
# Warmup Iteration   3: 16.828 ops/ms
Iteration   1: 16.832 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.843 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.838 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.840 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.838 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.838 ±(99.9%) 0.017 ops/ms [Average]
  (min, avg, max) = (16.832, 16.838, 16.843), stdev = 0.004
  CI (99.9%): [16.822, 16.855] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 94.67% complete, ETA 00:05:37
# Fork: 1 of 1
# Warmup Iteration   1: 18.985 ops/ms
# Warmup Iteration   2: 19.017 ops/ms
# Warmup Iteration   3: 19.073 ops/ms
Iteration   1: 19.087 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 19.099 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 19.084 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 19.087 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 19.084 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  19.088 ±(99.9%) 0.024 ops/ms [Average]
  (min, avg, max) = (19.084, 19.088, 19.099), stdev = 0.006
  CI (99.9%): [19.064, 19.113] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 128)

# Run progress: 96.00% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 5795.188 ops/ms
# Warmup Iteration   2: 5698.988 ops/ms
# Warmup Iteration   3: 5731.338 ops/ms
Iteration   1: 5734.069 ops/ms
                 ·gc.alloc.rate:                   1844.833 MB/sec
                 ·gc.alloc.rate.norm:              354.264 B/op
                 ·gc.churn.G1_Eden_Space:          1803.960 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     346.415 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   2: 5738.804 ops/ms
                 ·gc.alloc.rate:                   1846.384 MB/sec
                 ·gc.alloc.rate.norm:              354.264 B/op
                 ·gc.churn.G1_Eden_Space:          1860.382 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     356.950 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         21.000 ms

Iteration   3: 5732.910 ops/ms
                 ·gc.alloc.rate:                   1844.400 MB/sec
                 ·gc.alloc.rate.norm:              354.264 B/op
                 ·gc.churn.G1_Eden_Space:          1860.280 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     357.314 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms

Iteration   4: 5740.463 ops/ms
                 ·gc.alloc.rate:                   1846.927 MB/sec
                 ·gc.alloc.rate.norm:              354.264 B/op
                 ·gc.churn.G1_Eden_Space:          1860.404 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     356.849 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         23.000 ms

Iteration   5: 5744.365 ops/ms
                 ·gc.alloc.rate:                   1848.154 MB/sec
                 ·gc.alloc.rate.norm:              354.264 B/op
                 ·gc.churn.G1_Eden_Space:          1860.362 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     356.604 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5738.122 ±(99.9%) 18.114 ops/ms [Average]
  (min, avg, max) = (5732.910, 5738.122, 5744.365), stdev = 4.704
  CI (99.9%): [5720.008, 5756.236] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1846.140 ±(99.9%) 5.925 MB/sec [Average]
  (min, avg, max) = (1844.400, 1846.140, 1848.154), stdev = 1.539
  CI (99.9%): [1840.215, 1852.065] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  354.264 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (354.264, 354.264, 354.264), stdev = 0.001
  CI (99.9%): [354.263, 354.265] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1849.078 ±(99.9%) 97.119 MB/sec [Average]
  (min, avg, max) = (1803.960, 1849.078, 1860.404), stdev = 25.222
  CI (99.9%): [1751.958, 1946.197] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  354.827 ±(99.9%) 18.132 B/op [Average]
  (min, avg, max) = (346.415, 354.827, 357.314), stdev = 4.709
  CI (99.9%): [336.694, 372.959] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.001 MB/sec [Average]
  (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  164.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.800, 33.000), stdev = 0.447
  CI (99.9%): [164.000, 164.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  99.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (18.000, 19.800, 23.000), stdev = 2.168
  CI (99.9%): [99.000, 99.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1024)

# Run progress: 97.33% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 5735.786 ops/ms
# Warmup Iteration   2: 5600.409 ops/ms
# Warmup Iteration   3: 5587.399 ops/ms
Iteration   1: 5578.641 ops/ms
                 ·gc.alloc.rate:                   1785.959 MB/sec
                 ·gc.alloc.rate.norm:              352.514 B/op
                 ·gc.churn.G1_Eden_Space:          1747.584 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     344.940 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         22.000 ms

Iteration   2: 5592.755 ops/ms
                 ·gc.alloc.rate:                   1790.504 MB/sec
                 ·gc.alloc.rate.norm:              352.514 B/op
                 ·gc.churn.G1_Eden_Space:          1804.002 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     355.172 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         21.000 ms

Iteration   3: 5585.028 ops/ms
                 ·gc.alloc.rate:                   1788.003 MB/sec
                 ·gc.alloc.rate.norm:              352.514 B/op
                 ·gc.churn.G1_Eden_Space:          1803.965 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     355.661 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         19.000 ms

Iteration   4: 5581.358 ops/ms
                 ·gc.alloc.rate:                   1786.811 MB/sec
                 ·gc.alloc.rate.norm:              352.514 B/op
                 ·gc.churn.G1_Eden_Space:          1747.578 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     344.773 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         16.000 ms

Iteration   5: 5586.738 ops/ms
                 ·gc.alloc.rate:                   1788.546 MB/sec
                 ·gc.alloc.rate.norm:              352.514 B/op
                 ·gc.churn.G1_Eden_Space:          1803.961 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     355.552 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5584.904 ±(99.9%) 20.810 ops/ms [Average]
  (min, avg, max) = (5578.641, 5584.904, 5592.755), stdev = 5.404
  CI (99.9%): [5564.094, 5605.714] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1787.965 ±(99.9%) 6.709 MB/sec [Average]
  (min, avg, max) = (1785.959, 1787.965, 1790.504), stdev = 1.742
  CI (99.9%): [1781.256, 1794.673] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  352.514 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (352.514, 352.514, 352.514), stdev = 0.001
  CI (99.9%): [352.513, 352.515] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1781.418 ±(99.9%) 118.942 MB/sec [Average]
  (min, avg, max) = (1747.578, 1781.418, 1804.002), stdev = 30.889
  CI (99.9%): [1662.476, 1900.360] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  351.220 ±(99.9%) 22.379 B/op [Average]
  (min, avg, max) = (344.773, 351.220, 355.661), stdev = 5.812
  CI (99.9%): [328.840, 373.599] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.003 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.005), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  158.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.600, 32.000), stdev = 0.548
  CI (99.9%): [158.000, 158.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  96.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 19.200, 22.000), stdev = 2.387
  CI (99.9%): [96.000, 96.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1048576)

# Run progress: 98.67% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 5929.450 ops/ms
# Warmup Iteration   2: 5817.502 ops/ms
# Warmup Iteration   3: 5792.367 ops/ms
Iteration   1: 5781.479 ops/ms
                 ·gc.alloc.rate:                   1849.758 MB/sec
                 ·gc.alloc.rate.norm:              352.296 B/op
                 ·gc.churn.G1_Eden_Space:          1860.353 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     354.314 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms

Iteration   2: 5793.735 ops/ms
                 ·gc.alloc.rate:                   1853.677 MB/sec
                 ·gc.alloc.rate.norm:              352.296 B/op
                 ·gc.churn.G1_Eden_Space:          1860.362 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     353.566 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         20.000 ms

Iteration   3: 5788.964 ops/ms
                 ·gc.alloc.rate:                   1852.138 MB/sec
                 ·gc.alloc.rate.norm:              352.295 B/op
                 ·gc.churn.G1_Eden_Space:          1860.337 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     353.855 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms

Iteration   4: 5788.044 ops/ms
                 ·gc.alloc.rate:                   1851.805 MB/sec
                 ·gc.alloc.rate.norm:              352.295 B/op
                 ·gc.churn.G1_Eden_Space:          1803.927 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     343.186 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         17.000 ms

Iteration   5: 5794.556 ops/ms
                 ·gc.alloc.rate:                   1853.900 MB/sec
                 ·gc.alloc.rate.norm:              352.295 B/op
                 ·gc.churn.G1_Eden_Space:          1860.309 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     353.513 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        33.000 counts
                 ·gc.time:                         18.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5789.356 ±(99.9%) 20.207 ops/ms [Average]
  (min, avg, max) = (5781.479, 5789.356, 5794.556), stdev = 5.248
  CI (99.9%): [5769.149, 5809.562] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1852.256 ±(99.9%) 6.439 MB/sec [Average]
  (min, avg, max) = (1849.758, 1852.256, 1853.900), stdev = 1.672
  CI (99.9%): [1845.817, 1858.694] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  352.295 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (352.295, 352.295, 352.296), stdev = 0.001
  CI (99.9%): [352.294, 352.297] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1849.058 ±(99.9%) 97.147 MB/sec [Average]
  (min, avg, max) = (1803.927, 1849.058, 1860.362), stdev = 25.229
  CI (99.9%): [1751.910, 1946.205] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  351.687 ±(99.9%) 18.339 B/op [Average]
  (min, avg, max) = (343.186, 351.687, 354.314), stdev = 4.763
  CI (99.9%): [333.348, 370.026] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  164.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.800, 33.000), stdev = 0.447
  CI (99.9%): [164.000, 164.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  91.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 18.200, 20.000), stdev = 1.095
  CI (99.9%): [91.000, 91.000] (assumes normal distribution)


# Run complete. Total time: 01:45:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (charsetName)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score      Error   Units
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128             128  thrpt    5   3014.239 ±   10.846  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128            1024  thrpt    5   3124.133 ±    2.603  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128         1048576  thrpt    5   3115.104 ±    3.308  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024             128  thrpt    5    388.244 ±    0.205  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024            1024  thrpt    5    412.975 ±    0.324  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024         1048576  thrpt    5    418.256 ±    0.611  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576             128  thrpt    5      0.384 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576             128  thrpt    5      0.108 ±    0.014    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576            1024  thrpt    5      0.418 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576            1024  thrpt    5      0.105 ±    0.021    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576         1048576  thrpt    5      0.373 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576         1048576  thrpt    5      0.111 ±    0.015    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128             128  thrpt    5   3131.507 ±    4.038  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128            1024  thrpt    5   3293.194 ±   17.544  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128         1048576  thrpt    5   3436.871 ±   11.504  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024             128  thrpt    5    401.742 ±    1.094  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024            1024  thrpt    5    434.069 ±    0.749  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024         1048576  thrpt    5    425.562 ±    1.059  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576             128  thrpt    5      0.398 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576             128  thrpt    5      0.107 ±    0.028    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576            1024  thrpt    5      0.421 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576            1024  thrpt    5      0.101 ±    0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576         1048576  thrpt    5      0.384 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576         1048576  thrpt    5      0.115 ±    0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128             128  thrpt    5   3438.487 ±    6.069  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128            1024  thrpt    5   3414.724 ±    9.565  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128         1048576  thrpt    5   3459.651 ±   18.087  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024             128  thrpt    5    445.432 ±    1.004  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024            1024  thrpt    5    460.757 ±    2.360  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024         1048576  thrpt    5    453.863 ±    1.180  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576             128  thrpt    5      0.435 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576             128  thrpt    5      0.095 ±    0.013    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576            1024  thrpt    5      0.439 ±    0.002  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576            1024  thrpt    5      0.100 ±    0.001    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576         1048576  thrpt    5      0.472 ±    0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576         1048576  thrpt    5      0.090 ±    0.014    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128             128  thrpt    5   9902.070 ±   23.267  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128            1024  thrpt    5  11407.779 ±   20.125  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128         1048576  thrpt    5  12736.403 ±  120.544  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024             128  thrpt    5   1148.542 ±    1.759  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024            1024  thrpt    5   2167.499 ±    5.684  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024         1048576  thrpt    5   2216.250 ±    2.560  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576             128  thrpt    5      0.923 ±    0.005  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576             128  thrpt    5      0.046 ±    0.007    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576            1024  thrpt    5      1.507 ±    0.004  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576            1024  thrpt    5      0.030 ±    0.018    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576         1048576  thrpt    5      1.559 ±    0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576         1048576  thrpt    5      0.028 ±    0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128             128  thrpt    5  10893.656 ±   16.728  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128            1024  thrpt    5  13760.559 ±   33.297  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128         1048576  thrpt    5  15173.612 ±   53.869  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁶               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024             128  thrpt    5   1119.096 ±    2.350  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024            1024  thrpt    5   2682.598 ±    6.795  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024         1048576  thrpt    5   2811.430 ±    4.012  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576             128  thrpt    5      1.105 ±    0.004  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576             128  thrpt    5      0.040 ±    0.009    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576            1024  thrpt    5      1.499 ±    0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576            1024  thrpt    5      0.030 ±    0.013    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576         1048576  thrpt    5      1.406 ±    0.002  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576         1048576  thrpt    5      0.032 ±    0.015    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128             128  thrpt    5  10181.893 ±   23.147  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128            1024  thrpt    5  11975.887 ±   13.270  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128         1048576  thrpt    5  10795.721 ±   34.956  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024             128  thrpt    5   1571.333 ±    4.209  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024             128  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024            1024  thrpt    5   2409.157 ±    5.061  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024         1048576  thrpt    5   2206.480 ±    5.242  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁵               B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024         1048576  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576             128  thrpt    5      1.611 ±    0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576             128  thrpt    5      0.027 ±    0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576             128  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576            1024  thrpt    5      2.473 ±    0.005  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576            1024  thrpt    5      0.018 ±    0.008    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576            1024  thrpt    5        ≈ 0             counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576         1048576  thrpt    5      2.041 ±    0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576         1048576  thrpt    5      0.023 ±    0.012    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576         1048576  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readDirectBuffer                                             N/A                 128             128  thrpt    5  26019.348 ±  141.946  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128             128  thrpt    5   6427.518 ±   35.097  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128             128  thrpt    5    272.007 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128             128  thrpt    5   6439.588 ±    0.067  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128             128  thrpt    5    272.518 ±    1.491    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128             128  thrpt    5      0.004 ±    0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128             128  thrpt    5     ≈ 10⁻⁴               B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128             128  thrpt    5    395.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128             128  thrpt    5    215.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128            1024  thrpt    5  26164.511 ±  262.026  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128            1024  thrpt    5   6463.404 ±   64.578  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128            1024  thrpt    5    272.007 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128            1024  thrpt    5   6455.936 ±  140.725  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128            1024  thrpt    5    271.695 ±    7.093    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128            1024  thrpt    5      0.004 ±    0.007  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128            1024  thrpt    5     ≈ 10⁻⁴               B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128            1024  thrpt    5    396.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128            1024  thrpt    5    208.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128         1048576  thrpt    5  26141.877 ±   74.781  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128         1048576  thrpt    5   6457.788 ±   18.440  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128         1048576  thrpt    5    272.007 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128         1048576  thrpt    5   6460.316 ±  143.055  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128         1048576  thrpt    5    272.114 ±    6.672    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128         1048576  thrpt    5      0.004 ±    0.004  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴               B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128         1048576  thrpt    5    389.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128         1048576  thrpt    5    215.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024             128  thrpt    5   4354.450 ±   55.137  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024             128  thrpt    5   8162.417 ±  103.439  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024             128  thrpt    5   2064.042 ±    0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024             128  thrpt    5   8182.465 ±  220.434  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024             128  thrpt    5   2069.120 ±   55.671    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024             128  thrpt    5      0.004 ±    0.005  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024             128  thrpt    5      0.001 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024             128  thrpt    5    392.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024             128  thrpt    5    248.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024            1024  thrpt    5   5618.713 ±   19.751  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024            1024  thrpt    5  10532.198 ±   37.281  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024            1024  thrpt    5   2064.038 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024            1024  thrpt    5  10533.625 ±  195.121  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024            1024  thrpt    5   2064.320 ±   39.797    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024            1024  thrpt    5      0.005 ±    0.004  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024            1024  thrpt    5      0.001 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024            1024  thrpt    5    464.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024            1024  thrpt    5    289.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024         1048576  thrpt    5   5633.836 ±   51.116  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024         1048576  thrpt    5  10560.589 ±   96.163  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024         1048576  thrpt    5   2064.037 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024         1048576  thrpt    5  10580.051 ±  248.901  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024         1048576  thrpt    5   2067.842 ±   46.167    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024         1048576  thrpt    5      0.004 ±    0.007  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024         1048576  thrpt    5      0.001 ±    0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024         1048576  thrpt    5    448.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024         1048576  thrpt    5    293.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576             128  thrpt    5     16.368 ±    0.092  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576             128  thrpt    5    243.789 ±    1.379  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576             128  thrpt    5  16400.755 ±    0.382    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576             128  thrpt    5    248.042 ±  118.908  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576             128  thrpt    5  16686.487 ± 7982.420    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576             128  thrpt    5      0.071 ±    0.593  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576             128  thrpt    5      4.771 ±   39.881    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576             128  thrpt    5     22.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576             128  thrpt    5     19.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576            1024  thrpt    5     44.620 ±    0.051  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576            1024  thrpt    5    664.581 ±    0.788  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576            1024  thrpt    5  16400.688 ±    0.100    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576            1024  thrpt    5    665.203 ±   97.029  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576            1024  thrpt    5  16416.113 ± 2403.470    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576            1024  thrpt    5      0.002 ±    0.001  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576            1024  thrpt    5      0.047 ±    0.028    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576            1024  thrpt    5     59.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576            1024  thrpt    5     45.000                 ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576         1048576  thrpt    5     53.769 ±    0.181  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576         1048576  thrpt    5    800.856 ±    2.709  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576         1048576  thrpt    5  16400.688 ±    0.125    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576         1048576  thrpt    5    811.773 ±  118.921  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576         1048576  thrpt    5  16624.098 ± 2414.300    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576         1048576  thrpt    5      0.002 ±    0.003  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576         1048576  thrpt    5      0.041 ±    0.051    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576         1048576  thrpt    5     72.000             counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576         1048576  thrpt    5     64.000                 ms
ReaderBenchmarks.readHeapBuffer                                               N/A                 128             128  thrpt    5  76567.357 ±  360.785  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128             128  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128             128  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128             128  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128            1024  thrpt    5  77057.800 ±  300.378  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128            1024  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128            1024  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128         1048576  thrpt    5  76559.914 ±  406.955  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128         1048576  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024             128  thrpt    5   9248.076 ±    5.286  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024             128  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024             128  thrpt    5     ≈ 10⁻⁵               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024             128  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024            1024  thrpt    5  32010.602 ±  103.229  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024            1024  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024            1024  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024         1048576  thrpt    5  37444.798 ±  117.227  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶               B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024         1048576  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576             128  thrpt    5      9.507 ±    0.015  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576             128  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576             128  thrpt    5      0.004 ±    0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576             128  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576            1024  thrpt    5     16.838 ±    0.017  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576            1024  thrpt    5      0.003 ±    0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576            1024  thrpt    5        ≈ 0             counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576         1048576  thrpt    5     19.088 ±    0.024  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴             MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576         1048576  thrpt    5      0.002 ±    0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576         1048576  thrpt    5        ≈ 0             counts
ScannerBenchmarks.scan                                                        N/A                 N/A             128  thrpt    5   5738.122 ±   18.114  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A             128  thrpt    5   1846.140 ±    5.925  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A             128  thrpt    5    354.264 ±    0.001    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A             128  thrpt    5   1849.078 ±   97.119  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A             128  thrpt    5    354.827 ±   18.132    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A             128  thrpt    5      0.003 ±    0.001  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A             128  thrpt    5      0.001 ±    0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A             128  thrpt    5    164.000             counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A             128  thrpt    5     99.000                 ms
ScannerBenchmarks.scan                                                        N/A                 N/A            1024  thrpt    5   5584.904 ±   20.810  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A            1024  thrpt    5   1787.965 ±    6.709  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A            1024  thrpt    5    352.514 ±    0.001    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A            1024  thrpt    5   1781.418 ±  118.942  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A            1024  thrpt    5    351.220 ±   22.379    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A            1024  thrpt    5      0.003 ±    0.003  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A            1024  thrpt    5      0.001 ±    0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A            1024  thrpt    5    158.000             counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A            1024  thrpt    5     96.000                 ms
ScannerBenchmarks.scan                                                        N/A                 N/A         1048576  thrpt    5   5789.356 ±   20.207  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A         1048576  thrpt    5   1852.256 ±    6.439  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A         1048576  thrpt    5    352.295 ±    0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A         1048576  thrpt    5   1849.058 ±   97.147  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A         1048576  thrpt    5    351.687 ±   18.339    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A         1048576  thrpt    5      0.003 ±    0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A         1048576  thrpt    5      0.001 ±    0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A         1048576  thrpt    5    164.000             counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A         1048576  thrpt    5     91.000                 ms

Benchmark result is saved to jmh-result.csv
