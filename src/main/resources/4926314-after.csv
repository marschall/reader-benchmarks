# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 0.00% complete, ETA 01:40:00
# Fork: 1 of 1
# Warmup Iteration   1: 3042.096 ops/ms
# Warmup Iteration   2: 3052.743 ops/ms
# Warmup Iteration   3: 3006.264 ops/ms
Iteration   1: 3011.041 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3011.548 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3014.187 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3013.281 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3006.647 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3011.341 ±(99.9%) 11.231 ops/ms [Average]
  (min, avg, max) = (3006.647, 3011.341, 3014.187), stdev = 2.917
  CI (99.9%): [3000.110, 3022.572] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 1.33% complete, ETA 01:43:55
# Fork: 1 of 1
# Warmup Iteration   1: 3025.705 ops/ms
# Warmup Iteration   2: 3035.541 ops/ms
# Warmup Iteration   3: 3034.046 ops/ms
Iteration   1: 3035.532 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3037.011 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3034.087 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3035.590 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3036.497 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3035.743 ±(99.9%) 4.298 ops/ms [Average]
  (min, avg, max) = (3034.087, 3035.743, 3037.011), stdev = 1.116
  CI (99.9%): [3031.445, 3040.042] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 2.67% complete, ETA 01:42:31
# Fork: 1 of 1
# Warmup Iteration   1: 2966.472 ops/ms
# Warmup Iteration   2: 2974.404 ops/ms
# Warmup Iteration   3: 2990.292 ops/ms
Iteration   1: 2988.492 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2991.086 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2991.948 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2992.186 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2991.691 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  2991.081 ±(99.9%) 5.792 ops/ms [Average]
  (min, avg, max) = (2988.492, 2991.081, 2992.186), stdev = 1.504
  CI (99.9%): [2985.289, 2996.872] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 4.00% complete, ETA 01:41:06
# Fork: 1 of 1
# Warmup Iteration   1: 383.532 ops/ms
# Warmup Iteration   2: 384.313 ops/ms
# Warmup Iteration   3: 384.826 ops/ms
Iteration   1: 384.913 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 385.020 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 384.980 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 384.799 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 385.061 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  384.955 ±(99.9%) 0.395 ops/ms [Average]
  (min, avg, max) = (384.799, 384.955, 385.061), stdev = 0.103
  CI (99.9%): [384.559, 385.350] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 5.33% complete, ETA 01:39:42
# Fork: 1 of 1
# Warmup Iteration   1: 423.789 ops/ms
# Warmup Iteration   2: 424.653 ops/ms
# Warmup Iteration   3: 424.747 ops/ms
Iteration   1: 424.880 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 424.629 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 424.493 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 424.741 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 425.141 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  424.777 ±(99.9%) 0.958 ops/ms [Average]
  (min, avg, max) = (424.493, 424.777, 425.141), stdev = 0.249
  CI (99.9%): [423.819, 425.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 6.67% complete, ETA 01:38:17
# Fork: 1 of 1
# Warmup Iteration   1: 397.718 ops/ms
# Warmup Iteration   2: 397.496 ops/ms
# Warmup Iteration   3: 397.629 ops/ms
Iteration   1: 398.045 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 398.008 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 398.078 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 397.405 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 397.953 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  397.898 ±(99.9%) 1.076 ops/ms [Average]
  (min, avg, max) = (397.405, 397.898, 398.078), stdev = 0.279
  CI (99.9%): [396.822, 398.974] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 8.00% complete, ETA 01:36:53
# Fork: 1 of 1
# Warmup Iteration   1: 0.378 ops/ms
# Warmup Iteration   2: 0.379 ops/ms
# Warmup Iteration   3: 0.379 ops/ms
Iteration   1: 0.379 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.108 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.379 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.116 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.379 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.124 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.379 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.116 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.379 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.116 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.379 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.379, 0.379, 0.379), stdev = 0.001
  CI (99.9%): [0.379, 0.380] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.116 ±(99.9%) 0.023 B/op [Average]
  (min, avg, max) = (0.108, 0.116, 0.124), stdev = 0.006
  CI (99.9%): [0.093, 0.139] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 9.33% complete, ETA 01:35:29
# Fork: 1 of 1
# Warmup Iteration   1: 0.418 ops/ms
# Warmup Iteration   2: 0.418 ops/ms
# Warmup Iteration   3: 0.418 ops/ms
Iteration   1: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.419 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.418 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.105 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.418 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.418, 0.418, 0.419), stdev = 0.001
  CI (99.9%): [0.417, 0.419] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.101 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.097, 0.101, 0.105), stdev = 0.004
  CI (99.9%): [0.084, 0.117] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 10.67% complete, ETA 01:34:05
# Fork: 1 of 1
# Warmup Iteration   1: 0.382 ops/ms
# Warmup Iteration   2: 0.373 ops/ms
# Warmup Iteration   3: 0.373 ops/ms
Iteration   1: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.109 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.373 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.118 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.373 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.373, 0.373, 0.373), stdev = 0.001
  CI (99.9%): [0.373, 0.374] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.114 ±(99.9%) 0.018 B/op [Average]
  (min, avg, max) = (0.109, 0.114, 0.118), stdev = 0.005
  CI (99.9%): [0.096, 0.133] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 12.00% complete, ETA 01:32:41
# Fork: 1 of 1
# Warmup Iteration   1: 3133.870 ops/ms
# Warmup Iteration   2: 3107.818 ops/ms
# Warmup Iteration   3: 3139.535 ops/ms
Iteration   1: 3138.552 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3136.482 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3138.315 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3138.910 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3139.430 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3138.338 ±(99.9%) 4.310 ops/ms [Average]
  (min, avg, max) = (3136.482, 3138.338, 3139.430), stdev = 1.119
  CI (99.9%): [3134.028, 3142.647] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 13.33% complete, ETA 01:31:16
# Fork: 1 of 1
# Warmup Iteration   1: 3206.779 ops/ms
# Warmup Iteration   2: 3210.788 ops/ms
# Warmup Iteration   3: 3235.901 ops/ms
Iteration   1: 3226.669 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3239.688 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3238.758 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3238.222 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3237.554 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3236.178 ±(99.9%) 20.689 ops/ms [Average]
  (min, avg, max) = (3226.669, 3236.178, 3239.688), stdev = 5.373
  CI (99.9%): [3215.489, 3256.867] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 14.67% complete, ETA 01:29:52
# Fork: 1 of 1
# Warmup Iteration   1: 3507.643 ops/ms
# Warmup Iteration   2: 3517.491 ops/ms
# Warmup Iteration   3: 3521.598 ops/ms
Iteration   1: 3522.007 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3520.857 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3518.228 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3519.847 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3501.560 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3516.500 ±(99.9%) 32.600 ops/ms [Average]
  (min, avg, max) = (3501.560, 3516.500, 3522.007), stdev = 8.466
  CI (99.9%): [3483.900, 3549.100] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 16.00% complete, ETA 01:28:28
# Fork: 1 of 1
# Warmup Iteration   1: 406.862 ops/ms
# Warmup Iteration   2: 408.335 ops/ms
# Warmup Iteration   3: 408.878 ops/ms
Iteration   1: 408.815 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 409.014 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 408.886 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 408.832 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 408.902 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  408.890 ±(99.9%) 0.301 ops/ms [Average]
  (min, avg, max) = (408.815, 408.890, 409.014), stdev = 0.078
  CI (99.9%): [408.589, 409.191] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 17.33% complete, ETA 01:27:03
# Fork: 1 of 1
# Warmup Iteration   1: 438.419 ops/ms
# Warmup Iteration   2: 439.610 ops/ms
# Warmup Iteration   3: 439.498 ops/ms
Iteration   1: 439.574 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 439.751 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 440.183 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 439.315 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 440.145 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  439.793 ±(99.9%) 1.433 ops/ms [Average]
  (min, avg, max) = (439.315, 439.793, 440.183), stdev = 0.372
  CI (99.9%): [438.360, 441.227] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 18.67% complete, ETA 01:25:39
# Fork: 1 of 1
# Warmup Iteration   1: 456.989 ops/ms
# Warmup Iteration   2: 458.400 ops/ms
# Warmup Iteration   3: 458.605 ops/ms
Iteration   1: 458.721 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 458.520 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 458.415 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 458.709 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 458.736 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  458.620 ±(99.9%) 0.556 ops/ms [Average]
  (min, avg, max) = (458.415, 458.620, 458.736), stdev = 0.144
  CI (99.9%): [458.064, 459.176] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 20.00% complete, ETA 01:24:15
# Fork: 1 of 1
# Warmup Iteration   1: 0.397 ops/ms
# Warmup Iteration   2: 0.397 ops/ms
# Warmup Iteration   3: 0.398 ops/ms
Iteration   1: 0.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.398 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.103 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.119 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.397 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.111 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.397 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.397, 0.397, 0.398), stdev = 0.001
  CI (99.9%): [0.397, 0.398] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.111 ±(99.9%) 0.022 B/op [Average]
  (min, avg, max) = (0.103, 0.111, 0.119), stdev = 0.006
  CI (99.9%): [0.089, 0.133] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 21.33% complete, ETA 01:22:51
# Fork: 1 of 1
# Warmup Iteration   1: 0.422 ops/ms
# Warmup Iteration   2: 0.422 ops/ms
# Warmup Iteration   3: 0.422 ops/ms
Iteration   1: 0.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.421 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.097 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.104 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.422 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.421, 0.422, 0.422), stdev = 0.001
  CI (99.9%): [0.421, 0.423] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.101 ±(99.9%) 0.016 B/op [Average]
  (min, avg, max) = (0.097, 0.101, 0.104), stdev = 0.004
  CI (99.9%): [0.085, 0.117] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 22.67% complete, ETA 01:21:26
# Fork: 1 of 1
# Warmup Iteration   1: 0.450 ops/ms
# Warmup Iteration   2: 0.448 ops/ms
# Warmup Iteration   3: 0.448 ops/ms
Iteration   1: 0.448 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.091 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.448 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.448 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.091 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.448 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.091 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.448 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.098 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.448 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.448, 0.448, 0.448), stdev = 0.001
  CI (99.9%): [0.447, 0.449] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.094 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.091, 0.094, 0.098), stdev = 0.004
  CI (99.9%): [0.079, 0.109] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 24.00% complete, ETA 01:20:02
# Fork: 1 of 1
# Warmup Iteration   1: 3428.190 ops/ms
# Warmup Iteration   2: 3442.032 ops/ms
# Warmup Iteration   3: 3440.951 ops/ms
Iteration   1: 3440.485 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3441.075 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3440.196 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3434.527 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3441.147 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3439.486 ±(99.9%) 10.785 ops/ms [Average]
  (min, avg, max) = (3434.527, 3439.486, 3441.147), stdev = 2.801
  CI (99.9%): [3428.701, 3450.271] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 25.33% complete, ETA 01:18:38
# Fork: 1 of 1
# Warmup Iteration   1: 3412.147 ops/ms
# Warmup Iteration   2: 3417.861 ops/ms
# Warmup Iteration   3: 3422.324 ops/ms
Iteration   1: 3420.223 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3421.770 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3423.024 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3423.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3424.079 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3422.438 ±(99.9%) 5.717 ops/ms [Average]
  (min, avg, max) = (3420.223, 3422.438, 3424.079), stdev = 1.485
  CI (99.9%): [3416.721, 3428.154] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 26.67% complete, ETA 01:17:13
# Fork: 1 of 1
# Warmup Iteration   1: 3467.105 ops/ms
# Warmup Iteration   2: 3477.759 ops/ms
# Warmup Iteration   3: 3480.212 ops/ms
Iteration   1: 3482.905 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 3483.341 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 3482.633 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 3484.516 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 3472.432 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  3481.166 ±(99.9%) 19.002 ops/ms [Average]
  (min, avg, max) = (3472.432, 3481.166, 3484.516), stdev = 4.935
  CI (99.9%): [3462.163, 3500.168] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 28.00% complete, ETA 01:15:49
# Fork: 1 of 1
# Warmup Iteration   1: 448.232 ops/ms
# Warmup Iteration   2: 449.836 ops/ms
# Warmup Iteration   3: 448.440 ops/ms
Iteration   1: 448.227 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 448.127 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 447.955 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 448.356 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 448.257 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  448.184 ±(99.9%) 0.586 ops/ms [Average]
  (min, avg, max) = (447.955, 448.184, 448.356), stdev = 0.152
  CI (99.9%): [447.599, 448.770] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 29.33% complete, ETA 01:14:25
# Fork: 1 of 1
# Warmup Iteration   1: 463.382 ops/ms
# Warmup Iteration   2: 464.493 ops/ms
# Warmup Iteration   3: 464.067 ops/ms
Iteration   1: 464.095 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 464.461 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 464.385 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 464.309 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 464.442 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  464.339 ±(99.9%) 0.570 ops/ms [Average]
  (min, avg, max) = (464.095, 464.339, 464.461), stdev = 0.148
  CI (99.9%): [463.768, 464.909] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 30.67% complete, ETA 01:13:01
# Fork: 1 of 1
# Warmup Iteration   1: 448.301 ops/ms
# Warmup Iteration   2: 450.383 ops/ms
# Warmup Iteration   3: 453.129 ops/ms
Iteration   1: 453.175 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 453.340 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 453.346 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 452.934 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 453.161 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  453.191 ±(99.9%) 0.649 ops/ms [Average]
  (min, avg, max) = (452.934, 453.191, 453.346), stdev = 0.168
  CI (99.9%): [452.543, 453.840] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 32.00% complete, ETA 01:11:36
# Fork: 1 of 1
# Warmup Iteration   1: 0.442 ops/ms
# Warmup Iteration   2: 0.444 ops/ms
# Warmup Iteration   3: 0.444 ops/ms
Iteration   1: 0.444 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.092 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.444 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.444 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.444 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.444 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.099 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.444 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.444, 0.444, 0.444), stdev = 0.001
  CI (99.9%): [0.443, 0.445] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.098 ±(99.9%) 0.012 B/op [Average]
  (min, avg, max) = (0.092, 0.098, 0.099), stdev = 0.003
  CI (99.9%): [0.085, 0.110] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 33.33% complete, ETA 01:10:12
# Fork: 1 of 1
# Warmup Iteration   1: 0.438 ops/ms
# Warmup Iteration   2: 0.438 ops/ms
# Warmup Iteration   3: 0.438 ops/ms
Iteration   1: 0.438 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.439 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.438 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.101 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.438 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.438, 0.438, 0.439), stdev = 0.001
  CI (99.9%): [0.437, 0.440] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.095 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.093, 0.095, 0.101), stdev = 0.003
  CI (99.9%): [0.082, 0.107] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 34.67% complete, ETA 01:08:48
# Fork: 1 of 1
# Warmup Iteration   1: 0.471 ops/ms
# Warmup Iteration   2: 0.472 ops/ms
# Warmup Iteration   3: 0.472 ops/ms
Iteration   1: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.086 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.100 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.472 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.093 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer":
  0.472 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.472, 0.472, 0.472), stdev = 0.001
  CI (99.9%): [0.472, 0.472] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  0.091 ±(99.9%) 0.023 B/op [Average]
  (min, avg, max) = (0.086, 0.091, 0.100), stdev = 0.006
  CI (99.9%): [0.067, 0.114] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readDirectBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 128)

# Run progress: 36.00% complete, ETA 01:07:24
# Fork: 1 of 1
# Warmup Iteration   1: 9046.868 ops/ms
# Warmup Iteration   2: 9882.756 ops/ms
# Warmup Iteration   3: 9884.006 ops/ms
Iteration   1: 9896.349 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9908.929 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9905.362 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9903.949 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9904.506 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  9903.819 ±(99.9%) 17.728 ops/ms [Average]
  (min, avg, max) = (9896.349, 9903.819, 9908.929), stdev = 4.604
  CI (99.9%): [9886.091, 9921.547] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1024)

# Run progress: 37.33% complete, ETA 01:05:59
# Fork: 1 of 1
# Warmup Iteration   1: 12157.536 ops/ms
# Warmup Iteration   2: 12007.635 ops/ms
# Warmup Iteration   3: 12252.192 ops/ms
Iteration   1: 12257.183 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 12262.451 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 12262.578 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 12242.369 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 12268.722 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  12258.661 ±(99.9%) 38.438 ops/ms [Average]
  (min, avg, max) = (12242.369, 12258.661, 12268.722), stdev = 9.982
  CI (99.9%): [12220.223, 12297.098] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 38.67% complete, ETA 01:04:35
# Fork: 1 of 1
# Warmup Iteration   1: 12972.600 ops/ms
# Warmup Iteration   2: 13022.228 ops/ms
# Warmup Iteration   3: 13171.298 ops/ms
Iteration   1: 13167.932 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13168.544 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13184.502 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13171.383 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13180.686 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13174.609 ±(99.9%) 28.981 ops/ms [Average]
  (min, avg, max) = (13167.932, 13174.609, 13184.502), stdev = 7.526
  CI (99.9%): [13145.628, 13203.591] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 128)

# Run progress: 40.00% complete, ETA 01:03:11
# Fork: 1 of 1
# Warmup Iteration   1: 1134.273 ops/ms
# Warmup Iteration   2: 1137.814 ops/ms
# Warmup Iteration   3: 1136.514 ops/ms
Iteration   1: 1138.057 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1136.819 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1138.264 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1137.550 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1137.413 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1137.621 ±(99.9%) 2.191 ops/ms [Average]
  (min, avg, max) = (1136.819, 1137.621, 1138.264), stdev = 0.569
  CI (99.9%): [1135.429, 1139.812] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 41.33% complete, ETA 01:01:46
# Fork: 1 of 1
# Warmup Iteration   1: 2407.651 ops/ms
# Warmup Iteration   2: 2415.198 ops/ms
# Warmup Iteration   3: 2418.710 ops/ms
Iteration   1: 2420.017 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2419.858 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2417.995 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2420.672 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2420.430 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2419.794 ±(99.9%) 4.069 ops/ms [Average]
  (min, avg, max) = (2417.995, 2419.794, 2420.672), stdev = 1.057
  CI (99.9%): [2415.725, 2423.864] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 42.67% complete, ETA 01:00:22
# Fork: 1 of 1
# Warmup Iteration   1: 1978.633 ops/ms
# Warmup Iteration   2: 1984.760 ops/ms
# Warmup Iteration   3: 1987.754 ops/ms
Iteration   1: 1988.658 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1989.759 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1989.180 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1988.932 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1990.152 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1989.336 ±(99.9%) 2.351 ops/ms [Average]
  (min, avg, max) = (1988.658, 1989.336, 1990.152), stdev = 0.611
  CI (99.9%): [1986.985, 1991.688] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 44.00% complete, ETA 00:58:58
# Fork: 1 of 1
# Warmup Iteration   1: 0.921 ops/ms
# Warmup Iteration   2: 0.924 ops/ms
# Warmup Iteration   3: 0.924 ops/ms
Iteration   1: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.051 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 0.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.051 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 0.923 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.044 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 0.924 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.048 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  0.924 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (0.923, 0.924, 0.924), stdev = 0.001
  CI (99.9%): [0.922, 0.925] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.048 ±(99.9%) 0.013 B/op [Average]
  (min, avg, max) = (0.044, 0.048, 0.051), stdev = 0.003
  CI (99.9%): [0.034, 0.061] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 45.33% complete, ETA 00:57:34
# Fork: 1 of 1
# Warmup Iteration   1: 1.503 ops/ms
# Warmup Iteration   2: 1.506 ops/ms
# Warmup Iteration   3: 1.505 ops/ms
Iteration   1: 1.506 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.506 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.506 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.031 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.505 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.034 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.506 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.506 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (1.505, 1.506, 1.506), stdev = 0.001
  CI (99.9%): [1.505, 1.507] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.027, 0.030, 0.034), stdev = 0.003
  CI (99.9%): [0.018, 0.041] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = US-ASCII, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 46.67% complete, ETA 00:56:09
# Fork: 1 of 1
# Warmup Iteration   1: 1.550 ops/ms
# Warmup Iteration   2: 1.555 ops/ms
# Warmup Iteration   3: 1.558 ops/ms
Iteration   1: 1.553 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.558 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.558 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.030 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.556 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.553 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.556 ±(99.9%) 0.010 ops/ms [Average]
  (min, avg, max) = (1.553, 1.556, 1.558), stdev = 0.003
  CI (99.9%): [1.546, 1.566] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.033), stdev = 0.003
  CI (99.9%): [0.020, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 128)

# Run progress: 48.00% complete, ETA 00:54:45
# Fork: 1 of 1
# Warmup Iteration   1: 10778.268 ops/ms
# Warmup Iteration   2: 10775.794 ops/ms
# Warmup Iteration   3: 10816.145 ops/ms
Iteration   1: 10814.512 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10820.106 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10816.768 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10820.317 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10823.033 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10818.947 ±(99.9%) 12.819 ops/ms [Average]
  (min, avg, max) = (10814.512, 10818.947, 10823.033), stdev = 3.329
  CI (99.9%): [10806.128, 10831.766] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1024)

# Run progress: 49.33% complete, ETA 00:53:21
# Fork: 1 of 1
# Warmup Iteration   1: 14173.209 ops/ms
# Warmup Iteration   2: 13558.816 ops/ms
# Warmup Iteration   3: 13458.906 ops/ms
Iteration   1: 13473.712 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 13472.205 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 13467.597 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 13474.581 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 13473.305 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  13472.280 ±(99.9%) 10.604 ops/ms [Average]
  (min, avg, max) = (13467.597, 13472.280, 13474.581), stdev = 2.754
  CI (99.9%): [13461.676, 13482.884] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 50.67% complete, ETA 00:51:57
# Fork: 1 of 1
# Warmup Iteration   1: 14057.759 ops/ms
# Warmup Iteration   2: 14486.708 ops/ms
# Warmup Iteration   3: 14620.511 ops/ms
Iteration   1: 14611.533 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 14631.438 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 14623.987 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 14626.803 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 14632.259 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  14625.204 ±(99.9%) 32.191 ops/ms [Average]
  (min, avg, max) = (14611.533, 14625.204, 14632.259), stdev = 8.360
  CI (99.9%): [14593.013, 14657.395] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 128)

# Run progress: 52.00% complete, ETA 00:50:32
# Fork: 1 of 1
# Warmup Iteration   1: 1154.646 ops/ms
# Warmup Iteration   2: 1156.922 ops/ms
# Warmup Iteration   3: 1148.052 ops/ms
Iteration   1: 1148.202 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1149.057 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1148.386 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1147.731 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1148.054 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1148.286 ±(99.9%) 1.900 ops/ms [Average]
  (min, avg, max) = (1147.731, 1148.286, 1149.057), stdev = 0.493
  CI (99.9%): [1146.386, 1150.186] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 53.33% complete, ETA 00:49:08
# Fork: 1 of 1
# Warmup Iteration   1: 2685.159 ops/ms
# Warmup Iteration   2: 2681.685 ops/ms
# Warmup Iteration   3: 2686.444 ops/ms
Iteration   1: 2687.097 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2687.283 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2687.726 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2687.965 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2685.869 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2687.188 ±(99.9%) 3.134 ops/ms [Average]
  (min, avg, max) = (2685.869, 2687.188, 2687.965), stdev = 0.814
  CI (99.9%): [2684.054, 2690.322] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 54.67% complete, ETA 00:47:44
# Fork: 1 of 1
# Warmup Iteration   1: 2777.178 ops/ms
# Warmup Iteration   2: 2774.389 ops/ms
# Warmup Iteration   3: 2782.395 ops/ms
Iteration   1: 2781.164 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2779.315 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2780.049 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2780.866 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2782.164 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2780.712 ±(99.9%) 4.187 ops/ms [Average]
  (min, avg, max) = (2779.315, 2780.712, 2782.164), stdev = 1.087
  CI (99.9%): [2776.525, 2784.898] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 56.00% complete, ETA 00:46:20
# Fork: 1 of 1
# Warmup Iteration   1: 1.085 ops/ms
# Warmup Iteration   2: 1.092 ops/ms
# Warmup Iteration   3: 1.091 ops/ms
Iteration   1: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.037 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.043 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.093 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.092 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.040 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.092 ±(99.9%) 0.001 ops/ms [Average]
  (min, avg, max) = (1.092, 1.092, 1.093), stdev = 0.001
  CI (99.9%): [1.091, 1.093] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.040 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (0.037, 0.040, 0.043), stdev = 0.002
  CI (99.9%): [0.032, 0.048] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 57.33% complete, ETA 00:44:55
# Fork: 1 of 1
# Warmup Iteration   1: 1.493 ops/ms
# Warmup Iteration   2: 1.497 ops/ms
# Warmup Iteration   3: 1.497 ops/ms
Iteration   1: 1.497 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.497 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.502 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.500 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.036 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.501 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.029 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.499 ±(99.9%) 0.009 ops/ms [Average]
  (min, avg, max) = (1.497, 1.499, 1.502), stdev = 0.002
  CI (99.9%): [1.490, 1.509] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.030 ±(99.9%) 0.015 B/op [Average]
  (min, avg, max) = (0.027, 0.030, 0.036), stdev = 0.004
  CI (99.9%): [0.016, 0.045] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = ISO-8859-1, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 58.67% complete, ETA 00:43:31
# Fork: 1 of 1
# Warmup Iteration   1: 1.549 ops/ms
# Warmup Iteration   2: 1.551 ops/ms
# Warmup Iteration   3: 1.549 ops/ms
Iteration   1: 1.545 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.550 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.550 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.026 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.549 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.033 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.550 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.028 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.549 ±(99.9%) 0.008 ops/ms [Average]
  (min, avg, max) = (1.545, 1.549, 1.550), stdev = 0.002
  CI (99.9%): [1.541, 1.557] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.029 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.026, 0.029, 0.033), stdev = 0.003
  CI (99.9%): [0.018, 0.039] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 128)

# Run progress: 60.00% complete, ETA 00:42:07
# Fork: 1 of 1
# Warmup Iteration   1: 10011.645 ops/ms
# Warmup Iteration   2: 10033.574 ops/ms
# Warmup Iteration   3: 10181.830 ops/ms
Iteration   1: 10186.513 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 10193.768 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 10195.000 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 10188.534 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 10184.975 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  10189.758 ±(99.9%) 17.055 ops/ms [Average]
  (min, avg, max) = (10184.975, 10189.758, 10195.000), stdev = 4.429
  CI (99.9%): [10172.703, 10206.813] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1024)

# Run progress: 61.33% complete, ETA 00:40:43
# Fork: 1 of 1
# Warmup Iteration   1: 11582.596 ops/ms
# Warmup Iteration   2: 11618.334 ops/ms
# Warmup Iteration   3: 11803.328 ops/ms
Iteration   1: 11802.388 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11799.124 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11810.367 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11801.305 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11803.711 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11803.379 ±(99.9%) 16.375 ops/ms [Average]
  (min, avg, max) = (11799.124, 11803.379, 11810.367), stdev = 4.252
  CI (99.9%): [11787.004, 11819.754] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 128, transferSize = 1048576)

# Run progress: 62.67% complete, ETA 00:39:18
# Fork: 1 of 1
# Warmup Iteration   1: 10903.539 ops/ms
# Warmup Iteration   2: 11048.195 ops/ms
# Warmup Iteration   3: 11164.346 ops/ms
Iteration   1: 11169.738 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 11175.501 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 11169.816 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 11179.305 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 11172.682 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  11173.408 ±(99.9%) 15.647 ops/ms [Average]
  (min, avg, max) = (11169.738, 11173.408, 11179.305), stdev = 4.063
  CI (99.9%): [11157.761, 11189.055] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 128)

# Run progress: 64.00% complete, ETA 00:37:54
# Fork: 1 of 1
# Warmup Iteration   1: 1572.660 ops/ms
# Warmup Iteration   2: 1578.007 ops/ms
# Warmup Iteration   3: 1573.641 ops/ms
Iteration   1: 1574.304 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1576.145 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1574.431 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1575.632 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1576.690 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1575.440 ±(99.9%) 4.041 ops/ms [Average]
  (min, avg, max) = (1574.304, 1575.440, 1576.690), stdev = 1.049
  CI (99.9%): [1571.400, 1579.481] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1024)

# Run progress: 65.33% complete, ETA 00:36:30
# Fork: 1 of 1
# Warmup Iteration   1: 2404.123 ops/ms
# Warmup Iteration   2: 2415.649 ops/ms
# Warmup Iteration   3: 2418.241 ops/ms
Iteration   1: 2413.462 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2418.558 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2418.214 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2418.018 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2418.527 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2417.356 ±(99.9%) 8.427 ops/ms [Average]
  (min, avg, max) = (2413.462, 2417.356, 2418.558), stdev = 2.189
  CI (99.9%): [2408.929, 2425.783] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 66.67% complete, ETA 00:35:06
# Fork: 1 of 1
# Warmup Iteration   1: 2198.289 ops/ms
# Warmup Iteration   2: 2203.387 ops/ms
# Warmup Iteration   3: 2207.816 ops/ms
Iteration   1: 2206.792 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2208.075 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2207.520 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2206.382 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2207.341 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2207.222 ±(99.9%) 2.526 ops/ms [Average]
  (min, avg, max) = (2206.382, 2207.222, 2208.075), stdev = 0.656
  CI (99.9%): [2204.695, 2209.748] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 128)

# Run progress: 68.00% complete, ETA 00:33:41
# Fork: 1 of 1
# Warmup Iteration   1: 1.599 ops/ms
# Warmup Iteration   2: 1.603 ops/ms
# Warmup Iteration   3: 1.603 ops/ms
Iteration   1: 1.605 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 1.602 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.025 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 1.602 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 1.604 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.032 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 1.602 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  1.603 ±(99.9%) 0.006 ops/ms [Average]
  (min, avg, max) = (1.602, 1.603, 1.605), stdev = 0.002
  CI (99.9%): [1.597, 1.609] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.028 ±(99.9%) 0.010 B/op [Average]
  (min, avg, max) = (0.025, 0.028, 0.032), stdev = 0.003
  CI (99.9%): [0.017, 0.038] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 69.33% complete, ETA 00:32:17
# Fork: 1 of 1
# Warmup Iteration   1: 2.466 ops/ms
# Warmup Iteration   2: 2.474 ops/ms
# Warmup Iteration   3: 2.470 ops/ms
Iteration   1: 2.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.474 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.469 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.017 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.470 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.470 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.018 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.471 ±(99.9%) 0.009 ops/ms [Average]
  (min, avg, max) = (2.469, 2.471, 2.474), stdev = 0.002
  CI (99.9%): [2.462, 2.481] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.019 ±(99.9%) 0.008 B/op [Average]
  (min, avg, max) = (0.017, 0.019, 0.022), stdev = 0.002
  CI (99.9%): [0.011, 0.027] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer
# Parameters: (charsetName = UTF-8, targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 70.67% complete, ETA 00:30:53
# Fork: 1 of 1
# Warmup Iteration   1: 2.034 ops/ms
# Warmup Iteration   2: 2.039 ops/ms
# Warmup Iteration   3: 2.037 ops/ms
Iteration   1: 2.041 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 2.041 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.027 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.040 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.020 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 2.039 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.040 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.022 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer":
  2.040 ±(99.9%) 0.003 ops/ms [Average]
  (min, avg, max) = (2.039, 2.040, 2.041), stdev = 0.001
  CI (99.9%): [2.037, 2.043] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.022 ±(99.9%) 0.011 B/op [Average]
  (min, avg, max) = (0.020, 0.022, 0.027), stdev = 0.003
  CI (99.9%): [0.012, 0.033] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.InputStreamReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 72.00% complete, ETA 00:29:29
# Fork: 1 of 1
# Warmup Iteration   1: 12959.091 ops/ms
# Warmup Iteration   2: 13156.477 ops/ms
# Warmup Iteration   3: 13274.501 ops/ms
Iteration   1: 13251.725 ops/ms
                 ·gc.alloc.rate:                   3273.621 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.708 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.685 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         34.000 ms

Iteration   2: 13266.753 ops/ms
                 ·gc.alloc.rate:                   3277.355 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.783 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.382 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         33.000 ms

Iteration   3: 13258.018 ops/ms
                 ·gc.alloc.rate:                   3275.165 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.727 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.559 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         34.000 ms

Iteration   4: 13258.126 ops/ms
                 ·gc.alloc.rate:                   3275.195 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.102 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     276.238 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         32.000 ms

Iteration   5: 13283.037 ops/ms
                 ·gc.alloc.rate:                   3281.341 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.711 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     271.046 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         27.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13263.532 ±(99.9%) 46.760 ops/ms [Average]
  (min, avg, max) = (13251.725, 13263.532, 13283.037), stdev = 12.143
  CI (99.9%): [13216.771, 13310.292] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3276.536 ±(99.9%) 11.541 MB/sec [Average]
  (min, avg, max) = (3273.621, 3276.536, 3281.341), stdev = 2.997
  CI (99.9%): [3264.995, 3288.077] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3281.006 ±(99.9%) 97.073 MB/sec [Average]
  (min, avg, max) = (3269.708, 3281.006, 3326.102), stdev = 25.209
  CI (99.9%): [3183.934, 3378.079] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.382 ±(99.9%) 8.352 B/op [Average]
  (min, avg, max) = (271.046, 272.382, 276.238), stdev = 2.169
  CI (99.9%): [264.030, 280.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.008 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  291.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (58.000, 58.200, 59.000), stdev = 0.447
  CI (99.9%): [291.000, 291.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  160.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (27.000, 32.000, 34.000), stdev = 2.915
  CI (99.9%): [160.000, 160.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 73.33% complete, ETA 00:28:04
# Fork: 1 of 1
# Warmup Iteration   1: 13035.695 ops/ms
# Warmup Iteration   2: 13282.991 ops/ms
# Warmup Iteration   3: 13391.458 ops/ms
Iteration   1: 13381.267 ops/ms
                 ·gc.alloc.rate:                   3305.633 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.112 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.696 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         29.000 ms

Iteration   2: 13376.479 ops/ms
                 ·gc.alloc.rate:                   3304.432 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.111 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.795 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         37.000 ms

Iteration   3: 13388.367 ops/ms
                 ·gc.alloc.rate:                   3307.340 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.684 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     268.913 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         28.000 ms

Iteration   4: 13375.710 ops/ms
                 ·gc.alloc.rate:                   3304.156 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.001 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.808 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         37.000 ms

Iteration   5: 13385.056 ops/ms
                 ·gc.alloc.rate:                   3306.518 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3326.058 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     273.618 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        59.000 counts
                 ·gc.time:                         33.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13381.376 ±(99.9%) 20.960 ops/ms [Average]
  (min, avg, max) = (13375.710, 13381.376, 13388.367), stdev = 5.443
  CI (99.9%): [13360.416, 13402.336] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3305.616 ±(99.9%) 5.209 MB/sec [Average]
  (min, avg, max) = (3304.156, 3305.616, 3307.340), stdev = 1.353
  CI (99.9%): [3300.407, 3310.825] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3314.793 ±(99.9%) 97.102 MB/sec [Average]
  (min, avg, max) = (3269.684, 3314.793, 3326.112), stdev = 25.217
  CI (99.9%): [3217.691, 3411.895] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  272.766 ±(99.9%) 8.299 B/op [Average]
  (min, avg, max) = (268.913, 272.766, 273.808), stdev = 2.155
  CI (99.9%): [264.467, 281.065] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.006), stdev = 0.002
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  294.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (58.000, 58.800, 59.000), stdev = 0.447
  CI (99.9%): [294.000, 294.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  164.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (28.000, 32.800, 37.000), stdev = 4.266
  CI (99.9%): [164.000, 164.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 74.67% complete, ETA 00:26:40
# Fork: 1 of 1
# Warmup Iteration   1: 12993.095 ops/ms
# Warmup Iteration   2: 13229.182 ops/ms
# Warmup Iteration   3: 13061.788 ops/ms
Iteration   1: 13073.539 ops/ms
                 ·gc.alloc.rate:                   3229.605 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.340 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.640 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻³ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         34.000 ms

Iteration   2: 13062.531 ops/ms
                 ·gc.alloc.rate:                   3226.868 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.346 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.870 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         35.000 ms

Iteration   3: 13097.028 ops/ms
                 ·gc.alloc.rate:                   3235.385 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3269.700 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     274.895 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        58.000 counts
                 ·gc.time:                         38.000 ms

Iteration   4: 13095.225 ops/ms
                 ·gc.alloc.rate:                   3234.912 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.302 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     270.193 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         33.000 ms

Iteration   5: 13104.766 ops/ms
                 ·gc.alloc.rate:                   3237.233 MB/sec
                 ·gc.alloc.rate.norm:              272.010 B/op
                 ·gc.churn.G1_Eden_Space:          3213.277 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     269.997 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: ≈ 10⁻⁴ B/op
                 ·gc.count:                        57.000 counts
                 ·gc.time:                         31.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  13086.618 ±(99.9%) 68.424 ops/ms [Average]
  (min, avg, max) = (13062.531, 13086.618, 13104.766), stdev = 17.770
  CI (99.9%): [13018.194, 13155.042] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3232.801 ±(99.9%) 16.806 MB/sec [Average]
  (min, avg, max) = (3226.868, 3232.801, 3237.233), stdev = 4.364
  CI (99.9%): [3215.995, 3249.606] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  272.010 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (272.010, 272.010, 272.010), stdev = 0.001
  CI (99.9%): [272.010, 272.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3224.593 ±(99.9%) 97.097 MB/sec [Average]
  (min, avg, max) = (3213.277, 3224.593, 3269.700), stdev = 25.216
  CI (99.9%): [3127.496, 3321.690] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  271.319 ±(99.9%) 7.813 B/op [Average]
  (min, avg, max) = (269.997, 271.319, 274.895), stdev = 2.029
  CI (99.9%): [263.506, 279.132] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.001
  CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  ≈ 10⁻⁴ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  286.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (57.000, 57.200, 58.000), stdev = 0.447
  CI (99.9%): [286.000, 286.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  171.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (31.000, 34.200, 38.000), stdev = 2.588
  CI (99.9%): [171.000, 171.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 76.00% complete, ETA 00:25:16
# Fork: 1 of 1
# Warmup Iteration   1: 1663.720 ops/ms
# Warmup Iteration   2: 1686.991 ops/ms
# Warmup Iteration   3: 1682.750 ops/ms
Iteration   1: 1683.012 ops/ms
                 ·gc.alloc.rate:                   3154.833 MB/sec
                 ·gc.alloc.rate.norm:              2064.079 B/op
                 ·gc.churn.G1_Eden_Space:          3156.906 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2065.435 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         29.000 ms

Iteration   2: 1683.906 ops/ms
                 ·gc.alloc.rate:                   3156.595 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3157.024 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2064.358 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         30.000 ms

Iteration   3: 1683.248 ops/ms
                 ·gc.alloc.rate:                   3155.315 MB/sec
                 ·gc.alloc.rate.norm:              2064.078 B/op
                 ·gc.churn.G1_Eden_Space:          3156.970 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2065.160 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         37.000 ms

Iteration   4: 1684.785 ops/ms
                 ·gc.alloc.rate:                   3158.119 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3156.881 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.268 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         34.000 ms

Iteration   5: 1684.518 ops/ms
                 ·gc.alloc.rate:                   3157.694 MB/sec
                 ·gc.alloc.rate.norm:              2064.077 B/op
                 ·gc.churn.G1_Eden_Space:          3156.987 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2063.615 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        56.000 counts
                 ·gc.time:                         32.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  1683.894 ±(99.9%) 2.969 ops/ms [Average]
  (min, avg, max) = (1683.012, 1683.894, 1684.785), stdev = 0.771
  CI (99.9%): [1680.925, 1686.862] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  3156.511 ±(99.9%) 5.527 MB/sec [Average]
  (min, avg, max) = (3154.833, 3156.511, 3158.119), stdev = 1.435
  CI (99.9%): [3150.984, 3162.038] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.078 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (2064.077, 2064.078, 2064.079), stdev = 0.001
  CI (99.9%): [2064.074, 2064.081] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  3156.953 ±(99.9%) 0.227 MB/sec [Average]
  (min, avg, max) = (3156.881, 3156.953, 3157.024), stdev = 0.059
  CI (99.9%): [3156.726, 3157.180] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2064.367 ±(99.9%) 3.625 B/op [Average]
  (min, avg, max) = (2063.268, 2064.367, 2065.435), stdev = 0.941
  CI (99.9%): [2060.742, 2067.992] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [0.001, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.001, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  280.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
  CI (99.9%): [280.000, 280.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  162.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (29.000, 32.400, 37.000), stdev = 3.209
  CI (99.9%): [162.000, 162.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 77.33% complete, ETA 00:23:52
# Fork: 1 of 1
# Warmup Iteration   1: 3744.903 ops/ms
# Warmup Iteration   2: 3858.509 ops/ms
# Warmup Iteration   3: 3839.394 ops/ms
Iteration   1: 3854.491 ops/ms
                 ·gc.alloc.rate:                   7225.393 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7158.081 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2044.824 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         50.000 ms

Iteration   2: 3823.468 ops/ms
                 ·gc.alloc.rate:                   7167.164 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7240.353 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2085.131 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        88.000 counts
                 ·gc.time:                         53.000 ms

Iteration   3: 3823.055 ops/ms
                 ·gc.alloc.rate:                   7166.387 MB/sec
                 ·gc.alloc.rate.norm:              2064.052 B/op
                 ·gc.churn.G1_Eden_Space:          7158.028 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2061.645 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         48.000 ms

Iteration   4: 3853.007 ops/ms
                 ·gc.alloc.rate:                   7222.525 MB/sec
                 ·gc.alloc.rate.norm:              2064.053 B/op
                 ·gc.churn.G1_Eden_Space:          7240.333 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2069.142 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        88.000 counts
                 ·gc.time:                         47.000 ms

Iteration   5: 3853.187 ops/ms
                 ·gc.alloc.rate:                   7222.795 MB/sec
                 ·gc.alloc.rate.norm:              2064.052 B/op
                 ·gc.churn.G1_Eden_Space:          7157.930 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2045.516 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        87.000 counts
                 ·gc.time:                         46.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3841.442 ±(99.9%) 63.946 ops/ms [Average]
  (min, avg, max) = (3823.055, 3841.442, 3854.491), stdev = 16.607
  CI (99.9%): [3777.496, 3905.388] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  7200.853 ±(99.9%) 119.869 MB/sec [Average]
  (min, avg, max) = (7166.387, 7200.853, 7225.393), stdev = 31.130
  CI (99.9%): [7080.983, 7320.722] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.053 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (2064.052, 2064.053, 2064.053), stdev = 0.001
  CI (99.9%): [2064.051, 2064.054] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  7190.945 ±(99.9%) 173.641 MB/sec [Average]
  (min, avg, max) = (7157.930, 7190.945, 7240.353), stdev = 45.094
  CI (99.9%): [7017.304, 7364.586] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2061.251 ±(99.9%) 65.294 B/op [Average]
  (min, avg, max) = (2044.824, 2061.251, 2085.131), stdev = 16.957
  CI (99.9%): [1995.957, 2126.545] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.005 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  437.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (87.000, 87.400, 88.000), stdev = 0.548
  CI (99.9%): [437.000, 437.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  244.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (46.000, 48.800, 53.000), stdev = 2.775
  CI (99.9%): [244.000, 244.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 78.67% complete, ETA 00:22:27
# Fork: 1 of 1
# Warmup Iteration   1: 3438.308 ops/ms
# Warmup Iteration   2: 3505.468 ops/ms
# Warmup Iteration   3: 3545.899 ops/ms
Iteration   1: 3537.860 ops/ms
                 ·gc.alloc.rate:                   6631.921 MB/sec
                 ·gc.alloc.rate.norm:              2064.056 B/op
                 ·gc.churn.G1_Eden_Space:          6669.841 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2075.858 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         47.000 ms

Iteration   2: 3549.799 ops/ms
                 ·gc.alloc.rate:                   6654.242 MB/sec
                 ·gc.alloc.rate.norm:              2064.055 B/op
                 ·gc.churn.G1_Eden_Space:          6669.836 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2068.892 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         44.000 ms

Iteration   3: 3552.669 ops/ms
                 ·gc.alloc.rate:                   6659.544 MB/sec
                 ·gc.alloc.rate.norm:              2064.055 B/op
                 ·gc.churn.G1_Eden_Space:          6669.708 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2067.205 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         47.000 ms

Iteration   4: 3555.524 ops/ms
                 ·gc.alloc.rate:                   6664.908 MB/sec
                 ·gc.alloc.rate.norm:              2064.055 B/op
                 ·gc.churn.G1_Eden_Space:          6669.710 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2065.542 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         47.000 ms

Iteration   5: 3551.219 ops/ms
                 ·gc.alloc.rate:                   6656.827 MB/sec
                 ·gc.alloc.rate.norm:              2064.055 B/op
                 ·gc.churn.G1_Eden_Space:          6669.725 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     2068.054 B/op
                 ·gc.churn.G1_Survivor_Space:      0.006 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.002 B/op
                 ·gc.count:                        85.000 counts
                 ·gc.time:                         46.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  3549.414 ±(99.9%) 26.175 ops/ms [Average]
  (min, avg, max) = (3537.860, 3549.414, 3555.524), stdev = 6.798
  CI (99.9%): [3523.239, 3575.589] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  6653.489 ±(99.9%) 48.857 MB/sec [Average]
  (min, avg, max) = (6631.921, 6653.489, 6664.908), stdev = 12.688
  CI (99.9%): [6604.632, 6702.346] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  2064.055 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (2064.055, 2064.055, 2064.056), stdev = 0.001
  CI (99.9%): [2064.053, 2064.057] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  6669.764 ±(99.9%) 0.263 MB/sec [Average]
  (min, avg, max) = (6669.708, 6669.764, 6669.841), stdev = 0.068
  CI (99.9%): [6669.501, 6670.026] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  2069.110 ±(99.9%) 15.288 B/op [Average]
  (min, avg, max) = (2065.542, 2069.110, 2075.858), stdev = 3.970
  CI (99.9%): [2053.822, 2084.399] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.009 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.007), stdev = 0.002
  CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.003 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.002), stdev = 0.001
  CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  425.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (85.000, 85.000, 85.000), stdev = 0.001
  CI (99.9%): [425.000, 425.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  231.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (44.000, 46.200, 47.000), stdev = 1.304
  CI (99.9%): [231.000, 231.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 80.00% complete, ETA 00:21:03
# Fork: 1 of 1
# Warmup Iteration   1: 2.250 ops/ms
# Warmup Iteration   2: 2.247 ops/ms
# Warmup Iteration   3: 2.259 ops/ms
Iteration   1: 2.269 ops/ms
                 ·gc.alloc.rate:               33.798 MB/sec
                 ·gc.alloc.rate.norm:          16401.190 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27355.764 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   2: 2.269 ops/ms
                 ·gc.alloc.rate:      33.793 MB/sec
                 ·gc.alloc.rate.norm: 16400.023 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 2.281 ops/ms
                 ·gc.alloc.rate:                   33.981 MB/sec
                 ·gc.alloc.rate.norm:              16401.185 B/op
                 ·gc.churn.G1_Eden_Space:          56.371 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     27208.284 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1.599 B/op
                 ·gc.count:                        1.000 counts
                 ·gc.time:                         1.000 ms

Iteration   4: 2.277 ops/ms
                 ·gc.alloc.rate:      33.918 MB/sec
                 ·gc.alloc.rate.norm: 16400.019 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 2.280 ops/ms
                 ·gc.alloc.rate:               33.961 MB/sec
                 ·gc.alloc.rate.norm:          16401.185 B/op
                 ·gc.churn.G1_Eden_Space:      56.373 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 27224.990 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  2.275 ±(99.9%) 0.023 ops/ms [Average]
  (min, avg, max) = (2.269, 2.275, 2.281), stdev = 0.006
  CI (99.9%): [2.252, 2.298] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  33.890 ±(99.9%) 0.344 MB/sec [Average]
  (min, avg, max) = (33.793, 33.890, 33.981), stdev = 0.089
  CI (99.9%): [33.546, 34.234] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.720 ±(99.9%) 2.458 B/op [Average]
  (min, avg, max) = (16400.019, 16400.720, 16401.190), stdev = 0.638
  CI (99.9%): [16398.262, 16403.179] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  33.823 ±(99.9%) 118.893 MB/sec [Average]
  (min, avg, max) = (≈ 0, 33.823, 56.373), stdev = 30.876
  CI (99.9%): [≈ 0, 152.716] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  16357.807 ±(99.9%) 57500.418 B/op [Average]
  (min, avg, max) = (≈ 0, 16357.807, 27355.764), stdev = 14932.676
  CI (99.9%): [≈ 0, 73858.226] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.001 ±(99.9%) 0.006 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
  CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  0.320 ±(99.9%) 2.753 B/op [Average]
  (min, avg, max) = (≈ 0, 0.320, 1.599), stdev = 0.715
  CI (99.9%): [≈ 0, 3.073] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  3.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
  CI (99.9%): [3.000, 3.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  5.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
  CI (99.9%): [5.000, 5.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 81.33% complete, ETA 00:19:39
# Fork: 1 of 1
# Warmup Iteration   1: 7.061 ops/ms
# Warmup Iteration   2: 7.143 ops/ms
# Warmup Iteration   3: 7.164 ops/ms
Iteration   1: 7.165 ops/ms
                 ·gc.alloc.rate:                   106.723 MB/sec
                 ·gc.alloc.rate.norm:              16400.745 B/op
                 ·gc.churn.G1_Eden_Space:          112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17326.755 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.517 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         4.000 ms

Iteration   2: 7.146 ops/ms
                 ·gc.alloc.rate:                   106.441 MB/sec
                 ·gc.alloc.rate.norm:              16400.747 B/op
                 ·gc.churn.G1_Eden_Space:          112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17372.822 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.512 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   3: 7.151 ops/ms
                 ·gc.alloc.rate:                   106.514 MB/sec
                 ·gc.alloc.rate.norm:              16400.747 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17360.433 B/op
                 ·gc.churn.G1_Survivor_Space:      0.007 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1.130 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 7.162 ops/ms
                 ·gc.alloc.rate:               106.673 MB/sec
                 ·gc.alloc.rate.norm:          16400.377 B/op
                 ·gc.churn.G1_Eden_Space:      56.372 MB/sec
                 ·gc.churn.G1_Eden_Space.norm: 8666.885 B/op
                 ·gc.count:                    1.000 counts
                 ·gc.time:                     2.000 ms

Iteration   5: 7.158 ops/ms
                 ·gc.alloc.rate:                   106.614 MB/sec
                 ·gc.alloc.rate.norm:              16401.228 B/op
                 ·gc.churn.G1_Eden_Space:          112.745 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     17344.426 B/op
                 ·gc.churn.G1_Survivor_Space:      0.336 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 51.672 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  7.156 ±(99.9%) 0.030 ops/ms [Average]
  (min, avg, max) = (7.146, 7.156, 7.165), stdev = 0.008
  CI (99.9%): [7.126, 7.187] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  106.593 ±(99.9%) 0.444 MB/sec [Average]
  (min, avg, max) = (106.441, 106.593, 106.723), stdev = 0.115
  CI (99.9%): [106.149, 107.037] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.769 ±(99.9%) 1.164 B/op [Average]
  (min, avg, max) = (16400.377, 16400.769, 16401.228), stdev = 0.302
  CI (99.9%): [16399.604, 16401.933] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  101.472 ±(99.9%) 97.081 MB/sec [Average]
  (min, avg, max) = (56.372, 101.472, 112.749), stdev = 25.212
  CI (99.9%): [4.391, 198.554] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  15614.264 ±(99.9%) 14954.905 B/op [Average]
  (min, avg, max) = (8666.885, 15614.264, 17372.822), stdev = 3883.741
  CI (99.9%): [659.359, 30569.169] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.070 ±(99.9%) 0.572 MB/sec [Average]
  (min, avg, max) = (≈ 0, 0.070, 0.336), stdev = 0.149
  CI (99.9%): [≈ 0, 0.642] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  10.766 ±(99.9%) 88.066 B/op [Average]
  (min, avg, max) = (≈ 0, 10.766, 51.672), stdev = 22.870
  CI (99.9%): [≈ 0, 98.832] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  9.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
  CI (99.9%): [9.000, 9.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  15.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
  CI (99.9%): [15.000, 15.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 82.67% complete, ETA 00:18:15
# Fork: 1 of 1
# Warmup Iteration   1: 9.228 ops/ms
# Warmup Iteration   2: 9.371 ops/ms
# Warmup Iteration   3: 9.385 ops/ms
Iteration   1: 9.409 ops/ms
                 ·gc.alloc.rate:                   140.140 MB/sec
                 ·gc.alloc.rate.norm:              16400.567 B/op
                 ·gc.churn.G1_Eden_Space:          112.749 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13194.962 B/op
                 ·gc.churn.G1_Survivor_Space:      0.001 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.174 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   2: 9.382 ops/ms
                 ·gc.alloc.rate:                   139.740 MB/sec
                 ·gc.alloc.rate.norm:              16400.849 B/op
                 ·gc.churn.G1_Eden_Space:          169.123 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19849.403 B/op
                 ·gc.churn.G1_Survivor_Space:      0.013 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 1.569 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         6.000 ms

Iteration   3: 9.400 ops/ms
                 ·gc.alloc.rate:                   140.010 MB/sec
                 ·gc.alloc.rate.norm:              16400.935 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13207.174 B/op
                 ·gc.churn.G1_Survivor_Space:      0.332 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 38.871 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         3.000 ms

Iteration   4: 9.365 ops/ms
                 ·gc.alloc.rate:                   139.485 MB/sec
                 ·gc.alloc.rate.norm:              16400.850 B/op
                 ·gc.churn.G1_Eden_Space:          169.118 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     19885.223 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.532 B/op
                 ·gc.count:                        3.000 counts
                 ·gc.time:                         3.000 ms

Iteration   5: 9.360 ops/ms
                 ·gc.alloc.rate:                   139.413 MB/sec
                 ·gc.alloc.rate.norm:              16400.570 B/op
                 ·gc.churn.G1_Eden_Space:          112.746 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     13263.471 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.637 B/op
                 ·gc.count:                        2.000 counts
                 ·gc.time:                         1.000 ms



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer":
  9.383 ±(99.9%) 0.082 ops/ms [Average]
  (min, avg, max) = (9.360, 9.383, 9.409), stdev = 0.021
  CI (99.9%): [9.301, 9.465] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate":
  139.757 ±(99.9%) 1.223 MB/sec [Average]
  (min, avg, max) = (139.413, 139.757, 140.140), stdev = 0.318
  CI (99.9%): [138.535, 140.980] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm":
  16400.754 ±(99.9%) 0.666 B/op [Average]
  (min, avg, max) = (16400.567, 16400.754, 16400.935), stdev = 0.173
  CI (99.9%): [16400.088, 16401.420] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space":
  135.296 ±(99.9%) 118.897 MB/sec [Average]
  (min, avg, max) = (112.746, 135.296, 169.123), stdev = 30.877
  CI (99.9%): [16.399, 254.194] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm":
  15880.047 ±(99.9%) 14016.240 B/op [Average]
  (min, avg, max) = (13194.962, 15880.047, 19885.223), stdev = 3639.973
  CI (99.9%): [1863.806, 29896.287] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space":
  0.071 ±(99.9%) 0.561 MB/sec [Average]
  (min, avg, max) = (0.001, 0.071, 0.332), stdev = 0.146
  CI (99.9%): [≈ 0, 0.632] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm":
  8.357 ±(99.9%) 65.715 B/op [Average]
  (min, avg, max) = (0.174, 8.357, 38.871), stdev = 17.066
  CI (99.9%): [≈ 0, 74.072] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.count":
  12.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
  CI (99.9%): [12.000, 12.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readDirectBuffer:·gc.time":
  16.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (1.000, 3.200, 6.000), stdev = 1.789
  CI (99.9%): [16.000, 16.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 128)

# Run progress: 84.00% complete, ETA 00:16:50
# Fork: 1 of 1
# Warmup Iteration   1: 69345.664 ops/ms
# Warmup Iteration   2: 67394.958 ops/ms
# Warmup Iteration   3: 76610.700 ops/ms
Iteration   1: 76616.627 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76331.873 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76561.935 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76621.470 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76639.155 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76554.212 ±(99.9%) 491.349 ops/ms [Average]
  (min, avg, max) = (76331.873, 76554.212, 76639.155), stdev = 127.602
  CI (99.9%): [76062.863, 77045.561] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1024)

# Run progress: 85.33% complete, ETA 00:15:26
# Fork: 1 of 1
# Warmup Iteration   1: 69451.399 ops/ms
# Warmup Iteration   2: 67489.005 ops/ms
# Warmup Iteration   3: 76692.224 ops/ms
Iteration   1: 76659.705 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76428.423 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76712.819 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76700.354 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76725.392 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76645.339 ±(99.9%) 476.484 ops/ms [Average]
  (min, avg, max) = (76428.423, 76645.339, 76725.392), stdev = 123.742
  CI (99.9%): [76168.854, 77121.823] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 128, transferSize = 1048576)

# Run progress: 86.67% complete, ETA 00:14:02
# Fork: 1 of 1
# Warmup Iteration   1: 69817.797 ops/ms
# Warmup Iteration   2: 67477.708 ops/ms
# Warmup Iteration   3: 76663.733 ops/ms
Iteration   1: 76657.173 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 76473.888 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 76703.781 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 76673.539 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 76724.466 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  76646.569 ±(99.9%) 385.064 ops/ms [Average]
  (min, avg, max) = (76473.888, 76646.569, 76724.466), stdev = 100.000
  CI (99.9%): [76261.506, 77031.633] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 128)

# Run progress: 88.00% complete, ETA 00:12:38
# Fork: 1 of 1
# Warmup Iteration   1: 9125.712 ops/ms
# Warmup Iteration   2: 9134.925 ops/ms
# Warmup Iteration   3: 9242.619 ops/ms
Iteration   1: 9236.036 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9236.184 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9238.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9240.937 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9237.720 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9237.860 ±(99.9%) 7.687 ops/ms [Average]
  (min, avg, max) = (9236.036, 9237.860, 9240.937), stdev = 1.996
  CI (99.9%): [9230.173, 9245.547] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁵ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1024)

# Run progress: 89.33% complete, ETA 00:11:13
# Fork: 1 of 1
# Warmup Iteration   1: 33429.929 ops/ms
# Warmup Iteration   2: 32959.008 ops/ms
# Warmup Iteration   3: 32538.302 ops/ms
Iteration   1: 32521.084 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 32543.800 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 32515.020 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 32559.782 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 32537.343 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  32535.406 ±(99.9%) 69.126 ops/ms [Average]
  (min, avg, max) = (32515.020, 32535.406, 32559.782), stdev = 17.952
  CI (99.9%): [32466.280, 32604.532] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1024, transferSize = 1048576)

# Run progress: 90.67% complete, ETA 00:09:49
# Fork: 1 of 1
# Warmup Iteration   1: 37304.173 ops/ms
# Warmup Iteration   2: 37168.165 ops/ms
# Warmup Iteration   3: 36855.522 ops/ms
Iteration   1: 36860.489 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 36987.595 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 37146.244 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 36873.362 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 36869.422 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: ≈ 10⁻⁶ B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  36947.422 ±(99.9%) 472.666 ops/ms [Average]
  (min, avg, max) = (36860.489, 36947.422, 37146.244), stdev = 122.750
  CI (99.9%): [36474.756, 37420.089] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  ≈ 10⁻⁶ B/op

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 128)

# Run progress: 92.00% complete, ETA 00:08:25
# Fork: 1 of 1
# Warmup Iteration   1: 9.396 ops/ms
# Warmup Iteration   2: 9.471 ops/ms
# Warmup Iteration   3: 9.569 ops/ms
Iteration   1: 9.574 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 9.570 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.004 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 9.571 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 9.573 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 9.571 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.005 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  9.572 ±(99.9%) 0.007 ops/ms [Average]
  (min, avg, max) = (9.570, 9.572, 9.574), stdev = 0.002
  CI (99.9%): [9.565, 9.579] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.005 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.004, 0.005, 0.005), stdev = 0.001
  CI (99.9%): [0.004, 0.006] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1024)

# Run progress: 93.33% complete, ETA 00:07:01
# Fork: 1 of 1
# Warmup Iteration   1: 16.426 ops/ms
# Warmup Iteration   2: 16.462 ops/ms
# Warmup Iteration   3: 16.489 ops/ms
Iteration   1: 16.488 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 16.492 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 16.490 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 16.486 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 16.505 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.003 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  16.492 ±(99.9%) 0.029 ops/ms [Average]
  (min, avg, max) = (16.486, 16.492, 16.505), stdev = 0.008
  CI (99.9%): [16.463, 16.521] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.003 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer
# Parameters: (targetBufferSize = 1048576, transferSize = 1048576)

# Run progress: 94.67% complete, ETA 00:05:36
# Fork: 1 of 1
# Warmup Iteration   1: 18.782 ops/ms
# Warmup Iteration   2: 18.806 ops/ms
# Warmup Iteration   3: 18.775 ops/ms
Iteration   1: 18.768 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   2: 18.758 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   3: 18.773 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   4: 18.776 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts

Iteration   5: 18.771 ops/ms
                 ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
                 ·gc.alloc.rate.norm: 0.002 B/op
                 ·gc.count:           ≈ 0 counts



Result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer":
  18.769 ±(99.9%) 0.026 ops/ms [Average]
  (min, avg, max) = (18.758, 18.769, 18.776), stdev = 0.007
  CI (99.9%): [18.743, 18.795] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate":
  ≈ 10⁻⁴ MB/sec

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm":
  0.002 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
  CI (99.9%): [0.002, 0.003] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ReaderBenchmarks.readHeapBuffer:·gc.count":
  ≈ 0 counts


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 128)

# Run progress: 96.00% complete, ETA 00:04:12
# Fork: 1 of 1
# Warmup Iteration   1: 4659.730 ops/ms
# Warmup Iteration   2: 4572.252 ops/ms
# Warmup Iteration   3: 4530.678 ops/ms
Iteration   1: 4531.502 ops/ms
                 ·gc.alloc.rate:                   1787.167 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1747.591 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     424.649 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         17.000 ms

Iteration   2: 4533.018 ops/ms
                 ·gc.alloc.rate:                   1787.779 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1803.998 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.205 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         18.000 ms

Iteration   3: 4531.706 ops/ms
                 ·gc.alloc.rate:                   1787.187 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1803.909 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.329 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         22.000 ms

Iteration   4: 4529.403 ops/ms
                 ·gc.alloc.rate:                   1786.353 MB/sec
                 ·gc.alloc.rate.norm:              434.265 B/op
                 ·gc.churn.G1_Eden_Space:          1804.000 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     438.555 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         16.000 ms

Iteration   5: 4529.514 ops/ms
                 ·gc.alloc.rate:                   1786.381 MB/sec
                 ·gc.alloc.rate.norm:              434.264 B/op
                 ·gc.churn.G1_Eden_Space:          1747.600 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     424.837 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        31.000 counts
                 ·gc.time:                         20.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4531.029 ±(99.9%) 5.959 ops/ms [Average]
  (min, avg, max) = (4529.403, 4531.029, 4533.018), stdev = 1.547
  CI (99.9%): [4525.070, 4536.987] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1786.973 ±(99.9%) 2.333 MB/sec [Average]
  (min, avg, max) = (1786.353, 1786.973, 1787.779), stdev = 0.606
  CI (99.9%): [1784.641, 1789.306] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  434.265 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (434.264, 434.265, 434.265), stdev = 0.001
  CI (99.9%): [434.263, 434.267] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1781.420 ±(99.9%) 118.898 MB/sec [Average]
  (min, avg, max) = (1747.591, 1781.420, 1804.000), stdev = 30.877
  CI (99.9%): [1662.522, 1900.317] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  432.915 ±(99.9%) 28.731 B/op [Average]
  (min, avg, max) = (424.649, 432.915, 438.555), stdev = 7.461
  CI (99.9%): [404.183, 461.646] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.003 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
  CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  158.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (31.000, 31.600, 32.000), stdev = 0.548
  CI (99.9%): [158.000, 158.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  93.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (16.000, 18.600, 22.000), stdev = 2.408
  CI (99.9%): [93.000, 93.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1024)

# Run progress: 97.33% complete, ETA 00:02:48
# Fork: 1 of 1
# Warmup Iteration   1: 4735.879 ops/ms
# Warmup Iteration   2: 4614.105 ops/ms
# Warmup Iteration   3: 4576.821 ops/ms
Iteration   1: 4582.477 ops/ms
                 ·gc.alloc.rate:                   1800.001 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1803.975 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     433.472 B/op
                 ·gc.churn.G1_Survivor_Space:      0.002 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   2: 4581.726 ops/ms
                 ·gc.alloc.rate:                   1799.722 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1804.012 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     433.548 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         21.000 ms

Iteration   3: 4576.293 ops/ms
                 ·gc.alloc.rate:                   1797.550 MB/sec
                 ·gc.alloc.rate.norm:              432.517 B/op
                 ·gc.churn.G1_Eden_Space:          1803.955 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     434.058 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         22.000 ms

Iteration   4: 4577.277 ops/ms
                 ·gc.alloc.rate:                   1797.921 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1803.945 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     433.966 B/op
                 ·gc.churn.G1_Survivor_Space:      0.005 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         20.000 ms

Iteration   5: 4580.438 ops/ms
                 ·gc.alloc.rate:                   1799.175 MB/sec
                 ·gc.alloc.rate.norm:              432.516 B/op
                 ·gc.churn.G1_Eden_Space:          1803.963 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     433.668 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        32.000 counts
                 ·gc.time:                         17.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  4579.642 ±(99.9%) 10.513 ops/ms [Average]
  (min, avg, max) = (4576.293, 4579.642, 4582.477), stdev = 2.730
  CI (99.9%): [4569.129, 4590.156] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1798.874 ±(99.9%) 4.192 MB/sec [Average]
  (min, avg, max) = (1797.550, 1798.874, 1800.001), stdev = 1.089
  CI (99.9%): [1794.682, 1803.065] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.517 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.516, 432.517, 432.517), stdev = 0.001
  CI (99.9%): [432.515, 432.518] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1803.970 ±(99.9%) 0.100 MB/sec [Average]
  (min, avg, max) = (1803.945, 1803.970, 1804.012), stdev = 0.026
  CI (99.9%): [1803.870, 1804.070] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  433.742 ±(99.9%) 0.992 B/op [Average]
  (min, avg, max) = (433.472, 433.742, 434.058), stdev = 0.258
  CI (99.9%): [432.750, 434.734] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.004 MB/sec [Average]
  (min, avg, max) = (0.002, 0.004, 0.005), stdev = 0.001
  CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  160.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
  CI (99.9%): [160.000, 160.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  100.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (17.000, 20.000, 22.000), stdev = 1.871
  CI (99.9%): [100.000, 100.000] (assumes normal distribution)


# JMH version: 1.27
# VM version: JDK 17-internal, OpenJDK 64-Bit Server VM, 17-internal+0-adhoc.marschall.jdk
# VM invoker: /home/marschall/tmp/JDK-4926314/patched/jdk/bin/java
# VM options: -Djmh.blackhole.mode=COMPILER
# JMH blackhole mode: compiler-assisted blackhole
# Warmup: 3 iterations, 10 s each
# Measurement: 5 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan
# Parameters: (transferSize = 1048576)

# Run progress: 98.67% complete, ETA 00:01:24
# Fork: 1 of 1
# Warmup Iteration   1: 5244.313 ops/ms
# Warmup Iteration   2: 5108.517 ops/ms
# Warmup Iteration   3: 5078.533 ops/ms
Iteration   1: 5080.146 ops/ms
                 ·gc.alloc.rate:                   1994.465 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.081 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     427.663 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         24.000 ms

Iteration   2: 5081.458 ops/ms
                 ·gc.alloc.rate:                   1995.010 MB/sec
                 ·gc.alloc.rate.norm:              432.299 B/op
                 ·gc.churn.G1_Eden_Space:          2029.504 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     439.773 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         27.000 ms

Iteration   3: 5077.333 ops/ms
                 ·gc.alloc.rate:                   1993.366 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.102 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     427.903 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         24.000 ms

Iteration   4: 5082.836 ops/ms
                 ·gc.alloc.rate:                   1995.514 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          1973.092 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     427.440 B/op
                 ·gc.churn.G1_Survivor_Space:      0.004 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        35.000 counts
                 ·gc.time:                         24.000 ms

Iteration   5: 5079.370 ops/ms
                 ·gc.alloc.rate:                   1994.161 MB/sec
                 ·gc.alloc.rate.norm:              432.298 B/op
                 ·gc.churn.G1_Eden_Space:          2029.466 MB/sec
                 ·gc.churn.G1_Eden_Space.norm:     439.952 B/op
                 ·gc.churn.G1_Survivor_Space:      0.003 MB/sec
                 ·gc.churn.G1_Survivor_Space.norm: 0.001 B/op
                 ·gc.count:                        36.000 counts
                 ·gc.time:                         24.000 ms



Result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan":
  5080.229 ±(99.9%) 8.040 ops/ms [Average]
  (min, avg, max) = (5077.333, 5080.229, 5082.836), stdev = 2.088
  CI (99.9%): [5072.189, 5088.268] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate":
  1994.503 ±(99.9%) 3.158 MB/sec [Average]
  (min, avg, max) = (1993.366, 1994.503, 1995.514), stdev = 0.820
  CI (99.9%): [1991.345, 1997.661] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.alloc.rate.norm":
  432.298 ±(99.9%) 0.002 B/op [Average]
  (min, avg, max) = (432.298, 432.298, 432.299), stdev = 0.001
  CI (99.9%): [432.296, 432.300] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space":
  1995.649 ±(99.9%) 118.938 MB/sec [Average]
  (min, avg, max) = (1973.081, 1995.649, 2029.504), stdev = 30.888
  CI (99.9%): [1876.711, 2114.587] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm":
  432.546 ±(99.9%) 25.726 B/op [Average]
  (min, avg, max) = (427.440, 432.546, 439.952), stdev = 6.681
  CI (99.9%): [406.821, 458.272] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space":
  0.004 ±(99.9%) 0.002 MB/sec [Average]
  (min, avg, max) = (0.003, 0.004, 0.004), stdev = 0.001
  CI (99.9%): [0.002, 0.005] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm":
  0.001 ±(99.9%) 0.001 B/op [Average]
  (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
  CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.count":
  177.000 ±(99.9%) 0.001 counts [Sum]
  (min, avg, max) = (35.000, 35.400, 36.000), stdev = 0.548
  CI (99.9%): [177.000, 177.000] (assumes normal distribution)

Secondary result "com.github.marschall.readerbenchmarks.ScannerBenchmarks.scan:·gc.time":
  123.000 ±(99.9%) 0.001 ms [Sum]
  (min, avg, max) = (24.000, 24.600, 27.000), stdev = 1.342
  CI (99.9%): [123.000, 123.000] (assumes normal distribution)


# Run complete. Total time: 01:45:18

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           (charsetName)  (targetBufferSize)  (transferSize)   Mode  Cnt      Score       Error   Units
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128             128  thrpt    5   3011.341 ±    11.231  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128            1024  thrpt    5   3035.743 ±     4.298  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                 128         1048576  thrpt    5   2991.081 ±     5.792  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024             128  thrpt    5    384.955 ±     0.395  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024            1024  thrpt    5    424.777 ±     0.958  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII                1024         1048576  thrpt    5    397.898 ±     1.076  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576             128  thrpt    5      0.379 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576             128  thrpt    5      0.116 ±     0.023    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576            1024  thrpt    5      0.418 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576            1024  thrpt    5      0.101 ±     0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                             US-ASCII             1048576         1048576  thrpt    5      0.373 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate              US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm         US-ASCII             1048576         1048576  thrpt    5      0.114 ±     0.018    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                   US-ASCII             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128             128  thrpt    5   3138.338 ±     4.310  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128            1024  thrpt    5   3236.178 ±    20.689  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                 128         1048576  thrpt    5   3516.500 ±    32.600  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024             128  thrpt    5    408.890 ±     0.301  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024            1024  thrpt    5    439.793 ±     1.433  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1                1024         1048576  thrpt    5    458.620 ±     0.556  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576             128  thrpt    5      0.397 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576             128  thrpt    5      0.111 ±     0.022    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576            1024  thrpt    5      0.422 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576            1024  thrpt    5      0.101 ±     0.016    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                           ISO-8859-1             1048576         1048576  thrpt    5      0.448 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate            ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm       ISO-8859-1             1048576         1048576  thrpt    5      0.094 ±     0.015    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                 ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128             128  thrpt    5   3439.486 ±    10.785  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128            1024  thrpt    5   3422.438 ±     5.717  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                 128         1048576  thrpt    5   3481.166 ±    19.002  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024             128  thrpt    5    448.184 ±     0.586  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024            1024  thrpt    5    464.339 ±     0.570  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8                1024         1048576  thrpt    5    453.191 ±     0.649  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576             128  thrpt    5      0.444 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576             128  thrpt    5      0.098 ±     0.012    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576            1024  thrpt    5      0.438 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576            1024  thrpt    5      0.095 ±     0.013    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readDirectBuffer                                UTF-8             1048576         1048576  thrpt    5      0.472 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                 UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm            UTF-8             1048576         1048576  thrpt    5      0.091 ±     0.023    B/op
InputStreamReaderBenchmarks.readDirectBuffer:·gc.count                      UTF-8             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128             128  thrpt    5   9903.819 ±    17.728  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128            1024  thrpt    5  12258.661 ±    38.438  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                 128         1048576  thrpt    5  13174.609 ±    28.981  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024             128  thrpt    5   1137.621 ±     2.191  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024            1024  thrpt    5   2419.794 ±     4.069  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII                1024         1048576  thrpt    5   1989.336 ±     2.351  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576             128  thrpt    5      0.924 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576             128  thrpt    5      0.048 ±     0.013    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576            1024  thrpt    5      1.506 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576            1024  thrpt    5      0.030 ±     0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                               US-ASCII             1048576         1048576  thrpt    5      1.556 ±     0.010  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                US-ASCII             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm           US-ASCII             1048576         1048576  thrpt    5      0.029 ±     0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                     US-ASCII             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128             128  thrpt    5  10818.947 ±    12.819  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128            1024  thrpt    5  13472.280 ±    10.604  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                 128         1048576  thrpt    5  14625.204 ±    32.191  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024             128  thrpt    5   1148.286 ±     1.900  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024             128  thrpt    5     ≈ 10⁻⁴                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024            1024  thrpt    5   2687.188 ±     3.134  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1                1024         1048576  thrpt    5   2780.712 ±     4.187  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576             128  thrpt    5      1.092 ±     0.001  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576             128  thrpt    5      0.040 ±     0.008    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576            1024  thrpt    5      1.499 ±     0.009  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576            1024  thrpt    5      0.030 ±     0.015    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                             ISO-8859-1             1048576         1048576  thrpt    5      1.549 ±     0.008  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate              ISO-8859-1             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm         ISO-8859-1             1048576         1048576  thrpt    5      0.029 ±     0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                   ISO-8859-1             1048576         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128             128  thrpt    5  10189.758 ±    17.055  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128            1024  thrpt    5  11803.379 ±    16.375  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                 128         1048576  thrpt    5  11173.408 ±    15.647  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                 128         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                 128         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024             128  thrpt    5   1575.440 ±     4.041  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024            1024  thrpt    5   2417.356 ±     8.427  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024            1024  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8                1024         1048576  thrpt    5   2207.222 ±     2.526  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8                1024         1048576  thrpt    5     ≈ 10⁻⁵                B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8                1024         1048576  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576             128  thrpt    5      1.603 ±     0.006  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576             128  thrpt    5      0.028 ±     0.010    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576             128  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576            1024  thrpt    5      2.471 ±     0.009  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576            1024  thrpt    5      0.019 ±     0.008    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576            1024  thrpt    5        ≈ 0              counts
InputStreamReaderBenchmarks.readHeapBuffer                                  UTF-8             1048576         1048576  thrpt    5      2.040 ±     0.003  ops/ms
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                   UTF-8             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
InputStreamReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm              UTF-8             1048576         1048576  thrpt    5      0.022 ±     0.011    B/op
InputStreamReaderBenchmarks.readHeapBuffer:·gc.count                        UTF-8             1048576         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readDirectBuffer                                             N/A                 128             128  thrpt    5  13263.532 ±    46.760  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128             128  thrpt    5   3276.536 ±    11.541  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128             128  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128             128  thrpt    5   3281.006 ±    97.073  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128             128  thrpt    5    272.382 ±     8.352    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128             128  thrpt    5      0.004 ±     0.008  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128             128  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128             128  thrpt    5    291.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128             128  thrpt    5    160.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128            1024  thrpt    5  13381.376 ±    20.960  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128            1024  thrpt    5   3305.616 ±     5.209  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128            1024  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128            1024  thrpt    5   3314.793 ±    97.102  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128            1024  thrpt    5    272.766 ±     8.299    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128            1024  thrpt    5      0.004 ±     0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128            1024  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128            1024  thrpt    5    294.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128            1024  thrpt    5    164.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                 128         1048576  thrpt    5  13086.618 ±    68.424  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                 128         1048576  thrpt    5   3232.801 ±    16.806  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                 128         1048576  thrpt    5    272.010 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                 128         1048576  thrpt    5   3224.593 ±    97.097  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                 128         1048576  thrpt    5    271.319 ±     7.813    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                 128         1048576  thrpt    5      0.004 ±     0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴                B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                 128         1048576  thrpt    5    286.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                 128         1048576  thrpt    5    171.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024             128  thrpt    5   1683.894 ±     2.969  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024             128  thrpt    5   3156.511 ±     5.527  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024             128  thrpt    5   2064.078 ±     0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024             128  thrpt    5   3156.953 ±     0.227  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024             128  thrpt    5   2064.367 ±     3.625    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024             128  thrpt    5      0.003 ±     0.002  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024             128  thrpt    5      0.002 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024             128  thrpt    5    280.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024             128  thrpt    5    162.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024            1024  thrpt    5   3841.442 ±    63.946  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024            1024  thrpt    5   7200.853 ±   119.869  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024            1024  thrpt    5   2064.053 ±     0.001    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024            1024  thrpt    5   7190.945 ±   173.641  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024            1024  thrpt    5   2061.251 ±    65.294    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024            1024  thrpt    5      0.005 ±     0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024            1024  thrpt    5      0.001 ±     0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024            1024  thrpt    5    437.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024            1024  thrpt    5    244.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A                1024         1048576  thrpt    5   3549.414 ±    26.175  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A                1024         1048576  thrpt    5   6653.489 ±    48.857  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A                1024         1048576  thrpt    5   2064.055 ±     0.002    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A                1024         1048576  thrpt    5   6669.764 ±     0.263  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A                1024         1048576  thrpt    5   2069.110 ±    15.288    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A                1024         1048576  thrpt    5      0.004 ±     0.009  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A                1024         1048576  thrpt    5      0.001 ±     0.003    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A                1024         1048576  thrpt    5    425.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A                1024         1048576  thrpt    5    231.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576             128  thrpt    5      2.275 ±     0.023  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576             128  thrpt    5     33.890 ±     0.344  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576             128  thrpt    5  16400.720 ±     2.458    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576             128  thrpt    5     33.823 ±   118.893  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576             128  thrpt    5  16357.807 ± 57500.418    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576             128  thrpt    5      0.001 ±     0.006  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576             128  thrpt    5      0.320 ±     2.753    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576             128  thrpt    5      3.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576             128  thrpt    5      5.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576            1024  thrpt    5      7.156 ±     0.030  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576            1024  thrpt    5    106.593 ±     0.444  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576            1024  thrpt    5  16400.769 ±     1.164    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576            1024  thrpt    5    101.472 ±    97.081  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576            1024  thrpt    5  15614.264 ± 14954.905    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576            1024  thrpt    5      0.070 ±     0.572  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576            1024  thrpt    5     10.766 ±    88.066    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576            1024  thrpt    5      9.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576            1024  thrpt    5     15.000                  ms
ReaderBenchmarks.readDirectBuffer                                             N/A             1048576         1048576  thrpt    5      9.383 ±     0.082  ops/ms
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate                              N/A             1048576         1048576  thrpt    5    139.757 ±     1.223  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.alloc.rate.norm                         N/A             1048576         1048576  thrpt    5  16400.754 ±     0.666    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space                     N/A             1048576         1048576  thrpt    5    135.296 ±   118.897  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Eden_Space.norm                N/A             1048576         1048576  thrpt    5  15880.047 ± 14016.240    B/op
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space                 N/A             1048576         1048576  thrpt    5      0.071 ±     0.561  MB/sec
ReaderBenchmarks.readDirectBuffer:·gc.churn.G1_Survivor_Space.norm            N/A             1048576         1048576  thrpt    5      8.357 ±    65.715    B/op
ReaderBenchmarks.readDirectBuffer:·gc.count                                   N/A             1048576         1048576  thrpt    5     12.000              counts
ReaderBenchmarks.readDirectBuffer:·gc.time                                    N/A             1048576         1048576  thrpt    5     16.000                  ms
ReaderBenchmarks.readHeapBuffer                                               N/A                 128             128  thrpt    5  76554.212 ±   491.349  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128             128  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128            1024  thrpt    5  76645.339 ±   476.484  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                 128         1048576  thrpt    5  76646.569 ±   385.064  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                 128         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                 128         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                 128         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024             128  thrpt    5   9237.860 ±     7.687  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024             128  thrpt    5     ≈ 10⁻⁵                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024            1024  thrpt    5  32535.406 ±    69.126  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024            1024  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A                1024         1048576  thrpt    5  36947.422 ±   472.666  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A                1024         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A                1024         1048576  thrpt    5     ≈ 10⁻⁶                B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A                1024         1048576  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576             128  thrpt    5      9.572 ±     0.007  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576             128  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576             128  thrpt    5      0.005 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576             128  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576            1024  thrpt    5     16.492 ±     0.029  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576            1024  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576            1024  thrpt    5      0.003 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576            1024  thrpt    5        ≈ 0              counts
ReaderBenchmarks.readHeapBuffer                                               N/A             1048576         1048576  thrpt    5     18.769 ±     0.026  ops/ms
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate                                N/A             1048576         1048576  thrpt    5     ≈ 10⁻⁴              MB/sec
ReaderBenchmarks.readHeapBuffer:·gc.alloc.rate.norm                           N/A             1048576         1048576  thrpt    5      0.002 ±     0.001    B/op
ReaderBenchmarks.readHeapBuffer:·gc.count                                     N/A             1048576         1048576  thrpt    5        ≈ 0              counts
ScannerBenchmarks.scan                                                        N/A                 N/A             128  thrpt    5   4531.029 ±     5.959  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A             128  thrpt    5   1786.973 ±     2.333  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A             128  thrpt    5    434.265 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A             128  thrpt    5   1781.420 ±   118.898  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A             128  thrpt    5    432.915 ±    28.731    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A             128  thrpt    5      0.003 ±     0.004  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A             128  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A             128  thrpt    5    158.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A             128  thrpt    5     93.000                  ms
ScannerBenchmarks.scan                                                        N/A                 N/A            1024  thrpt    5   4579.642 ±    10.513  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A            1024  thrpt    5   1798.874 ±     4.192  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A            1024  thrpt    5    432.517 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A            1024  thrpt    5   1803.970 ±     0.100  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A            1024  thrpt    5    433.742 ±     0.992    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A            1024  thrpt    5      0.004 ±     0.004  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A            1024  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A            1024  thrpt    5    160.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A            1024  thrpt    5    100.000                  ms
ScannerBenchmarks.scan                                                        N/A                 N/A         1048576  thrpt    5   5080.229 ±     8.040  ops/ms
ScannerBenchmarks.scan:·gc.alloc.rate                                         N/A                 N/A         1048576  thrpt    5   1994.503 ±     3.158  MB/sec
ScannerBenchmarks.scan:·gc.alloc.rate.norm                                    N/A                 N/A         1048576  thrpt    5    432.298 ±     0.002    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space                                N/A                 N/A         1048576  thrpt    5   1995.649 ±   118.938  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Eden_Space.norm                           N/A                 N/A         1048576  thrpt    5    432.546 ±    25.726    B/op
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space                            N/A                 N/A         1048576  thrpt    5      0.004 ±     0.002  MB/sec
ScannerBenchmarks.scan:·gc.churn.G1_Survivor_Space.norm                       N/A                 N/A         1048576  thrpt    5      0.001 ±     0.001    B/op
ScannerBenchmarks.scan:·gc.count                                              N/A                 N/A         1048576  thrpt    5    177.000              counts
ScannerBenchmarks.scan:·gc.time                                               N/A                 N/A         1048576  thrpt    5    123.000                  ms

Benchmark result is saved to jmh-result.csv
